/*! Oink 2018-05-29 */


(function(global, factory) {
    typeof exports === "object" && typeof module !== "undefined" ? factory(exports, require("jquery")) : typeof define === "function" && define.amd ? define([ "exports", "jquery" ], factory) : factory(global.bootstrap = {}, global.jQuery);
})(this, function(exports, $) {
    "use strict";
    $ = $ && $.hasOwnProperty("default") ? $["default"] : $;
    function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
    }
    function _defineProperty(obj, key, value) {
        if (key in obj) {
            Object.defineProperty(obj, key, {
                value: value,
                enumerable: true,
                configurable: true,
                writable: true
            });
        } else {
            obj[key] = value;
        }
        return obj;
    }
    function _objectSpread(target) {
        for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i] != null ? arguments[i] : {};
            var ownKeys = Object.keys(source);
            if (typeof Object.getOwnPropertySymbols === "function") {
                ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                    return Object.getOwnPropertyDescriptor(source, sym).enumerable;
                }));
            }
            ownKeys.forEach(function(key) {
                _defineProperty(target, key, source[key]);
            });
        }
        return target;
    }
    function _inheritsLoose(subClass, superClass) {
        subClass.prototype = Object.create(superClass.prototype);
        subClass.prototype.constructor = subClass;
        subClass.__proto__ = superClass;
    }
    var Util = function($$$1) {
        var TRANSITION_END = "transitionend";
        var MAX_UID = 1e6;
        var MILLISECONDS_MULTIPLIER = 1e3;
        function toType(obj) {
            return {}.toString.call(obj).match(/\s([a-z]+)/i)[1].toLowerCase();
        }
        function getSpecialTransitionEndEvent() {
            return {
                bindType: TRANSITION_END,
                delegateType: TRANSITION_END,
                handle: function handle(event) {
                    if ($$$1(event.target).is(this)) {
                        return event.handleObj.handler.apply(this, arguments);
                    }
                    return undefined;
                }
            };
        }
        function transitionEndEmulator(duration) {
            var _this = this;
            var called = false;
            $$$1(this).one(Util.TRANSITION_END, function() {
                called = true;
            });
            setTimeout(function() {
                if (!called) {
                    Util.triggerTransitionEnd(_this);
                }
            }, duration);
            return this;
        }
        function setTransitionEndSupport() {
            $$$1.fn.emulateTransitionEnd = transitionEndEmulator;
            $$$1.event.special[Util.TRANSITION_END] = getSpecialTransitionEndEvent();
        }
        var Util = {
            TRANSITION_END: "bsTransitionEnd",
            getUID: function getUID(prefix) {
                do {
                    prefix += ~~(Math.random() * MAX_UID);
                } while (document.getElementById(prefix));
                return prefix;
            },
            getSelectorFromElement: function getSelectorFromElement(element) {
                var selector = element.getAttribute("data-target");
                if (!selector || selector === "#") {
                    selector = element.getAttribute("href") || "";
                }
                try {
                    var $selector = $$$1(document).find(selector);
                    return $selector.length > 0 ? selector : null;
                } catch (err) {
                    return null;
                }
            },
            getTransitionDurationFromElement: function getTransitionDurationFromElement(element) {
                if (!element) {
                    return 0;
                }
                var transitionDuration = $$$1(element).css("transition-duration");
                var floatTransitionDuration = parseFloat(transitionDuration);
                if (!floatTransitionDuration) {
                    return 0;
                }
                transitionDuration = transitionDuration.split(",")[0];
                return parseFloat(transitionDuration) * MILLISECONDS_MULTIPLIER;
            },
            reflow: function reflow(element) {
                return element.offsetHeight;
            },
            triggerTransitionEnd: function triggerTransitionEnd(element) {
                $$$1(element).trigger(TRANSITION_END);
            },
            supportsTransitionEnd: function supportsTransitionEnd() {
                return Boolean(TRANSITION_END);
            },
            isElement: function isElement(obj) {
                return (obj[0] || obj).nodeType;
            },
            typeCheckConfig: function typeCheckConfig(componentName, config, configTypes) {
                for (var property in configTypes) {
                    if (Object.prototype.hasOwnProperty.call(configTypes, property)) {
                        var expectedTypes = configTypes[property];
                        var value = config[property];
                        var valueType = value && Util.isElement(value) ? "element" : toType(value);
                        if (!new RegExp(expectedTypes).test(valueType)) {
                            throw new Error(componentName.toUpperCase() + ": " + ('Option "' + property + '" provided type "' + valueType + '" ') + ('but expected type "' + expectedTypes + '".'));
                        }
                    }
                }
            }
        };
        setTransitionEndSupport();
        return Util;
    }($);
    var Alert = function($$$1) {
        var NAME = "alert";
        var VERSION = "4.1.1";
        var DATA_KEY = "bs.alert";
        var EVENT_KEY = "." + DATA_KEY;
        var DATA_API_KEY = ".data-api";
        var JQUERY_NO_CONFLICT = $$$1.fn[NAME];
        var Selector = {
            DISMISS: '[data-dismiss="alert"]'
        };
        var Event = {
            CLOSE: "close" + EVENT_KEY,
            CLOSED: "closed" + EVENT_KEY,
            CLICK_DATA_API: "click" + EVENT_KEY + DATA_API_KEY
        };
        var ClassName = {
            ALERT: "alert",
            FADE: "fade",
            SHOW: "show"
        };
        var Alert = function() {
            function Alert(element) {
                this._element = element;
            }
            var _proto = Alert.prototype;
            _proto.close = function close(element) {
                var rootElement = this._element;
                if (element) {
                    rootElement = this._getRootElement(element);
                }
                var customEvent = this._triggerCloseEvent(rootElement);
                if (customEvent.isDefaultPrevented()) {
                    return;
                }
                this._removeElement(rootElement);
            };
            _proto.dispose = function dispose() {
                $$$1.removeData(this._element, DATA_KEY);
                this._element = null;
            };
            _proto._getRootElement = function _getRootElement(element) {
                var selector = Util.getSelectorFromElement(element);
                var parent = false;
                if (selector) {
                    parent = $$$1(selector)[0];
                }
                if (!parent) {
                    parent = $$$1(element).closest("." + ClassName.ALERT)[0];
                }
                return parent;
            };
            _proto._triggerCloseEvent = function _triggerCloseEvent(element) {
                var closeEvent = $$$1.Event(Event.CLOSE);
                $$$1(element).trigger(closeEvent);
                return closeEvent;
            };
            _proto._removeElement = function _removeElement(element) {
                var _this = this;
                $$$1(element).removeClass(ClassName.SHOW);
                if (!$$$1(element).hasClass(ClassName.FADE)) {
                    this._destroyElement(element);
                    return;
                }
                var transitionDuration = Util.getTransitionDurationFromElement(element);
                $$$1(element).one(Util.TRANSITION_END, function(event) {
                    return _this._destroyElement(element, event);
                }).emulateTransitionEnd(transitionDuration);
            };
            _proto._destroyElement = function _destroyElement(element) {
                $$$1(element).detach().trigger(Event.CLOSED).remove();
            };
            Alert._jQueryInterface = function _jQueryInterface(config) {
                return this.each(function() {
                    var $element = $$$1(this);
                    var data = $element.data(DATA_KEY);
                    if (!data) {
                        data = new Alert(this);
                        $element.data(DATA_KEY, data);
                    }
                    if (config === "close") {
                        data[config](this);
                    }
                });
            };
            Alert._handleDismiss = function _handleDismiss(alertInstance) {
                return function(event) {
                    if (event) {
                        event.preventDefault();
                    }
                    alertInstance.close(this);
                };
            };
            _createClass(Alert, null, [ {
                key: "VERSION",
                get: function get() {
                    return VERSION;
                }
            } ]);
            return Alert;
        }();
        $$$1(document).on(Event.CLICK_DATA_API, Selector.DISMISS, Alert._handleDismiss(new Alert()));
        $$$1.fn[NAME] = Alert._jQueryInterface;
        $$$1.fn[NAME].Constructor = Alert;
        $$$1.fn[NAME].noConflict = function() {
            $$$1.fn[NAME] = JQUERY_NO_CONFLICT;
            return Alert._jQueryInterface;
        };
        return Alert;
    }($);
    var Button = function($$$1) {
        var NAME = "button";
        var VERSION = "4.1.1";
        var DATA_KEY = "bs.button";
        var EVENT_KEY = "." + DATA_KEY;
        var DATA_API_KEY = ".data-api";
        var JQUERY_NO_CONFLICT = $$$1.fn[NAME];
        var ClassName = {
            ACTIVE: "active",
            BUTTON: "btn",
            FOCUS: "focus"
        };
        var Selector = {
            DATA_TOGGLE_CARROT: '[data-toggle^="button"]',
            DATA_TOGGLE: '[data-toggle="buttons"]',
            INPUT: "input",
            ACTIVE: ".active",
            BUTTON: ".btn"
        };
        var Event = {
            CLICK_DATA_API: "click" + EVENT_KEY + DATA_API_KEY,
            FOCUS_BLUR_DATA_API: "focus" + EVENT_KEY + DATA_API_KEY + " " + ("blur" + EVENT_KEY + DATA_API_KEY)
        };
        var Button = function() {
            function Button(element) {
                this._element = element;
            }
            var _proto = Button.prototype;
            _proto.toggle = function toggle() {
                var triggerChangeEvent = true;
                var addAriaPressed = true;
                var rootElement = $$$1(this._element).closest(Selector.DATA_TOGGLE)[0];
                if (rootElement) {
                    var input = $$$1(this._element).find(Selector.INPUT)[0];
                    if (input) {
                        if (input.type === "radio") {
                            if (input.checked && $$$1(this._element).hasClass(ClassName.ACTIVE)) {
                                triggerChangeEvent = false;
                            } else {
                                var activeElement = $$$1(rootElement).find(Selector.ACTIVE)[0];
                                if (activeElement) {
                                    $$$1(activeElement).removeClass(ClassName.ACTIVE);
                                }
                            }
                        }
                        if (triggerChangeEvent) {
                            if (input.hasAttribute("disabled") || rootElement.hasAttribute("disabled") || input.classList.contains("disabled") || rootElement.classList.contains("disabled")) {
                                return;
                            }
                            input.checked = !$$$1(this._element).hasClass(ClassName.ACTIVE);
                            $$$1(input).trigger("change");
                        }
                        input.focus();
                        addAriaPressed = false;
                    }
                }
                if (addAriaPressed) {
                    this._element.setAttribute("aria-pressed", !$$$1(this._element).hasClass(ClassName.ACTIVE));
                }
                if (triggerChangeEvent) {
                    $$$1(this._element).toggleClass(ClassName.ACTIVE);
                }
            };
            _proto.dispose = function dispose() {
                $$$1.removeData(this._element, DATA_KEY);
                this._element = null;
            };
            Button._jQueryInterface = function _jQueryInterface(config) {
                return this.each(function() {
                    var data = $$$1(this).data(DATA_KEY);
                    if (!data) {
                        data = new Button(this);
                        $$$1(this).data(DATA_KEY, data);
                    }
                    if (config === "toggle") {
                        data[config]();
                    }
                });
            };
            _createClass(Button, null, [ {
                key: "VERSION",
                get: function get() {
                    return VERSION;
                }
            } ]);
            return Button;
        }();
        $$$1(document).on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE_CARROT, function(event) {
            event.preventDefault();
            var button = event.target;
            if (!$$$1(button).hasClass(ClassName.BUTTON)) {
                button = $$$1(button).closest(Selector.BUTTON);
            }
            Button._jQueryInterface.call($$$1(button), "toggle");
        }).on(Event.FOCUS_BLUR_DATA_API, Selector.DATA_TOGGLE_CARROT, function(event) {
            var button = $$$1(event.target).closest(Selector.BUTTON)[0];
            $$$1(button).toggleClass(ClassName.FOCUS, /^focus(in)?$/.test(event.type));
        });
        $$$1.fn[NAME] = Button._jQueryInterface;
        $$$1.fn[NAME].Constructor = Button;
        $$$1.fn[NAME].noConflict = function() {
            $$$1.fn[NAME] = JQUERY_NO_CONFLICT;
            return Button._jQueryInterface;
        };
        return Button;
    }($);
    var Carousel = function($$$1) {
        var NAME = "carousel";
        var VERSION = "4.1.1";
        var DATA_KEY = "bs.carousel";
        var EVENT_KEY = "." + DATA_KEY;
        var DATA_API_KEY = ".data-api";
        var JQUERY_NO_CONFLICT = $$$1.fn[NAME];
        var ARROW_LEFT_KEYCODE = 37;
        var ARROW_RIGHT_KEYCODE = 39;
        var TOUCHEVENT_COMPAT_WAIT = 500;
        var Default = {
            interval: 5e3,
            keyboard: true,
            slide: false,
            pause: "hover",
            wrap: true
        };
        var DefaultType = {
            interval: "(number|boolean)",
            keyboard: "boolean",
            slide: "(boolean|string)",
            pause: "(string|boolean)",
            wrap: "boolean"
        };
        var Direction = {
            NEXT: "next",
            PREV: "prev",
            LEFT: "left",
            RIGHT: "right"
        };
        var Event = {
            SLIDE: "slide" + EVENT_KEY,
            SLID: "slid" + EVENT_KEY,
            KEYDOWN: "keydown" + EVENT_KEY,
            MOUSEENTER: "mouseenter" + EVENT_KEY,
            MOUSELEAVE: "mouseleave" + EVENT_KEY,
            TOUCHEND: "touchend" + EVENT_KEY,
            LOAD_DATA_API: "load" + EVENT_KEY + DATA_API_KEY,
            CLICK_DATA_API: "click" + EVENT_KEY + DATA_API_KEY
        };
        var ClassName = {
            CAROUSEL: "carousel",
            ACTIVE: "active",
            SLIDE: "slide",
            RIGHT: "carousel-item-right",
            LEFT: "carousel-item-left",
            NEXT: "carousel-item-next",
            PREV: "carousel-item-prev",
            ITEM: "carousel-item"
        };
        var Selector = {
            ACTIVE: ".active",
            ACTIVE_ITEM: ".active.carousel-item",
            ITEM: ".carousel-item",
            NEXT_PREV: ".carousel-item-next, .carousel-item-prev",
            INDICATORS: ".carousel-indicators",
            DATA_SLIDE: "[data-slide], [data-slide-to]",
            DATA_RIDE: '[data-ride="carousel"]'
        };
        var Carousel = function() {
            function Carousel(element, config) {
                this._items = null;
                this._interval = null;
                this._activeElement = null;
                this._isPaused = false;
                this._isSliding = false;
                this.touchTimeout = null;
                this._config = this._getConfig(config);
                this._element = $$$1(element)[0];
                this._indicatorsElement = $$$1(this._element).find(Selector.INDICATORS)[0];
                this._addEventListeners();
            }
            var _proto = Carousel.prototype;
            _proto.next = function next() {
                if (!this._isSliding) {
                    this._slide(Direction.NEXT);
                }
            };
            _proto.nextWhenVisible = function nextWhenVisible() {
                if (!document.hidden && $$$1(this._element).is(":visible") && $$$1(this._element).css("visibility") !== "hidden") {
                    this.next();
                }
            };
            _proto.prev = function prev() {
                if (!this._isSliding) {
                    this._slide(Direction.PREV);
                }
            };
            _proto.pause = function pause(event) {
                if (!event) {
                    this._isPaused = true;
                }
                if ($$$1(this._element).find(Selector.NEXT_PREV)[0]) {
                    Util.triggerTransitionEnd(this._element);
                    this.cycle(true);
                }
                clearInterval(this._interval);
                this._interval = null;
            };
            _proto.cycle = function cycle(event) {
                if (!event) {
                    this._isPaused = false;
                }
                if (this._interval) {
                    clearInterval(this._interval);
                    this._interval = null;
                }
                if (this._config.interval && !this._isPaused) {
                    this._interval = setInterval((document.visibilityState ? this.nextWhenVisible : this.next).bind(this), this._config.interval);
                }
            };
            _proto.to = function to(index) {
                var _this = this;
                this._activeElement = $$$1(this._element).find(Selector.ACTIVE_ITEM)[0];
                var activeIndex = this._getItemIndex(this._activeElement);
                if (index > this._items.length - 1 || index < 0) {
                    return;
                }
                if (this._isSliding) {
                    $$$1(this._element).one(Event.SLID, function() {
                        return _this.to(index);
                    });
                    return;
                }
                if (activeIndex === index) {
                    this.pause();
                    this.cycle();
                    return;
                }
                var direction = index > activeIndex ? Direction.NEXT : Direction.PREV;
                this._slide(direction, this._items[index]);
            };
            _proto.dispose = function dispose() {
                $$$1(this._element).off(EVENT_KEY);
                $$$1.removeData(this._element, DATA_KEY);
                this._items = null;
                this._config = null;
                this._element = null;
                this._interval = null;
                this._isPaused = null;
                this._isSliding = null;
                this._activeElement = null;
                this._indicatorsElement = null;
            };
            _proto._getConfig = function _getConfig(config) {
                config = _objectSpread({}, Default, config);
                Util.typeCheckConfig(NAME, config, DefaultType);
                return config;
            };
            _proto._addEventListeners = function _addEventListeners() {
                var _this2 = this;
                if (this._config.keyboard) {
                    $$$1(this._element).on(Event.KEYDOWN, function(event) {
                        return _this2._keydown(event);
                    });
                }
                if (this._config.pause === "hover") {
                    $$$1(this._element).on(Event.MOUSEENTER, function(event) {
                        return _this2.pause(event);
                    }).on(Event.MOUSELEAVE, function(event) {
                        return _this2.cycle(event);
                    });
                    if ("ontouchstart" in document.documentElement) {
                        $$$1(this._element).on(Event.TOUCHEND, function() {
                            _this2.pause();
                            if (_this2.touchTimeout) {
                                clearTimeout(_this2.touchTimeout);
                            }
                            _this2.touchTimeout = setTimeout(function(event) {
                                return _this2.cycle(event);
                            }, TOUCHEVENT_COMPAT_WAIT + _this2._config.interval);
                        });
                    }
                }
            };
            _proto._keydown = function _keydown(event) {
                if (/input|textarea/i.test(event.target.tagName)) {
                    return;
                }
                switch (event.which) {
                  case ARROW_LEFT_KEYCODE:
                    event.preventDefault();
                    this.prev();
                    break;

                  case ARROW_RIGHT_KEYCODE:
                    event.preventDefault();
                    this.next();
                    break;

                  default:
                }
            };
            _proto._getItemIndex = function _getItemIndex(element) {
                this._items = $$$1.makeArray($$$1(element).parent().find(Selector.ITEM));
                return this._items.indexOf(element);
            };
            _proto._getItemByDirection = function _getItemByDirection(direction, activeElement) {
                var isNextDirection = direction === Direction.NEXT;
                var isPrevDirection = direction === Direction.PREV;
                var activeIndex = this._getItemIndex(activeElement);
                var lastItemIndex = this._items.length - 1;
                var isGoingToWrap = isPrevDirection && activeIndex === 0 || isNextDirection && activeIndex === lastItemIndex;
                if (isGoingToWrap && !this._config.wrap) {
                    return activeElement;
                }
                var delta = direction === Direction.PREV ? -1 : 1;
                var itemIndex = (activeIndex + delta) % this._items.length;
                return itemIndex === -1 ? this._items[this._items.length - 1] : this._items[itemIndex];
            };
            _proto._triggerSlideEvent = function _triggerSlideEvent(relatedTarget, eventDirectionName) {
                var targetIndex = this._getItemIndex(relatedTarget);
                var fromIndex = this._getItemIndex($$$1(this._element).find(Selector.ACTIVE_ITEM)[0]);
                var slideEvent = $$$1.Event(Event.SLIDE, {
                    relatedTarget: relatedTarget,
                    direction: eventDirectionName,
                    from: fromIndex,
                    to: targetIndex
                });
                $$$1(this._element).trigger(slideEvent);
                return slideEvent;
            };
            _proto._setActiveIndicatorElement = function _setActiveIndicatorElement(element) {
                if (this._indicatorsElement) {
                    $$$1(this._indicatorsElement).find(Selector.ACTIVE).removeClass(ClassName.ACTIVE);
                    var nextIndicator = this._indicatorsElement.children[this._getItemIndex(element)];
                    if (nextIndicator) {
                        $$$1(nextIndicator).addClass(ClassName.ACTIVE);
                    }
                }
            };
            _proto._slide = function _slide(direction, element) {
                var _this3 = this;
                var activeElement = $$$1(this._element).find(Selector.ACTIVE_ITEM)[0];
                var activeElementIndex = this._getItemIndex(activeElement);
                var nextElement = element || activeElement && this._getItemByDirection(direction, activeElement);
                var nextElementIndex = this._getItemIndex(nextElement);
                var isCycling = Boolean(this._interval);
                var directionalClassName;
                var orderClassName;
                var eventDirectionName;
                if (direction === Direction.NEXT) {
                    directionalClassName = ClassName.LEFT;
                    orderClassName = ClassName.NEXT;
                    eventDirectionName = Direction.LEFT;
                } else {
                    directionalClassName = ClassName.RIGHT;
                    orderClassName = ClassName.PREV;
                    eventDirectionName = Direction.RIGHT;
                }
                if (nextElement && $$$1(nextElement).hasClass(ClassName.ACTIVE)) {
                    this._isSliding = false;
                    return;
                }
                var slideEvent = this._triggerSlideEvent(nextElement, eventDirectionName);
                if (slideEvent.isDefaultPrevented()) {
                    return;
                }
                if (!activeElement || !nextElement) {
                    return;
                }
                this._isSliding = true;
                if (isCycling) {
                    this.pause();
                }
                this._setActiveIndicatorElement(nextElement);
                var slidEvent = $$$1.Event(Event.SLID, {
                    relatedTarget: nextElement,
                    direction: eventDirectionName,
                    from: activeElementIndex,
                    to: nextElementIndex
                });
                if ($$$1(this._element).hasClass(ClassName.SLIDE)) {
                    $$$1(nextElement).addClass(orderClassName);
                    Util.reflow(nextElement);
                    $$$1(activeElement).addClass(directionalClassName);
                    $$$1(nextElement).addClass(directionalClassName);
                    var transitionDuration = Util.getTransitionDurationFromElement(activeElement);
                    $$$1(activeElement).one(Util.TRANSITION_END, function() {
                        $$$1(nextElement).removeClass(directionalClassName + " " + orderClassName).addClass(ClassName.ACTIVE);
                        $$$1(activeElement).removeClass(ClassName.ACTIVE + " " + orderClassName + " " + directionalClassName);
                        _this3._isSliding = false;
                        setTimeout(function() {
                            return $$$1(_this3._element).trigger(slidEvent);
                        }, 0);
                    }).emulateTransitionEnd(transitionDuration);
                } else {
                    $$$1(activeElement).removeClass(ClassName.ACTIVE);
                    $$$1(nextElement).addClass(ClassName.ACTIVE);
                    this._isSliding = false;
                    $$$1(this._element).trigger(slidEvent);
                }
                if (isCycling) {
                    this.cycle();
                }
            };
            Carousel._jQueryInterface = function _jQueryInterface(config) {
                return this.each(function() {
                    var data = $$$1(this).data(DATA_KEY);
                    var _config = _objectSpread({}, Default, $$$1(this).data());
                    if (typeof config === "object") {
                        _config = _objectSpread({}, _config, config);
                    }
                    var action = typeof config === "string" ? config : _config.slide;
                    if (!data) {
                        data = new Carousel(this, _config);
                        $$$1(this).data(DATA_KEY, data);
                    }
                    if (typeof config === "number") {
                        data.to(config);
                    } else if (typeof action === "string") {
                        if (typeof data[action] === "undefined") {
                            throw new TypeError('No method named "' + action + '"');
                        }
                        data[action]();
                    } else if (_config.interval) {
                        data.pause();
                        data.cycle();
                    }
                });
            };
            Carousel._dataApiClickHandler = function _dataApiClickHandler(event) {
                var selector = Util.getSelectorFromElement(this);
                if (!selector) {
                    return;
                }
                var target = $$$1(selector)[0];
                if (!target || !$$$1(target).hasClass(ClassName.CAROUSEL)) {
                    return;
                }
                var config = _objectSpread({}, $$$1(target).data(), $$$1(this).data());
                var slideIndex = this.getAttribute("data-slide-to");
                if (slideIndex) {
                    config.interval = false;
                }
                Carousel._jQueryInterface.call($$$1(target), config);
                if (slideIndex) {
                    $$$1(target).data(DATA_KEY).to(slideIndex);
                }
                event.preventDefault();
            };
            _createClass(Carousel, null, [ {
                key: "VERSION",
                get: function get() {
                    return VERSION;
                }
            }, {
                key: "Default",
                get: function get() {
                    return Default;
                }
            } ]);
            return Carousel;
        }();
        $$$1(document).on(Event.CLICK_DATA_API, Selector.DATA_SLIDE, Carousel._dataApiClickHandler);
        $$$1(window).on(Event.LOAD_DATA_API, function() {
            $$$1(Selector.DATA_RIDE).each(function() {
                var $carousel = $$$1(this);
                Carousel._jQueryInterface.call($carousel, $carousel.data());
            });
        });
        $$$1.fn[NAME] = Carousel._jQueryInterface;
        $$$1.fn[NAME].Constructor = Carousel;
        $$$1.fn[NAME].noConflict = function() {
            $$$1.fn[NAME] = JQUERY_NO_CONFLICT;
            return Carousel._jQueryInterface;
        };
        return Carousel;
    }($);
    var Collapse = function($$$1) {
        var NAME = "collapse";
        var VERSION = "4.1.1";
        var DATA_KEY = "bs.collapse";
        var EVENT_KEY = "." + DATA_KEY;
        var DATA_API_KEY = ".data-api";
        var JQUERY_NO_CONFLICT = $$$1.fn[NAME];
        var Default = {
            toggle: true,
            parent: ""
        };
        var DefaultType = {
            toggle: "boolean",
            parent: "(string|element)"
        };
        var Event = {
            SHOW: "show" + EVENT_KEY,
            SHOWN: "shown" + EVENT_KEY,
            HIDE: "hide" + EVENT_KEY,
            HIDDEN: "hidden" + EVENT_KEY,
            CLICK_DATA_API: "click" + EVENT_KEY + DATA_API_KEY
        };
        var ClassName = {
            SHOW: "show",
            COLLAPSE: "collapse",
            COLLAPSING: "collapsing",
            COLLAPSED: "collapsed"
        };
        var Dimension = {
            WIDTH: "width",
            HEIGHT: "height"
        };
        var Selector = {
            ACTIVES: ".show, .collapsing",
            DATA_TOGGLE: '[data-toggle="collapse"]'
        };
        var Collapse = function() {
            function Collapse(element, config) {
                this._isTransitioning = false;
                this._element = element;
                this._config = this._getConfig(config);
                this._triggerArray = $$$1.makeArray($$$1('[data-toggle="collapse"][href="#' + element.id + '"],' + ('[data-toggle="collapse"][data-target="#' + element.id + '"]')));
                var tabToggles = $$$1(Selector.DATA_TOGGLE);
                for (var i = 0; i < tabToggles.length; i++) {
                    var elem = tabToggles[i];
                    var selector = Util.getSelectorFromElement(elem);
                    if (selector !== null && $$$1(selector).filter(element).length > 0) {
                        this._selector = selector;
                        this._triggerArray.push(elem);
                    }
                }
                this._parent = this._config.parent ? this._getParent() : null;
                if (!this._config.parent) {
                    this._addAriaAndCollapsedClass(this._element, this._triggerArray);
                }
                if (this._config.toggle) {
                    this.toggle();
                }
            }
            var _proto = Collapse.prototype;
            _proto.toggle = function toggle() {
                if ($$$1(this._element).hasClass(ClassName.SHOW)) {
                    this.hide();
                } else {
                    this.show();
                }
            };
            _proto.show = function show() {
                var _this = this;
                if (this._isTransitioning || $$$1(this._element).hasClass(ClassName.SHOW)) {
                    return;
                }
                var actives;
                var activesData;
                if (this._parent) {
                    actives = $$$1.makeArray($$$1(this._parent).find(Selector.ACTIVES).filter('[data-parent="' + this._config.parent + '"]'));
                    if (actives.length === 0) {
                        actives = null;
                    }
                }
                if (actives) {
                    activesData = $$$1(actives).not(this._selector).data(DATA_KEY);
                    if (activesData && activesData._isTransitioning) {
                        return;
                    }
                }
                var startEvent = $$$1.Event(Event.SHOW);
                $$$1(this._element).trigger(startEvent);
                if (startEvent.isDefaultPrevented()) {
                    return;
                }
                if (actives) {
                    Collapse._jQueryInterface.call($$$1(actives).not(this._selector), "hide");
                    if (!activesData) {
                        $$$1(actives).data(DATA_KEY, null);
                    }
                }
                var dimension = this._getDimension();
                $$$1(this._element).removeClass(ClassName.COLLAPSE).addClass(ClassName.COLLAPSING);
                this._element.style[dimension] = 0;
                if (this._triggerArray.length > 0) {
                    $$$1(this._triggerArray).removeClass(ClassName.COLLAPSED).attr("aria-expanded", true);
                }
                this.setTransitioning(true);
                var complete = function complete() {
                    $$$1(_this._element).removeClass(ClassName.COLLAPSING).addClass(ClassName.COLLAPSE).addClass(ClassName.SHOW);
                    _this._element.style[dimension] = "";
                    _this.setTransitioning(false);
                    $$$1(_this._element).trigger(Event.SHOWN);
                };
                var capitalizedDimension = dimension[0].toUpperCase() + dimension.slice(1);
                var scrollSize = "scroll" + capitalizedDimension;
                var transitionDuration = Util.getTransitionDurationFromElement(this._element);
                $$$1(this._element).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);
                this._element.style[dimension] = this._element[scrollSize] + "px";
            };
            _proto.hide = function hide() {
                var _this2 = this;
                if (this._isTransitioning || !$$$1(this._element).hasClass(ClassName.SHOW)) {
                    return;
                }
                var startEvent = $$$1.Event(Event.HIDE);
                $$$1(this._element).trigger(startEvent);
                if (startEvent.isDefaultPrevented()) {
                    return;
                }
                var dimension = this._getDimension();
                this._element.style[dimension] = this._element.getBoundingClientRect()[dimension] + "px";
                Util.reflow(this._element);
                $$$1(this._element).addClass(ClassName.COLLAPSING).removeClass(ClassName.COLLAPSE).removeClass(ClassName.SHOW);
                if (this._triggerArray.length > 0) {
                    for (var i = 0; i < this._triggerArray.length; i++) {
                        var trigger = this._triggerArray[i];
                        var selector = Util.getSelectorFromElement(trigger);
                        if (selector !== null) {
                            var $elem = $$$1(selector);
                            if (!$elem.hasClass(ClassName.SHOW)) {
                                $$$1(trigger).addClass(ClassName.COLLAPSED).attr("aria-expanded", false);
                            }
                        }
                    }
                }
                this.setTransitioning(true);
                var complete = function complete() {
                    _this2.setTransitioning(false);
                    $$$1(_this2._element).removeClass(ClassName.COLLAPSING).addClass(ClassName.COLLAPSE).trigger(Event.HIDDEN);
                };
                this._element.style[dimension] = "";
                var transitionDuration = Util.getTransitionDurationFromElement(this._element);
                $$$1(this._element).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);
            };
            _proto.setTransitioning = function setTransitioning(isTransitioning) {
                this._isTransitioning = isTransitioning;
            };
            _proto.dispose = function dispose() {
                $$$1.removeData(this._element, DATA_KEY);
                this._config = null;
                this._parent = null;
                this._element = null;
                this._triggerArray = null;
                this._isTransitioning = null;
            };
            _proto._getConfig = function _getConfig(config) {
                config = _objectSpread({}, Default, config);
                config.toggle = Boolean(config.toggle);
                Util.typeCheckConfig(NAME, config, DefaultType);
                return config;
            };
            _proto._getDimension = function _getDimension() {
                var hasWidth = $$$1(this._element).hasClass(Dimension.WIDTH);
                return hasWidth ? Dimension.WIDTH : Dimension.HEIGHT;
            };
            _proto._getParent = function _getParent() {
                var _this3 = this;
                var parent = null;
                if (Util.isElement(this._config.parent)) {
                    parent = this._config.parent;
                    if (typeof this._config.parent.jquery !== "undefined") {
                        parent = this._config.parent[0];
                    }
                } else {
                    parent = $$$1(this._config.parent)[0];
                }
                var selector = '[data-toggle="collapse"][data-parent="' + this._config.parent + '"]';
                $$$1(parent).find(selector).each(function(i, element) {
                    _this3._addAriaAndCollapsedClass(Collapse._getTargetFromElement(element), [ element ]);
                });
                return parent;
            };
            _proto._addAriaAndCollapsedClass = function _addAriaAndCollapsedClass(element, triggerArray) {
                if (element) {
                    var isOpen = $$$1(element).hasClass(ClassName.SHOW);
                    if (triggerArray.length > 0) {
                        $$$1(triggerArray).toggleClass(ClassName.COLLAPSED, !isOpen).attr("aria-expanded", isOpen);
                    }
                }
            };
            Collapse._getTargetFromElement = function _getTargetFromElement(element) {
                var selector = Util.getSelectorFromElement(element);
                return selector ? $$$1(selector)[0] : null;
            };
            Collapse._jQueryInterface = function _jQueryInterface(config) {
                return this.each(function() {
                    var $this = $$$1(this);
                    var data = $this.data(DATA_KEY);
                    var _config = _objectSpread({}, Default, $this.data(), typeof config === "object" && config ? config : {});
                    if (!data && _config.toggle && /show|hide/.test(config)) {
                        _config.toggle = false;
                    }
                    if (!data) {
                        data = new Collapse(this, _config);
                        $this.data(DATA_KEY, data);
                    }
                    if (typeof config === "string") {
                        if (typeof data[config] === "undefined") {
                            throw new TypeError('No method named "' + config + '"');
                        }
                        data[config]();
                    }
                });
            };
            _createClass(Collapse, null, [ {
                key: "VERSION",
                get: function get() {
                    return VERSION;
                }
            }, {
                key: "Default",
                get: function get() {
                    return Default;
                }
            } ]);
            return Collapse;
        }();
        $$$1(document).on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE, function(event) {
            if (event.currentTarget.tagName === "A") {
                event.preventDefault();
            }
            var $trigger = $$$1(this);
            var selector = Util.getSelectorFromElement(this);
            $$$1(selector).each(function() {
                var $target = $$$1(this);
                var data = $target.data(DATA_KEY);
                var config = data ? "toggle" : $trigger.data();
                Collapse._jQueryInterface.call($target, config);
            });
        });
        $$$1.fn[NAME] = Collapse._jQueryInterface;
        $$$1.fn[NAME].Constructor = Collapse;
        $$$1.fn[NAME].noConflict = function() {
            $$$1.fn[NAME] = JQUERY_NO_CONFLICT;
            return Collapse._jQueryInterface;
        };
        return Collapse;
    }($);
    var isBrowser = typeof window !== "undefined" && typeof document !== "undefined";
    var longerTimeoutBrowsers = [ "Edge", "Trident", "Firefox" ];
    var timeoutDuration = 0;
    for (var i = 0; i < longerTimeoutBrowsers.length; i += 1) {
        if (isBrowser && navigator.userAgent.indexOf(longerTimeoutBrowsers[i]) >= 0) {
            timeoutDuration = 1;
            break;
        }
    }
    function microtaskDebounce(fn) {
        var called = false;
        return function() {
            if (called) {
                return;
            }
            called = true;
            window.Promise.resolve().then(function() {
                called = false;
                fn();
            });
        };
    }
    function taskDebounce(fn) {
        var scheduled = false;
        return function() {
            if (!scheduled) {
                scheduled = true;
                setTimeout(function() {
                    scheduled = false;
                    fn();
                }, timeoutDuration);
            }
        };
    }
    var supportsMicroTasks = isBrowser && window.Promise;
    var debounce = supportsMicroTasks ? microtaskDebounce : taskDebounce;
    function isFunction(functionToCheck) {
        var getType = {};
        return functionToCheck && getType.toString.call(functionToCheck) === "[object Function]";
    }
    function getStyleComputedProperty(element, property) {
        if (element.nodeType !== 1) {
            return [];
        }
        var css = getComputedStyle(element, null);
        return property ? css[property] : css;
    }
    function getParentNode(element) {
        if (element.nodeName === "HTML") {
            return element;
        }
        return element.parentNode || element.host;
    }
    function getScrollParent(element) {
        if (!element) {
            return document.body;
        }
        switch (element.nodeName) {
          case "HTML":
          case "BODY":
            return element.ownerDocument.body;

          case "#document":
            return element.body;
        }
        var _getStyleComputedProp = getStyleComputedProperty(element), overflow = _getStyleComputedProp.overflow, overflowX = _getStyleComputedProp.overflowX, overflowY = _getStyleComputedProp.overflowY;
        if (/(auto|scroll|overlay)/.test(overflow + overflowY + overflowX)) {
            return element;
        }
        return getScrollParent(getParentNode(element));
    }
    var isIE11 = isBrowser && !!(window.MSInputMethodContext && document.documentMode);
    var isIE10 = isBrowser && /MSIE 10/.test(navigator.userAgent);
    function isIE(version) {
        if (version === 11) {
            return isIE11;
        }
        if (version === 10) {
            return isIE10;
        }
        return isIE11 || isIE10;
    }
    function getOffsetParent(element) {
        if (!element) {
            return document.documentElement;
        }
        var noOffsetParent = isIE(10) ? document.body : null;
        var offsetParent = element.offsetParent;
        while (offsetParent === noOffsetParent && element.nextElementSibling) {
            offsetParent = (element = element.nextElementSibling).offsetParent;
        }
        var nodeName = offsetParent && offsetParent.nodeName;
        if (!nodeName || nodeName === "BODY" || nodeName === "HTML") {
            return element ? element.ownerDocument.documentElement : document.documentElement;
        }
        if ([ "TD", "TABLE" ].indexOf(offsetParent.nodeName) !== -1 && getStyleComputedProperty(offsetParent, "position") === "static") {
            return getOffsetParent(offsetParent);
        }
        return offsetParent;
    }
    function isOffsetContainer(element) {
        var nodeName = element.nodeName;
        if (nodeName === "BODY") {
            return false;
        }
        return nodeName === "HTML" || getOffsetParent(element.firstElementChild) === element;
    }
    function getRoot(node) {
        if (node.parentNode !== null) {
            return getRoot(node.parentNode);
        }
        return node;
    }
    function findCommonOffsetParent(element1, element2) {
        if (!element1 || !element1.nodeType || !element2 || !element2.nodeType) {
            return document.documentElement;
        }
        var order = element1.compareDocumentPosition(element2) & Node.DOCUMENT_POSITION_FOLLOWING;
        var start = order ? element1 : element2;
        var end = order ? element2 : element1;
        var range = document.createRange();
        range.setStart(start, 0);
        range.setEnd(end, 0);
        var commonAncestorContainer = range.commonAncestorContainer;
        if (element1 !== commonAncestorContainer && element2 !== commonAncestorContainer || start.contains(end)) {
            if (isOffsetContainer(commonAncestorContainer)) {
                return commonAncestorContainer;
            }
            return getOffsetParent(commonAncestorContainer);
        }
        var element1root = getRoot(element1);
        if (element1root.host) {
            return findCommonOffsetParent(element1root.host, element2);
        } else {
            return findCommonOffsetParent(element1, getRoot(element2).host);
        }
    }
    function getScroll(element) {
        var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "top";
        var upperSide = side === "top" ? "scrollTop" : "scrollLeft";
        var nodeName = element.nodeName;
        if (nodeName === "BODY" || nodeName === "HTML") {
            var html = element.ownerDocument.documentElement;
            var scrollingElement = element.ownerDocument.scrollingElement || html;
            return scrollingElement[upperSide];
        }
        return element[upperSide];
    }
    function includeScroll(rect, element) {
        var subtract = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
        var scrollTop = getScroll(element, "top");
        var scrollLeft = getScroll(element, "left");
        var modifier = subtract ? -1 : 1;
        rect.top += scrollTop * modifier;
        rect.bottom += scrollTop * modifier;
        rect.left += scrollLeft * modifier;
        rect.right += scrollLeft * modifier;
        return rect;
    }
    function getBordersSize(styles, axis) {
        var sideA = axis === "x" ? "Left" : "Top";
        var sideB = sideA === "Left" ? "Right" : "Bottom";
        return parseFloat(styles["border" + sideA + "Width"], 10) + parseFloat(styles["border" + sideB + "Width"], 10);
    }
    function getSize(axis, body, html, computedStyle) {
        return Math.max(body["offset" + axis], body["scroll" + axis], html["client" + axis], html["offset" + axis], html["scroll" + axis], isIE(10) ? html["offset" + axis] + computedStyle["margin" + (axis === "Height" ? "Top" : "Left")] + computedStyle["margin" + (axis === "Height" ? "Bottom" : "Right")] : 0);
    }
    function getWindowSizes() {
        var body = document.body;
        var html = document.documentElement;
        var computedStyle = isIE(10) && getComputedStyle(html);
        return {
            height: getSize("Height", body, html, computedStyle),
            width: getSize("Width", body, html, computedStyle)
        };
    }
    var classCallCheck = function(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    };
    var createClass = function() {
        function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
            }
        }
        return function(Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
        };
    }();
    var defineProperty = function(obj, key, value) {
        if (key in obj) {
            Object.defineProperty(obj, key, {
                value: value,
                enumerable: true,
                configurable: true,
                writable: true
            });
        } else {
            obj[key] = value;
        }
        return obj;
    };
    var _extends = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                    target[key] = source[key];
                }
            }
        }
        return target;
    };
    function getClientRect(offsets) {
        return _extends({}, offsets, {
            right: offsets.left + offsets.width,
            bottom: offsets.top + offsets.height
        });
    }
    function getBoundingClientRect(element) {
        var rect = {};
        try {
            if (isIE(10)) {
                rect = element.getBoundingClientRect();
                var scrollTop = getScroll(element, "top");
                var scrollLeft = getScroll(element, "left");
                rect.top += scrollTop;
                rect.left += scrollLeft;
                rect.bottom += scrollTop;
                rect.right += scrollLeft;
            } else {
                rect = element.getBoundingClientRect();
            }
        } catch (e) {}
        var result = {
            left: rect.left,
            top: rect.top,
            width: rect.right - rect.left,
            height: rect.bottom - rect.top
        };
        var sizes = element.nodeName === "HTML" ? getWindowSizes() : {};
        var width = sizes.width || element.clientWidth || result.right - result.left;
        var height = sizes.height || element.clientHeight || result.bottom - result.top;
        var horizScrollbar = element.offsetWidth - width;
        var vertScrollbar = element.offsetHeight - height;
        if (horizScrollbar || vertScrollbar) {
            var styles = getStyleComputedProperty(element);
            horizScrollbar -= getBordersSize(styles, "x");
            vertScrollbar -= getBordersSize(styles, "y");
            result.width -= horizScrollbar;
            result.height -= vertScrollbar;
        }
        return getClientRect(result);
    }
    function getOffsetRectRelativeToArbitraryNode(children, parent) {
        var fixedPosition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
        var isIE10 = isIE(10);
        var isHTML = parent.nodeName === "HTML";
        var childrenRect = getBoundingClientRect(children);
        var parentRect = getBoundingClientRect(parent);
        var scrollParent = getScrollParent(children);
        var styles = getStyleComputedProperty(parent);
        var borderTopWidth = parseFloat(styles.borderTopWidth, 10);
        var borderLeftWidth = parseFloat(styles.borderLeftWidth, 10);
        if (fixedPosition && parent.nodeName === "HTML") {
            parentRect.top = Math.max(parentRect.top, 0);
            parentRect.left = Math.max(parentRect.left, 0);
        }
        var offsets = getClientRect({
            top: childrenRect.top - parentRect.top - borderTopWidth,
            left: childrenRect.left - parentRect.left - borderLeftWidth,
            width: childrenRect.width,
            height: childrenRect.height
        });
        offsets.marginTop = 0;
        offsets.marginLeft = 0;
        if (!isIE10 && isHTML) {
            var marginTop = parseFloat(styles.marginTop, 10);
            var marginLeft = parseFloat(styles.marginLeft, 10);
            offsets.top -= borderTopWidth - marginTop;
            offsets.bottom -= borderTopWidth - marginTop;
            offsets.left -= borderLeftWidth - marginLeft;
            offsets.right -= borderLeftWidth - marginLeft;
            offsets.marginTop = marginTop;
            offsets.marginLeft = marginLeft;
        }
        if (isIE10 && !fixedPosition ? parent.contains(scrollParent) : parent === scrollParent && scrollParent.nodeName !== "BODY") {
            offsets = includeScroll(offsets, parent);
        }
        return offsets;
    }
    function getViewportOffsetRectRelativeToArtbitraryNode(element) {
        var excludeScroll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        var html = element.ownerDocument.documentElement;
        var relativeOffset = getOffsetRectRelativeToArbitraryNode(element, html);
        var width = Math.max(html.clientWidth, window.innerWidth || 0);
        var height = Math.max(html.clientHeight, window.innerHeight || 0);
        var scrollTop = !excludeScroll ? getScroll(html) : 0;
        var scrollLeft = !excludeScroll ? getScroll(html, "left") : 0;
        var offset = {
            top: scrollTop - relativeOffset.top + relativeOffset.marginTop,
            left: scrollLeft - relativeOffset.left + relativeOffset.marginLeft,
            width: width,
            height: height
        };
        return getClientRect(offset);
    }
    function isFixed(element) {
        var nodeName = element.nodeName;
        if (nodeName === "BODY" || nodeName === "HTML") {
            return false;
        }
        if (getStyleComputedProperty(element, "position") === "fixed") {
            return true;
        }
        return isFixed(getParentNode(element));
    }
    function getFixedPositionOffsetParent(element) {
        if (!element || !element.parentElement || isIE()) {
            return document.documentElement;
        }
        var el = element.parentElement;
        while (el && getStyleComputedProperty(el, "transform") === "none") {
            el = el.parentElement;
        }
        return el || document.documentElement;
    }
    function getBoundaries(popper, reference, padding, boundariesElement) {
        var fixedPosition = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
        var boundaries = {
            top: 0,
            left: 0
        };
        var offsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, reference);
        if (boundariesElement === "viewport") {
            boundaries = getViewportOffsetRectRelativeToArtbitraryNode(offsetParent, fixedPosition);
        } else {
            var boundariesNode = void 0;
            if (boundariesElement === "scrollParent") {
                boundariesNode = getScrollParent(getParentNode(reference));
                if (boundariesNode.nodeName === "BODY") {
                    boundariesNode = popper.ownerDocument.documentElement;
                }
            } else if (boundariesElement === "window") {
                boundariesNode = popper.ownerDocument.documentElement;
            } else {
                boundariesNode = boundariesElement;
            }
            var offsets = getOffsetRectRelativeToArbitraryNode(boundariesNode, offsetParent, fixedPosition);
            if (boundariesNode.nodeName === "HTML" && !isFixed(offsetParent)) {
                var _getWindowSizes = getWindowSizes(), height = _getWindowSizes.height, width = _getWindowSizes.width;
                boundaries.top += offsets.top - offsets.marginTop;
                boundaries.bottom = height + offsets.top;
                boundaries.left += offsets.left - offsets.marginLeft;
                boundaries.right = width + offsets.left;
            } else {
                boundaries = offsets;
            }
        }
        boundaries.left += padding;
        boundaries.top += padding;
        boundaries.right -= padding;
        boundaries.bottom -= padding;
        return boundaries;
    }
    function getArea(_ref) {
        var width = _ref.width, height = _ref.height;
        return width * height;
    }
    function computeAutoPlacement(placement, refRect, popper, reference, boundariesElement) {
        var padding = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;
        if (placement.indexOf("auto") === -1) {
            return placement;
        }
        var boundaries = getBoundaries(popper, reference, padding, boundariesElement);
        var rects = {
            top: {
                width: boundaries.width,
                height: refRect.top - boundaries.top
            },
            right: {
                width: boundaries.right - refRect.right,
                height: boundaries.height
            },
            bottom: {
                width: boundaries.width,
                height: boundaries.bottom - refRect.bottom
            },
            left: {
                width: refRect.left - boundaries.left,
                height: boundaries.height
            }
        };
        var sortedAreas = Object.keys(rects).map(function(key) {
            return _extends({
                key: key
            }, rects[key], {
                area: getArea(rects[key])
            });
        }).sort(function(a, b) {
            return b.area - a.area;
        });
        var filteredAreas = sortedAreas.filter(function(_ref2) {
            var width = _ref2.width, height = _ref2.height;
            return width >= popper.clientWidth && height >= popper.clientHeight;
        });
        var computedPlacement = filteredAreas.length > 0 ? filteredAreas[0].key : sortedAreas[0].key;
        var variation = placement.split("-")[1];
        return computedPlacement + (variation ? "-" + variation : "");
    }
    function getReferenceOffsets(state, popper, reference) {
        var fixedPosition = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
        var commonOffsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, reference);
        return getOffsetRectRelativeToArbitraryNode(reference, commonOffsetParent, fixedPosition);
    }
    function getOuterSizes(element) {
        var styles = getComputedStyle(element);
        var x = parseFloat(styles.marginTop) + parseFloat(styles.marginBottom);
        var y = parseFloat(styles.marginLeft) + parseFloat(styles.marginRight);
        var result = {
            width: element.offsetWidth + y,
            height: element.offsetHeight + x
        };
        return result;
    }
    function getOppositePlacement(placement) {
        var hash = {
            left: "right",
            right: "left",
            bottom: "top",
            top: "bottom"
        };
        return placement.replace(/left|right|bottom|top/g, function(matched) {
            return hash[matched];
        });
    }
    function getPopperOffsets(popper, referenceOffsets, placement) {
        placement = placement.split("-")[0];
        var popperRect = getOuterSizes(popper);
        var popperOffsets = {
            width: popperRect.width,
            height: popperRect.height
        };
        var isHoriz = [ "right", "left" ].indexOf(placement) !== -1;
        var mainSide = isHoriz ? "top" : "left";
        var secondarySide = isHoriz ? "left" : "top";
        var measurement = isHoriz ? "height" : "width";
        var secondaryMeasurement = !isHoriz ? "height" : "width";
        popperOffsets[mainSide] = referenceOffsets[mainSide] + referenceOffsets[measurement] / 2 - popperRect[measurement] / 2;
        if (placement === secondarySide) {
            popperOffsets[secondarySide] = referenceOffsets[secondarySide] - popperRect[secondaryMeasurement];
        } else {
            popperOffsets[secondarySide] = referenceOffsets[getOppositePlacement(secondarySide)];
        }
        return popperOffsets;
    }
    function find(arr, check) {
        if (Array.prototype.find) {
            return arr.find(check);
        }
        return arr.filter(check)[0];
    }
    function findIndex(arr, prop, value) {
        if (Array.prototype.findIndex) {
            return arr.findIndex(function(cur) {
                return cur[prop] === value;
            });
        }
        var match = find(arr, function(obj) {
            return obj[prop] === value;
        });
        return arr.indexOf(match);
    }
    function runModifiers(modifiers, data, ends) {
        var modifiersToRun = ends === undefined ? modifiers : modifiers.slice(0, findIndex(modifiers, "name", ends));
        modifiersToRun.forEach(function(modifier) {
            if (modifier["function"]) {
                console.warn("`modifier.function` is deprecated, use `modifier.fn`!");
            }
            var fn = modifier["function"] || modifier.fn;
            if (modifier.enabled && isFunction(fn)) {
                data.offsets.popper = getClientRect(data.offsets.popper);
                data.offsets.reference = getClientRect(data.offsets.reference);
                data = fn(data, modifier);
            }
        });
        return data;
    }
    function update() {
        if (this.state.isDestroyed) {
            return;
        }
        var data = {
            instance: this,
            styles: {},
            arrowStyles: {},
            attributes: {},
            flipped: false,
            offsets: {}
        };
        data.offsets.reference = getReferenceOffsets(this.state, this.popper, this.reference, this.options.positionFixed);
        data.placement = computeAutoPlacement(this.options.placement, data.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding);
        data.originalPlacement = data.placement;
        data.positionFixed = this.options.positionFixed;
        data.offsets.popper = getPopperOffsets(this.popper, data.offsets.reference, data.placement);
        data.offsets.popper.position = this.options.positionFixed ? "fixed" : "absolute";
        data = runModifiers(this.modifiers, data);
        if (!this.state.isCreated) {
            this.state.isCreated = true;
            this.options.onCreate(data);
        } else {
            this.options.onUpdate(data);
        }
    }
    function isModifierEnabled(modifiers, modifierName) {
        return modifiers.some(function(_ref) {
            var name = _ref.name, enabled = _ref.enabled;
            return enabled && name === modifierName;
        });
    }
    function getSupportedPropertyName(property) {
        var prefixes = [ false, "ms", "Webkit", "Moz", "O" ];
        var upperProp = property.charAt(0).toUpperCase() + property.slice(1);
        for (var i = 0; i < prefixes.length; i++) {
            var prefix = prefixes[i];
            var toCheck = prefix ? "" + prefix + upperProp : property;
            if (typeof document.body.style[toCheck] !== "undefined") {
                return toCheck;
            }
        }
        return null;
    }
    function destroy() {
        this.state.isDestroyed = true;
        if (isModifierEnabled(this.modifiers, "applyStyle")) {
            this.popper.removeAttribute("x-placement");
            this.popper.style.position = "";
            this.popper.style.top = "";
            this.popper.style.left = "";
            this.popper.style.right = "";
            this.popper.style.bottom = "";
            this.popper.style.willChange = "";
            this.popper.style[getSupportedPropertyName("transform")] = "";
        }
        this.disableEventListeners();
        if (this.options.removeOnDestroy) {
            this.popper.parentNode.removeChild(this.popper);
        }
        return this;
    }
    function getWindow(element) {
        var ownerDocument = element.ownerDocument;
        return ownerDocument ? ownerDocument.defaultView : window;
    }
    function attachToScrollParents(scrollParent, event, callback, scrollParents) {
        var isBody = scrollParent.nodeName === "BODY";
        var target = isBody ? scrollParent.ownerDocument.defaultView : scrollParent;
        target.addEventListener(event, callback, {
            passive: true
        });
        if (!isBody) {
            attachToScrollParents(getScrollParent(target.parentNode), event, callback, scrollParents);
        }
        scrollParents.push(target);
    }
    function setupEventListeners(reference, options, state, updateBound) {
        state.updateBound = updateBound;
        getWindow(reference).addEventListener("resize", state.updateBound, {
            passive: true
        });
        var scrollElement = getScrollParent(reference);
        attachToScrollParents(scrollElement, "scroll", state.updateBound, state.scrollParents);
        state.scrollElement = scrollElement;
        state.eventsEnabled = true;
        return state;
    }
    function enableEventListeners() {
        if (!this.state.eventsEnabled) {
            this.state = setupEventListeners(this.reference, this.options, this.state, this.scheduleUpdate);
        }
    }
    function removeEventListeners(reference, state) {
        getWindow(reference).removeEventListener("resize", state.updateBound);
        state.scrollParents.forEach(function(target) {
            target.removeEventListener("scroll", state.updateBound);
        });
        state.updateBound = null;
        state.scrollParents = [];
        state.scrollElement = null;
        state.eventsEnabled = false;
        return state;
    }
    function disableEventListeners() {
        if (this.state.eventsEnabled) {
            cancelAnimationFrame(this.scheduleUpdate);
            this.state = removeEventListeners(this.reference, this.state);
        }
    }
    function isNumeric(n) {
        return n !== "" && !isNaN(parseFloat(n)) && isFinite(n);
    }
    function setStyles(element, styles) {
        Object.keys(styles).forEach(function(prop) {
            var unit = "";
            if ([ "width", "height", "top", "right", "bottom", "left" ].indexOf(prop) !== -1 && isNumeric(styles[prop])) {
                unit = "px";
            }
            element.style[prop] = styles[prop] + unit;
        });
    }
    function setAttributes(element, attributes) {
        Object.keys(attributes).forEach(function(prop) {
            var value = attributes[prop];
            if (value !== false) {
                element.setAttribute(prop, attributes[prop]);
            } else {
                element.removeAttribute(prop);
            }
        });
    }
    function applyStyle(data) {
        setStyles(data.instance.popper, data.styles);
        setAttributes(data.instance.popper, data.attributes);
        if (data.arrowElement && Object.keys(data.arrowStyles).length) {
            setStyles(data.arrowElement, data.arrowStyles);
        }
        return data;
    }
    function applyStyleOnLoad(reference, popper, options, modifierOptions, state) {
        var referenceOffsets = getReferenceOffsets(state, popper, reference, options.positionFixed);
        var placement = computeAutoPlacement(options.placement, referenceOffsets, popper, reference, options.modifiers.flip.boundariesElement, options.modifiers.flip.padding);
        popper.setAttribute("x-placement", placement);
        setStyles(popper, {
            position: options.positionFixed ? "fixed" : "absolute"
        });
        return options;
    }
    function computeStyle(data, options) {
        var x = options.x, y = options.y;
        var popper = data.offsets.popper;
        var legacyGpuAccelerationOption = find(data.instance.modifiers, function(modifier) {
            return modifier.name === "applyStyle";
        }).gpuAcceleration;
        if (legacyGpuAccelerationOption !== undefined) {
            console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");
        }
        var gpuAcceleration = legacyGpuAccelerationOption !== undefined ? legacyGpuAccelerationOption : options.gpuAcceleration;
        var offsetParent = getOffsetParent(data.instance.popper);
        var offsetParentRect = getBoundingClientRect(offsetParent);
        var styles = {
            position: popper.position
        };
        var offsets = {
            left: Math.floor(popper.left),
            top: Math.round(popper.top),
            bottom: Math.round(popper.bottom),
            right: Math.floor(popper.right)
        };
        var sideA = x === "bottom" ? "top" : "bottom";
        var sideB = y === "right" ? "left" : "right";
        var prefixedProperty = getSupportedPropertyName("transform");
        var left = void 0, top = void 0;
        if (sideA === "bottom") {
            top = -offsetParentRect.height + offsets.bottom;
        } else {
            top = offsets.top;
        }
        if (sideB === "right") {
            left = -offsetParentRect.width + offsets.right;
        } else {
            left = offsets.left;
        }
        if (gpuAcceleration && prefixedProperty) {
            styles[prefixedProperty] = "translate3d(" + left + "px, " + top + "px, 0)";
            styles[sideA] = 0;
            styles[sideB] = 0;
            styles.willChange = "transform";
        } else {
            var invertTop = sideA === "bottom" ? -1 : 1;
            var invertLeft = sideB === "right" ? -1 : 1;
            styles[sideA] = top * invertTop;
            styles[sideB] = left * invertLeft;
            styles.willChange = sideA + ", " + sideB;
        }
        var attributes = {
            "x-placement": data.placement
        };
        data.attributes = _extends({}, attributes, data.attributes);
        data.styles = _extends({}, styles, data.styles);
        data.arrowStyles = _extends({}, data.offsets.arrow, data.arrowStyles);
        return data;
    }
    function isModifierRequired(modifiers, requestingName, requestedName) {
        var requesting = find(modifiers, function(_ref) {
            var name = _ref.name;
            return name === requestingName;
        });
        var isRequired = !!requesting && modifiers.some(function(modifier) {
            return modifier.name === requestedName && modifier.enabled && modifier.order < requesting.order;
        });
        if (!isRequired) {
            var _requesting = "`" + requestingName + "`";
            var requested = "`" + requestedName + "`";
            console.warn(requested + " modifier is required by " + _requesting + " modifier in order to work, be sure to include it before " + _requesting + "!");
        }
        return isRequired;
    }
    function arrow(data, options) {
        var _data$offsets$arrow;
        if (!isModifierRequired(data.instance.modifiers, "arrow", "keepTogether")) {
            return data;
        }
        var arrowElement = options.element;
        if (typeof arrowElement === "string") {
            arrowElement = data.instance.popper.querySelector(arrowElement);
            if (!arrowElement) {
                return data;
            }
        } else {
            if (!data.instance.popper.contains(arrowElement)) {
                console.warn("WARNING: `arrow.element` must be child of its popper element!");
                return data;
            }
        }
        var placement = data.placement.split("-")[0];
        var _data$offsets = data.offsets, popper = _data$offsets.popper, reference = _data$offsets.reference;
        var isVertical = [ "left", "right" ].indexOf(placement) !== -1;
        var len = isVertical ? "height" : "width";
        var sideCapitalized = isVertical ? "Top" : "Left";
        var side = sideCapitalized.toLowerCase();
        var altSide = isVertical ? "left" : "top";
        var opSide = isVertical ? "bottom" : "right";
        var arrowElementSize = getOuterSizes(arrowElement)[len];
        if (reference[opSide] - arrowElementSize < popper[side]) {
            data.offsets.popper[side] -= popper[side] - (reference[opSide] - arrowElementSize);
        }
        if (reference[side] + arrowElementSize > popper[opSide]) {
            data.offsets.popper[side] += reference[side] + arrowElementSize - popper[opSide];
        }
        data.offsets.popper = getClientRect(data.offsets.popper);
        var center = reference[side] + reference[len] / 2 - arrowElementSize / 2;
        var css = getStyleComputedProperty(data.instance.popper);
        var popperMarginSide = parseFloat(css["margin" + sideCapitalized], 10);
        var popperBorderSide = parseFloat(css["border" + sideCapitalized + "Width"], 10);
        var sideValue = center - data.offsets.popper[side] - popperMarginSide - popperBorderSide;
        sideValue = Math.max(Math.min(popper[len] - arrowElementSize, sideValue), 0);
        data.arrowElement = arrowElement;
        data.offsets.arrow = (_data$offsets$arrow = {}, defineProperty(_data$offsets$arrow, side, Math.round(sideValue)), 
        defineProperty(_data$offsets$arrow, altSide, ""), _data$offsets$arrow);
        return data;
    }
    function getOppositeVariation(variation) {
        if (variation === "end") {
            return "start";
        } else if (variation === "start") {
            return "end";
        }
        return variation;
    }
    var placements = [ "auto-start", "auto", "auto-end", "top-start", "top", "top-end", "right-start", "right", "right-end", "bottom-end", "bottom", "bottom-start", "left-end", "left", "left-start" ];
    var validPlacements = placements.slice(3);
    function clockwise(placement) {
        var counter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        var index = validPlacements.indexOf(placement);
        var arr = validPlacements.slice(index + 1).concat(validPlacements.slice(0, index));
        return counter ? arr.reverse() : arr;
    }
    var BEHAVIORS = {
        FLIP: "flip",
        CLOCKWISE: "clockwise",
        COUNTERCLOCKWISE: "counterclockwise"
    };
    function flip(data, options) {
        if (isModifierEnabled(data.instance.modifiers, "inner")) {
            return data;
        }
        if (data.flipped && data.placement === data.originalPlacement) {
            return data;
        }
        var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, options.boundariesElement, data.positionFixed);
        var placement = data.placement.split("-")[0];
        var placementOpposite = getOppositePlacement(placement);
        var variation = data.placement.split("-")[1] || "";
        var flipOrder = [];
        switch (options.behavior) {
          case BEHAVIORS.FLIP:
            flipOrder = [ placement, placementOpposite ];
            break;

          case BEHAVIORS.CLOCKWISE:
            flipOrder = clockwise(placement);
            break;

          case BEHAVIORS.COUNTERCLOCKWISE:
            flipOrder = clockwise(placement, true);
            break;

          default:
            flipOrder = options.behavior;
        }
        flipOrder.forEach(function(step, index) {
            if (placement !== step || flipOrder.length === index + 1) {
                return data;
            }
            placement = data.placement.split("-")[0];
            placementOpposite = getOppositePlacement(placement);
            var popperOffsets = data.offsets.popper;
            var refOffsets = data.offsets.reference;
            var floor = Math.floor;
            var overlapsRef = placement === "left" && floor(popperOffsets.right) > floor(refOffsets.left) || placement === "right" && floor(popperOffsets.left) < floor(refOffsets.right) || placement === "top" && floor(popperOffsets.bottom) > floor(refOffsets.top) || placement === "bottom" && floor(popperOffsets.top) < floor(refOffsets.bottom);
            var overflowsLeft = floor(popperOffsets.left) < floor(boundaries.left);
            var overflowsRight = floor(popperOffsets.right) > floor(boundaries.right);
            var overflowsTop = floor(popperOffsets.top) < floor(boundaries.top);
            var overflowsBottom = floor(popperOffsets.bottom) > floor(boundaries.bottom);
            var overflowsBoundaries = placement === "left" && overflowsLeft || placement === "right" && overflowsRight || placement === "top" && overflowsTop || placement === "bottom" && overflowsBottom;
            var isVertical = [ "top", "bottom" ].indexOf(placement) !== -1;
            var flippedVariation = !!options.flipVariations && (isVertical && variation === "start" && overflowsLeft || isVertical && variation === "end" && overflowsRight || !isVertical && variation === "start" && overflowsTop || !isVertical && variation === "end" && overflowsBottom);
            if (overlapsRef || overflowsBoundaries || flippedVariation) {
                data.flipped = true;
                if (overlapsRef || overflowsBoundaries) {
                    placement = flipOrder[index + 1];
                }
                if (flippedVariation) {
                    variation = getOppositeVariation(variation);
                }
                data.placement = placement + (variation ? "-" + variation : "");
                data.offsets.popper = _extends({}, data.offsets.popper, getPopperOffsets(data.instance.popper, data.offsets.reference, data.placement));
                data = runModifiers(data.instance.modifiers, data, "flip");
            }
        });
        return data;
    }
    function keepTogether(data) {
        var _data$offsets = data.offsets, popper = _data$offsets.popper, reference = _data$offsets.reference;
        var placement = data.placement.split("-")[0];
        var floor = Math.floor;
        var isVertical = [ "top", "bottom" ].indexOf(placement) !== -1;
        var side = isVertical ? "right" : "bottom";
        var opSide = isVertical ? "left" : "top";
        var measurement = isVertical ? "width" : "height";
        if (popper[side] < floor(reference[opSide])) {
            data.offsets.popper[opSide] = floor(reference[opSide]) - popper[measurement];
        }
        if (popper[opSide] > floor(reference[side])) {
            data.offsets.popper[opSide] = floor(reference[side]);
        }
        return data;
    }
    function toValue(str, measurement, popperOffsets, referenceOffsets) {
        var split = str.match(/((?:\-|\+)?\d*\.?\d*)(.*)/);
        var value = +split[1];
        var unit = split[2];
        if (!value) {
            return str;
        }
        if (unit.indexOf("%") === 0) {
            var element = void 0;
            switch (unit) {
              case "%p":
                element = popperOffsets;
                break;

              case "%":
              case "%r":
              default:
                element = referenceOffsets;
            }
            var rect = getClientRect(element);
            return rect[measurement] / 100 * value;
        } else if (unit === "vh" || unit === "vw") {
            var size = void 0;
            if (unit === "vh") {
                size = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
            } else {
                size = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);
            }
            return size / 100 * value;
        } else {
            return value;
        }
    }
    function parseOffset(offset, popperOffsets, referenceOffsets, basePlacement) {
        var offsets = [ 0, 0 ];
        var useHeight = [ "right", "left" ].indexOf(basePlacement) !== -1;
        var fragments = offset.split(/(\+|\-)/).map(function(frag) {
            return frag.trim();
        });
        var divider = fragments.indexOf(find(fragments, function(frag) {
            return frag.search(/,|\s/) !== -1;
        }));
        if (fragments[divider] && fragments[divider].indexOf(",") === -1) {
            console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");
        }
        var splitRegex = /\s*,\s*|\s+/;
        var ops = divider !== -1 ? [ fragments.slice(0, divider).concat([ fragments[divider].split(splitRegex)[0] ]), [ fragments[divider].split(splitRegex)[1] ].concat(fragments.slice(divider + 1)) ] : [ fragments ];
        ops = ops.map(function(op, index) {
            var measurement = (index === 1 ? !useHeight : useHeight) ? "height" : "width";
            var mergeWithPrevious = false;
            return op.reduce(function(a, b) {
                if (a[a.length - 1] === "" && [ "+", "-" ].indexOf(b) !== -1) {
                    a[a.length - 1] = b;
                    mergeWithPrevious = true;
                    return a;
                } else if (mergeWithPrevious) {
                    a[a.length - 1] += b;
                    mergeWithPrevious = false;
                    return a;
                } else {
                    return a.concat(b);
                }
            }, []).map(function(str) {
                return toValue(str, measurement, popperOffsets, referenceOffsets);
            });
        });
        ops.forEach(function(op, index) {
            op.forEach(function(frag, index2) {
                if (isNumeric(frag)) {
                    offsets[index] += frag * (op[index2 - 1] === "-" ? -1 : 1);
                }
            });
        });
        return offsets;
    }
    function offset(data, _ref) {
        var offset = _ref.offset;
        var placement = data.placement, _data$offsets = data.offsets, popper = _data$offsets.popper, reference = _data$offsets.reference;
        var basePlacement = placement.split("-")[0];
        var offsets = void 0;
        if (isNumeric(+offset)) {
            offsets = [ +offset, 0 ];
        } else {
            offsets = parseOffset(offset, popper, reference, basePlacement);
        }
        if (basePlacement === "left") {
            popper.top += offsets[0];
            popper.left -= offsets[1];
        } else if (basePlacement === "right") {
            popper.top += offsets[0];
            popper.left += offsets[1];
        } else if (basePlacement === "top") {
            popper.left += offsets[0];
            popper.top -= offsets[1];
        } else if (basePlacement === "bottom") {
            popper.left += offsets[0];
            popper.top += offsets[1];
        }
        data.popper = popper;
        return data;
    }
    function preventOverflow(data, options) {
        var boundariesElement = options.boundariesElement || getOffsetParent(data.instance.popper);
        if (data.instance.reference === boundariesElement) {
            boundariesElement = getOffsetParent(boundariesElement);
        }
        var transformProp = getSupportedPropertyName("transform");
        var popperStyles = data.instance.popper.style;
        var top = popperStyles.top, left = popperStyles.left, transform = popperStyles[transformProp];
        popperStyles.top = "";
        popperStyles.left = "";
        popperStyles[transformProp] = "";
        var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, boundariesElement, data.positionFixed);
        popperStyles.top = top;
        popperStyles.left = left;
        popperStyles[transformProp] = transform;
        options.boundaries = boundaries;
        var order = options.priority;
        var popper = data.offsets.popper;
        var check = {
            primary: function primary(placement) {
                var value = popper[placement];
                if (popper[placement] < boundaries[placement] && !options.escapeWithReference) {
                    value = Math.max(popper[placement], boundaries[placement]);
                }
                return defineProperty({}, placement, value);
            },
            secondary: function secondary(placement) {
                var mainSide = placement === "right" ? "left" : "top";
                var value = popper[mainSide];
                if (popper[placement] > boundaries[placement] && !options.escapeWithReference) {
                    value = Math.min(popper[mainSide], boundaries[placement] - (placement === "right" ? popper.width : popper.height));
                }
                return defineProperty({}, mainSide, value);
            }
        };
        order.forEach(function(placement) {
            var side = [ "left", "top" ].indexOf(placement) !== -1 ? "primary" : "secondary";
            popper = _extends({}, popper, check[side](placement));
        });
        data.offsets.popper = popper;
        return data;
    }
    function shift(data) {
        var placement = data.placement;
        var basePlacement = placement.split("-")[0];
        var shiftvariation = placement.split("-")[1];
        if (shiftvariation) {
            var _data$offsets = data.offsets, reference = _data$offsets.reference, popper = _data$offsets.popper;
            var isVertical = [ "bottom", "top" ].indexOf(basePlacement) !== -1;
            var side = isVertical ? "left" : "top";
            var measurement = isVertical ? "width" : "height";
            var shiftOffsets = {
                start: defineProperty({}, side, reference[side]),
                end: defineProperty({}, side, reference[side] + reference[measurement] - popper[measurement])
            };
            data.offsets.popper = _extends({}, popper, shiftOffsets[shiftvariation]);
        }
        return data;
    }
    function hide(data) {
        if (!isModifierRequired(data.instance.modifiers, "hide", "preventOverflow")) {
            return data;
        }
        var refRect = data.offsets.reference;
        var bound = find(data.instance.modifiers, function(modifier) {
            return modifier.name === "preventOverflow";
        }).boundaries;
        if (refRect.bottom < bound.top || refRect.left > bound.right || refRect.top > bound.bottom || refRect.right < bound.left) {
            if (data.hide === true) {
                return data;
            }
            data.hide = true;
            data.attributes["x-out-of-boundaries"] = "";
        } else {
            if (data.hide === false) {
                return data;
            }
            data.hide = false;
            data.attributes["x-out-of-boundaries"] = false;
        }
        return data;
    }
    function inner(data) {
        var placement = data.placement;
        var basePlacement = placement.split("-")[0];
        var _data$offsets = data.offsets, popper = _data$offsets.popper, reference = _data$offsets.reference;
        var isHoriz = [ "left", "right" ].indexOf(basePlacement) !== -1;
        var subtractLength = [ "top", "left" ].indexOf(basePlacement) === -1;
        popper[isHoriz ? "left" : "top"] = reference[basePlacement] - (subtractLength ? popper[isHoriz ? "width" : "height"] : 0);
        data.placement = getOppositePlacement(placement);
        data.offsets.popper = getClientRect(popper);
        return data;
    }
    var modifiers = {
        shift: {
            order: 100,
            enabled: true,
            fn: shift
        },
        offset: {
            order: 200,
            enabled: true,
            fn: offset,
            offset: 0
        },
        preventOverflow: {
            order: 300,
            enabled: true,
            fn: preventOverflow,
            priority: [ "left", "right", "top", "bottom" ],
            padding: 5,
            boundariesElement: "scrollParent"
        },
        keepTogether: {
            order: 400,
            enabled: true,
            fn: keepTogether
        },
        arrow: {
            order: 500,
            enabled: true,
            fn: arrow,
            element: "[x-arrow]"
        },
        flip: {
            order: 600,
            enabled: true,
            fn: flip,
            behavior: "flip",
            padding: 5,
            boundariesElement: "viewport"
        },
        inner: {
            order: 700,
            enabled: false,
            fn: inner
        },
        hide: {
            order: 800,
            enabled: true,
            fn: hide
        },
        computeStyle: {
            order: 850,
            enabled: true,
            fn: computeStyle,
            gpuAcceleration: true,
            x: "bottom",
            y: "right"
        },
        applyStyle: {
            order: 900,
            enabled: true,
            fn: applyStyle,
            onLoad: applyStyleOnLoad,
            gpuAcceleration: undefined
        }
    };
    var Defaults = {
        placement: "bottom",
        positionFixed: false,
        eventsEnabled: true,
        removeOnDestroy: false,
        onCreate: function onCreate() {},
        onUpdate: function onUpdate() {},
        modifiers: modifiers
    };
    var Popper = function() {
        function Popper(reference, popper) {
            var _this = this;
            var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
            classCallCheck(this, Popper);
            this.scheduleUpdate = function() {
                return requestAnimationFrame(_this.update);
            };
            this.update = debounce(this.update.bind(this));
            this.options = _extends({}, Popper.Defaults, options);
            this.state = {
                isDestroyed: false,
                isCreated: false,
                scrollParents: []
            };
            this.reference = reference && reference.jquery ? reference[0] : reference;
            this.popper = popper && popper.jquery ? popper[0] : popper;
            this.options.modifiers = {};
            Object.keys(_extends({}, Popper.Defaults.modifiers, options.modifiers)).forEach(function(name) {
                _this.options.modifiers[name] = _extends({}, Popper.Defaults.modifiers[name] || {}, options.modifiers ? options.modifiers[name] : {});
            });
            this.modifiers = Object.keys(this.options.modifiers).map(function(name) {
                return _extends({
                    name: name
                }, _this.options.modifiers[name]);
            }).sort(function(a, b) {
                return a.order - b.order;
            });
            this.modifiers.forEach(function(modifierOptions) {
                if (modifierOptions.enabled && isFunction(modifierOptions.onLoad)) {
                    modifierOptions.onLoad(_this.reference, _this.popper, _this.options, modifierOptions, _this.state);
                }
            });
            this.update();
            var eventsEnabled = this.options.eventsEnabled;
            if (eventsEnabled) {
                this.enableEventListeners();
            }
            this.state.eventsEnabled = eventsEnabled;
        }
        createClass(Popper, [ {
            key: "update",
            value: function update$$1() {
                return update.call(this);
            }
        }, {
            key: "destroy",
            value: function destroy$$1() {
                return destroy.call(this);
            }
        }, {
            key: "enableEventListeners",
            value: function enableEventListeners$$1() {
                return enableEventListeners.call(this);
            }
        }, {
            key: "disableEventListeners",
            value: function disableEventListeners$$1() {
                return disableEventListeners.call(this);
            }
        } ]);
        return Popper;
    }();
    Popper.Utils = (typeof window !== "undefined" ? window : global).PopperUtils;
    Popper.placements = placements;
    Popper.Defaults = Defaults;
    var Dropdown = function($$$1) {
        var NAME = "dropdown";
        var VERSION = "4.1.1";
        var DATA_KEY = "bs.dropdown";
        var EVENT_KEY = "." + DATA_KEY;
        var DATA_API_KEY = ".data-api";
        var JQUERY_NO_CONFLICT = $$$1.fn[NAME];
        var ESCAPE_KEYCODE = 27;
        var SPACE_KEYCODE = 32;
        var TAB_KEYCODE = 9;
        var ARROW_UP_KEYCODE = 38;
        var ARROW_DOWN_KEYCODE = 40;
        var RIGHT_MOUSE_BUTTON_WHICH = 3;
        var REGEXP_KEYDOWN = new RegExp(ARROW_UP_KEYCODE + "|" + ARROW_DOWN_KEYCODE + "|" + ESCAPE_KEYCODE);
        var Event = {
            HIDE: "hide" + EVENT_KEY,
            HIDDEN: "hidden" + EVENT_KEY,
            SHOW: "show" + EVENT_KEY,
            SHOWN: "shown" + EVENT_KEY,
            CLICK: "click" + EVENT_KEY,
            CLICK_DATA_API: "click" + EVENT_KEY + DATA_API_KEY,
            KEYDOWN_DATA_API: "keydown" + EVENT_KEY + DATA_API_KEY,
            KEYUP_DATA_API: "keyup" + EVENT_KEY + DATA_API_KEY
        };
        var ClassName = {
            DISABLED: "disabled",
            SHOW: "show",
            DROPUP: "dropup",
            DROPRIGHT: "dropright",
            DROPLEFT: "dropleft",
            MENURIGHT: "dropdown-menu-right",
            MENULEFT: "dropdown-menu-left",
            POSITION_STATIC: "position-static"
        };
        var Selector = {
            DATA_TOGGLE: '[data-toggle="dropdown"]',
            FORM_CHILD: ".dropdown form",
            MENU: ".dropdown-menu",
            NAVBAR_NAV: ".navbar-nav",
            VISIBLE_ITEMS: ".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)"
        };
        var AttachmentMap = {
            TOP: "top-start",
            TOPEND: "top-end",
            BOTTOM: "bottom-start",
            BOTTOMEND: "bottom-end",
            RIGHT: "right-start",
            RIGHTEND: "right-end",
            LEFT: "left-start",
            LEFTEND: "left-end"
        };
        var Default = {
            offset: 0,
            flip: true,
            boundary: "scrollParent",
            reference: "toggle",
            display: "dynamic"
        };
        var DefaultType = {
            offset: "(number|string|function)",
            flip: "boolean",
            boundary: "(string|element)",
            reference: "(string|element)",
            display: "string"
        };
        var Dropdown = function() {
            function Dropdown(element, config) {
                this._element = element;
                this._popper = null;
                this._config = this._getConfig(config);
                this._menu = this._getMenuElement();
                this._inNavbar = this._detectNavbar();
                this._addEventListeners();
            }
            var _proto = Dropdown.prototype;
            _proto.toggle = function toggle() {
                if (this._element.disabled || $$$1(this._element).hasClass(ClassName.DISABLED)) {
                    return;
                }
                var parent = Dropdown._getParentFromElement(this._element);
                var isActive = $$$1(this._menu).hasClass(ClassName.SHOW);
                Dropdown._clearMenus();
                if (isActive) {
                    return;
                }
                var relatedTarget = {
                    relatedTarget: this._element
                };
                var showEvent = $$$1.Event(Event.SHOW, relatedTarget);
                $$$1(parent).trigger(showEvent);
                if (showEvent.isDefaultPrevented()) {
                    return;
                }
                if (!this._inNavbar) {
                    if (typeof Popper === "undefined") {
                        throw new TypeError("Bootstrap dropdown require Popper.js (https://popper.js.org)");
                    }
                    var referenceElement = this._element;
                    if (this._config.reference === "parent") {
                        referenceElement = parent;
                    } else if (Util.isElement(this._config.reference)) {
                        referenceElement = this._config.reference;
                        if (typeof this._config.reference.jquery !== "undefined") {
                            referenceElement = this._config.reference[0];
                        }
                    }
                    if (this._config.boundary !== "scrollParent") {
                        $$$1(parent).addClass(ClassName.POSITION_STATIC);
                    }
                    this._popper = new Popper(referenceElement, this._menu, this._getPopperConfig());
                }
                if ("ontouchstart" in document.documentElement && $$$1(parent).closest(Selector.NAVBAR_NAV).length === 0) {
                    $$$1(document.body).children().on("mouseover", null, $$$1.noop);
                }
                this._element.focus();
                this._element.setAttribute("aria-expanded", true);
                $$$1(this._menu).toggleClass(ClassName.SHOW);
                $$$1(parent).toggleClass(ClassName.SHOW).trigger($$$1.Event(Event.SHOWN, relatedTarget));
            };
            _proto.dispose = function dispose() {
                $$$1.removeData(this._element, DATA_KEY);
                $$$1(this._element).off(EVENT_KEY);
                this._element = null;
                this._menu = null;
                if (this._popper !== null) {
                    this._popper.destroy();
                    this._popper = null;
                }
            };
            _proto.update = function update() {
                this._inNavbar = this._detectNavbar();
                if (this._popper !== null) {
                    this._popper.scheduleUpdate();
                }
            };
            _proto._addEventListeners = function _addEventListeners() {
                var _this = this;
                $$$1(this._element).on(Event.CLICK, function(event) {
                    event.preventDefault();
                    event.stopPropagation();
                    _this.toggle();
                });
            };
            _proto._getConfig = function _getConfig(config) {
                config = _objectSpread({}, this.constructor.Default, $$$1(this._element).data(), config);
                Util.typeCheckConfig(NAME, config, this.constructor.DefaultType);
                return config;
            };
            _proto._getMenuElement = function _getMenuElement() {
                if (!this._menu) {
                    var parent = Dropdown._getParentFromElement(this._element);
                    this._menu = $$$1(parent).find(Selector.MENU)[0];
                }
                return this._menu;
            };
            _proto._getPlacement = function _getPlacement() {
                var $parentDropdown = $$$1(this._element).parent();
                var placement = AttachmentMap.BOTTOM;
                if ($parentDropdown.hasClass(ClassName.DROPUP)) {
                    placement = AttachmentMap.TOP;
                    if ($$$1(this._menu).hasClass(ClassName.MENURIGHT)) {
                        placement = AttachmentMap.TOPEND;
                    }
                } else if ($parentDropdown.hasClass(ClassName.DROPRIGHT)) {
                    placement = AttachmentMap.RIGHT;
                } else if ($parentDropdown.hasClass(ClassName.DROPLEFT)) {
                    placement = AttachmentMap.LEFT;
                } else if ($$$1(this._menu).hasClass(ClassName.MENURIGHT)) {
                    placement = AttachmentMap.BOTTOMEND;
                }
                return placement;
            };
            _proto._detectNavbar = function _detectNavbar() {
                return $$$1(this._element).closest(".navbar").length > 0;
            };
            _proto._getPopperConfig = function _getPopperConfig() {
                var _this2 = this;
                var offsetConf = {};
                if (typeof this._config.offset === "function") {
                    offsetConf.fn = function(data) {
                        data.offsets = _objectSpread({}, data.offsets, _this2._config.offset(data.offsets) || {});
                        return data;
                    };
                } else {
                    offsetConf.offset = this._config.offset;
                }
                var popperConfig = {
                    placement: this._getPlacement(),
                    modifiers: {
                        offset: offsetConf,
                        flip: {
                            enabled: this._config.flip
                        },
                        preventOverflow: {
                            boundariesElement: this._config.boundary
                        }
                    }
                };
                if (this._config.display === "static") {
                    popperConfig.modifiers.applyStyle = {
                        enabled: false
                    };
                }
                return popperConfig;
            };
            Dropdown._jQueryInterface = function _jQueryInterface(config) {
                return this.each(function() {
                    var data = $$$1(this).data(DATA_KEY);
                    var _config = typeof config === "object" ? config : null;
                    if (!data) {
                        data = new Dropdown(this, _config);
                        $$$1(this).data(DATA_KEY, data);
                    }
                    if (typeof config === "string") {
                        if (typeof data[config] === "undefined") {
                            throw new TypeError('No method named "' + config + '"');
                        }
                        data[config]();
                    }
                });
            };
            Dropdown._clearMenus = function _clearMenus(event) {
                if (event && (event.which === RIGHT_MOUSE_BUTTON_WHICH || event.type === "keyup" && event.which !== TAB_KEYCODE)) {
                    return;
                }
                var toggles = $$$1.makeArray($$$1(Selector.DATA_TOGGLE));
                for (var i = 0; i < toggles.length; i++) {
                    var parent = Dropdown._getParentFromElement(toggles[i]);
                    var context = $$$1(toggles[i]).data(DATA_KEY);
                    var relatedTarget = {
                        relatedTarget: toggles[i]
                    };
                    if (!context) {
                        continue;
                    }
                    var dropdownMenu = context._menu;
                    if (!$$$1(parent).hasClass(ClassName.SHOW)) {
                        continue;
                    }
                    if (event && (event.type === "click" && /input|textarea/i.test(event.target.tagName) || event.type === "keyup" && event.which === TAB_KEYCODE) && $$$1.contains(parent, event.target)) {
                        continue;
                    }
                    var hideEvent = $$$1.Event(Event.HIDE, relatedTarget);
                    $$$1(parent).trigger(hideEvent);
                    if (hideEvent.isDefaultPrevented()) {
                        continue;
                    }
                    if ("ontouchstart" in document.documentElement) {
                        $$$1(document.body).children().off("mouseover", null, $$$1.noop);
                    }
                    toggles[i].setAttribute("aria-expanded", "false");
                    $$$1(dropdownMenu).removeClass(ClassName.SHOW);
                    $$$1(parent).removeClass(ClassName.SHOW).trigger($$$1.Event(Event.HIDDEN, relatedTarget));
                }
            };
            Dropdown._getParentFromElement = function _getParentFromElement(element) {
                var parent;
                var selector = Util.getSelectorFromElement(element);
                if (selector) {
                    parent = $$$1(selector)[0];
                }
                return parent || element.parentNode;
            };
            Dropdown._dataApiKeydownHandler = function _dataApiKeydownHandler(event) {
                if (/input|textarea/i.test(event.target.tagName) ? event.which === SPACE_KEYCODE || event.which !== ESCAPE_KEYCODE && (event.which !== ARROW_DOWN_KEYCODE && event.which !== ARROW_UP_KEYCODE || $$$1(event.target).closest(Selector.MENU).length) : !REGEXP_KEYDOWN.test(event.which)) {
                    return;
                }
                event.preventDefault();
                event.stopPropagation();
                if (this.disabled || $$$1(this).hasClass(ClassName.DISABLED)) {
                    return;
                }
                var parent = Dropdown._getParentFromElement(this);
                var isActive = $$$1(parent).hasClass(ClassName.SHOW);
                if (!isActive && (event.which !== ESCAPE_KEYCODE || event.which !== SPACE_KEYCODE) || isActive && (event.which === ESCAPE_KEYCODE || event.which === SPACE_KEYCODE)) {
                    if (event.which === ESCAPE_KEYCODE) {
                        var toggle = $$$1(parent).find(Selector.DATA_TOGGLE)[0];
                        $$$1(toggle).trigger("focus");
                    }
                    $$$1(this).trigger("click");
                    return;
                }
                var items = $$$1(parent).find(Selector.VISIBLE_ITEMS).get();
                if (items.length === 0) {
                    return;
                }
                var index = items.indexOf(event.target);
                if (event.which === ARROW_UP_KEYCODE && index > 0) {
                    index--;
                }
                if (event.which === ARROW_DOWN_KEYCODE && index < items.length - 1) {
                    index++;
                }
                if (index < 0) {
                    index = 0;
                }
                items[index].focus();
            };
            _createClass(Dropdown, null, [ {
                key: "VERSION",
                get: function get() {
                    return VERSION;
                }
            }, {
                key: "Default",
                get: function get() {
                    return Default;
                }
            }, {
                key: "DefaultType",
                get: function get() {
                    return DefaultType;
                }
            } ]);
            return Dropdown;
        }();
        $$$1(document).on(Event.KEYDOWN_DATA_API, Selector.DATA_TOGGLE, Dropdown._dataApiKeydownHandler).on(Event.KEYDOWN_DATA_API, Selector.MENU, Dropdown._dataApiKeydownHandler).on(Event.CLICK_DATA_API + " " + Event.KEYUP_DATA_API, Dropdown._clearMenus).on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE, function(event) {
            event.preventDefault();
            event.stopPropagation();
            Dropdown._jQueryInterface.call($$$1(this), "toggle");
        }).on(Event.CLICK_DATA_API, Selector.FORM_CHILD, function(e) {
            e.stopPropagation();
        });
        $$$1.fn[NAME] = Dropdown._jQueryInterface;
        $$$1.fn[NAME].Constructor = Dropdown;
        $$$1.fn[NAME].noConflict = function() {
            $$$1.fn[NAME] = JQUERY_NO_CONFLICT;
            return Dropdown._jQueryInterface;
        };
        return Dropdown;
    }($, Popper);
    var Modal = function($$$1) {
        var NAME = "modal";
        var VERSION = "4.1.1";
        var DATA_KEY = "bs.modal";
        var EVENT_KEY = "." + DATA_KEY;
        var DATA_API_KEY = ".data-api";
        var JQUERY_NO_CONFLICT = $$$1.fn[NAME];
        var ESCAPE_KEYCODE = 27;
        var Default = {
            backdrop: true,
            keyboard: true,
            focus: true,
            show: true
        };
        var DefaultType = {
            backdrop: "(boolean|string)",
            keyboard: "boolean",
            focus: "boolean",
            show: "boolean"
        };
        var Event = {
            HIDE: "hide" + EVENT_KEY,
            HIDDEN: "hidden" + EVENT_KEY,
            SHOW: "show" + EVENT_KEY,
            SHOWN: "shown" + EVENT_KEY,
            FOCUSIN: "focusin" + EVENT_KEY,
            RESIZE: "resize" + EVENT_KEY,
            CLICK_DISMISS: "click.dismiss" + EVENT_KEY,
            KEYDOWN_DISMISS: "keydown.dismiss" + EVENT_KEY,
            MOUSEUP_DISMISS: "mouseup.dismiss" + EVENT_KEY,
            MOUSEDOWN_DISMISS: "mousedown.dismiss" + EVENT_KEY,
            CLICK_DATA_API: "click" + EVENT_KEY + DATA_API_KEY
        };
        var ClassName = {
            SCROLLBAR_MEASURER: "modal-scrollbar-measure",
            BACKDROP: "modal-backdrop",
            OPEN: "modal-open",
            FADE: "fade",
            SHOW: "show"
        };
        var Selector = {
            DIALOG: ".modal-dialog",
            DATA_TOGGLE: '[data-toggle="modal"]',
            DATA_DISMISS: '[data-dismiss="modal"]',
            FIXED_CONTENT: ".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",
            STICKY_CONTENT: ".sticky-top",
            NAVBAR_TOGGLER: ".navbar-toggler"
        };
        var Modal = function() {
            function Modal(element, config) {
                this._config = this._getConfig(config);
                this._element = element;
                this._dialog = $$$1(element).find(Selector.DIALOG)[0];
                this._backdrop = null;
                this._isShown = false;
                this._isBodyOverflowing = false;
                this._ignoreBackdropClick = false;
                this._scrollbarWidth = 0;
            }
            var _proto = Modal.prototype;
            _proto.toggle = function toggle(relatedTarget) {
                return this._isShown ? this.hide() : this.show(relatedTarget);
            };
            _proto.show = function show(relatedTarget) {
                var _this = this;
                if (this._isTransitioning || this._isShown) {
                    return;
                }
                if ($$$1(this._element).hasClass(ClassName.FADE)) {
                    this._isTransitioning = true;
                }
                var showEvent = $$$1.Event(Event.SHOW, {
                    relatedTarget: relatedTarget
                });
                $$$1(this._element).trigger(showEvent);
                if (this._isShown || showEvent.isDefaultPrevented()) {
                    return;
                }
                this._isShown = true;
                this._checkScrollbar();
                this._setScrollbar();
                this._adjustDialog();
                $$$1(document.body).addClass(ClassName.OPEN);
                this._setEscapeEvent();
                this._setResizeEvent();
                $$$1(this._element).on(Event.CLICK_DISMISS, Selector.DATA_DISMISS, function(event) {
                    return _this.hide(event);
                });
                $$$1(this._dialog).on(Event.MOUSEDOWN_DISMISS, function() {
                    $$$1(_this._element).one(Event.MOUSEUP_DISMISS, function(event) {
                        if ($$$1(event.target).is(_this._element)) {
                            _this._ignoreBackdropClick = true;
                        }
                    });
                });
                this._showBackdrop(function() {
                    return _this._showElement(relatedTarget);
                });
            };
            _proto.hide = function hide(event) {
                var _this2 = this;
                if (event) {
                    event.preventDefault();
                }
                if (this._isTransitioning || !this._isShown) {
                    return;
                }
                var hideEvent = $$$1.Event(Event.HIDE);
                $$$1(this._element).trigger(hideEvent);
                if (!this._isShown || hideEvent.isDefaultPrevented()) {
                    return;
                }
                this._isShown = false;
                var transition = $$$1(this._element).hasClass(ClassName.FADE);
                if (transition) {
                    this._isTransitioning = true;
                }
                this._setEscapeEvent();
                this._setResizeEvent();
                $$$1(document).off(Event.FOCUSIN);
                $$$1(this._element).removeClass(ClassName.SHOW);
                $$$1(this._element).off(Event.CLICK_DISMISS);
                $$$1(this._dialog).off(Event.MOUSEDOWN_DISMISS);
                if (transition) {
                    var transitionDuration = Util.getTransitionDurationFromElement(this._element);
                    $$$1(this._element).one(Util.TRANSITION_END, function(event) {
                        return _this2._hideModal(event);
                    }).emulateTransitionEnd(transitionDuration);
                } else {
                    this._hideModal();
                }
            };
            _proto.dispose = function dispose() {
                $$$1.removeData(this._element, DATA_KEY);
                $$$1(window, document, this._element, this._backdrop).off(EVENT_KEY);
                this._config = null;
                this._element = null;
                this._dialog = null;
                this._backdrop = null;
                this._isShown = null;
                this._isBodyOverflowing = null;
                this._ignoreBackdropClick = null;
                this._scrollbarWidth = null;
            };
            _proto.handleUpdate = function handleUpdate() {
                this._adjustDialog();
            };
            _proto._getConfig = function _getConfig(config) {
                config = _objectSpread({}, Default, config);
                Util.typeCheckConfig(NAME, config, DefaultType);
                return config;
            };
            _proto._showElement = function _showElement(relatedTarget) {
                var _this3 = this;
                var transition = $$$1(this._element).hasClass(ClassName.FADE);
                if (!this._element.parentNode || this._element.parentNode.nodeType !== Node.ELEMENT_NODE) {
                    document.body.appendChild(this._element);
                }
                this._element.style.display = "block";
                this._element.removeAttribute("aria-hidden");
                this._element.scrollTop = 0;
                if (transition) {
                    Util.reflow(this._element);
                }
                $$$1(this._element).addClass(ClassName.SHOW);
                if (this._config.focus) {
                    this._enforceFocus();
                }
                var shownEvent = $$$1.Event(Event.SHOWN, {
                    relatedTarget: relatedTarget
                });
                var transitionComplete = function transitionComplete() {
                    if (_this3._config.focus) {
                        _this3._element.focus();
                    }
                    _this3._isTransitioning = false;
                    $$$1(_this3._element).trigger(shownEvent);
                };
                if (transition) {
                    var transitionDuration = Util.getTransitionDurationFromElement(this._element);
                    $$$1(this._dialog).one(Util.TRANSITION_END, transitionComplete).emulateTransitionEnd(transitionDuration);
                } else {
                    transitionComplete();
                }
            };
            _proto._enforceFocus = function _enforceFocus() {
                var _this4 = this;
                $$$1(document).off(Event.FOCUSIN).on(Event.FOCUSIN, function(event) {
                    if (document !== event.target && _this4._element !== event.target && $$$1(_this4._element).has(event.target).length === 0) {
                        _this4._element.focus();
                    }
                });
            };
            _proto._setEscapeEvent = function _setEscapeEvent() {
                var _this5 = this;
                if (this._isShown && this._config.keyboard) {
                    $$$1(this._element).on(Event.KEYDOWN_DISMISS, function(event) {
                        if (event.which === ESCAPE_KEYCODE) {
                            event.preventDefault();
                            _this5.hide();
                        }
                    });
                } else if (!this._isShown) {
                    $$$1(this._element).off(Event.KEYDOWN_DISMISS);
                }
            };
            _proto._setResizeEvent = function _setResizeEvent() {
                var _this6 = this;
                if (this._isShown) {
                    $$$1(window).on(Event.RESIZE, function(event) {
                        return _this6.handleUpdate(event);
                    });
                } else {
                    $$$1(window).off(Event.RESIZE);
                }
            };
            _proto._hideModal = function _hideModal() {
                var _this7 = this;
                this._element.style.display = "none";
                this._element.setAttribute("aria-hidden", true);
                this._isTransitioning = false;
                this._showBackdrop(function() {
                    $$$1(document.body).removeClass(ClassName.OPEN);
                    _this7._resetAdjustments();
                    _this7._resetScrollbar();
                    $$$1(_this7._element).trigger(Event.HIDDEN);
                });
            };
            _proto._removeBackdrop = function _removeBackdrop() {
                if (this._backdrop) {
                    $$$1(this._backdrop).remove();
                    this._backdrop = null;
                }
            };
            _proto._showBackdrop = function _showBackdrop(callback) {
                var _this8 = this;
                var animate = $$$1(this._element).hasClass(ClassName.FADE) ? ClassName.FADE : "";
                if (this._isShown && this._config.backdrop) {
                    this._backdrop = document.createElement("div");
                    this._backdrop.className = ClassName.BACKDROP;
                    if (animate) {
                        $$$1(this._backdrop).addClass(animate);
                    }
                    $$$1(this._backdrop).appendTo(document.body);
                    $$$1(this._element).on(Event.CLICK_DISMISS, function(event) {
                        if (_this8._ignoreBackdropClick) {
                            _this8._ignoreBackdropClick = false;
                            return;
                        }
                        if (event.target !== event.currentTarget) {
                            return;
                        }
                        if (_this8._config.backdrop === "static") {
                            _this8._element.focus();
                        } else {
                            _this8.hide();
                        }
                    });
                    if (animate) {
                        Util.reflow(this._backdrop);
                    }
                    $$$1(this._backdrop).addClass(ClassName.SHOW);
                    if (!callback) {
                        return;
                    }
                    if (!animate) {
                        callback();
                        return;
                    }
                    var backdropTransitionDuration = Util.getTransitionDurationFromElement(this._backdrop);
                    $$$1(this._backdrop).one(Util.TRANSITION_END, callback).emulateTransitionEnd(backdropTransitionDuration);
                } else if (!this._isShown && this._backdrop) {
                    $$$1(this._backdrop).removeClass(ClassName.SHOW);
                    var callbackRemove = function callbackRemove() {
                        _this8._removeBackdrop();
                        if (callback) {
                            callback();
                        }
                    };
                    if ($$$1(this._element).hasClass(ClassName.FADE)) {
                        var _backdropTransitionDuration = Util.getTransitionDurationFromElement(this._backdrop);
                        $$$1(this._backdrop).one(Util.TRANSITION_END, callbackRemove).emulateTransitionEnd(_backdropTransitionDuration);
                    } else {
                        callbackRemove();
                    }
                } else if (callback) {
                    callback();
                }
            };
            _proto._adjustDialog = function _adjustDialog() {
                var isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;
                if (!this._isBodyOverflowing && isModalOverflowing) {
                    this._element.style.paddingLeft = this._scrollbarWidth + "px";
                }
                if (this._isBodyOverflowing && !isModalOverflowing) {
                    this._element.style.paddingRight = this._scrollbarWidth + "px";
                }
            };
            _proto._resetAdjustments = function _resetAdjustments() {
                this._element.style.paddingLeft = "";
                this._element.style.paddingRight = "";
            };
            _proto._checkScrollbar = function _checkScrollbar() {
                var rect = document.body.getBoundingClientRect();
                this._isBodyOverflowing = rect.left + rect.right < window.innerWidth;
                this._scrollbarWidth = this._getScrollbarWidth();
            };
            _proto._setScrollbar = function _setScrollbar() {
                var _this9 = this;
                if (this._isBodyOverflowing) {
                    $$$1(Selector.FIXED_CONTENT).each(function(index, element) {
                        var actualPadding = $$$1(element)[0].style.paddingRight;
                        var calculatedPadding = $$$1(element).css("padding-right");
                        $$$1(element).data("padding-right", actualPadding).css("padding-right", parseFloat(calculatedPadding) + _this9._scrollbarWidth + "px");
                    });
                    $$$1(Selector.STICKY_CONTENT).each(function(index, element) {
                        var actualMargin = $$$1(element)[0].style.marginRight;
                        var calculatedMargin = $$$1(element).css("margin-right");
                        $$$1(element).data("margin-right", actualMargin).css("margin-right", parseFloat(calculatedMargin) - _this9._scrollbarWidth + "px");
                    });
                    $$$1(Selector.NAVBAR_TOGGLER).each(function(index, element) {
                        var actualMargin = $$$1(element)[0].style.marginRight;
                        var calculatedMargin = $$$1(element).css("margin-right");
                        $$$1(element).data("margin-right", actualMargin).css("margin-right", parseFloat(calculatedMargin) + _this9._scrollbarWidth + "px");
                    });
                    var actualPadding = document.body.style.paddingRight;
                    var calculatedPadding = $$$1(document.body).css("padding-right");
                    $$$1(document.body).data("padding-right", actualPadding).css("padding-right", parseFloat(calculatedPadding) + this._scrollbarWidth + "px");
                }
            };
            _proto._resetScrollbar = function _resetScrollbar() {
                $$$1(Selector.FIXED_CONTENT).each(function(index, element) {
                    var padding = $$$1(element).data("padding-right");
                    if (typeof padding !== "undefined") {
                        $$$1(element).css("padding-right", padding).removeData("padding-right");
                    }
                });
                $$$1(Selector.STICKY_CONTENT + ", " + Selector.NAVBAR_TOGGLER).each(function(index, element) {
                    var margin = $$$1(element).data("margin-right");
                    if (typeof margin !== "undefined") {
                        $$$1(element).css("margin-right", margin).removeData("margin-right");
                    }
                });
                var padding = $$$1(document.body).data("padding-right");
                if (typeof padding !== "undefined") {
                    $$$1(document.body).css("padding-right", padding).removeData("padding-right");
                }
            };
            _proto._getScrollbarWidth = function _getScrollbarWidth() {
                var scrollDiv = document.createElement("div");
                scrollDiv.className = ClassName.SCROLLBAR_MEASURER;
                document.body.appendChild(scrollDiv);
                var scrollbarWidth = scrollDiv.getBoundingClientRect().width - scrollDiv.clientWidth;
                document.body.removeChild(scrollDiv);
                return scrollbarWidth;
            };
            Modal._jQueryInterface = function _jQueryInterface(config, relatedTarget) {
                return this.each(function() {
                    var data = $$$1(this).data(DATA_KEY);
                    var _config = _objectSpread({}, Default, $$$1(this).data(), typeof config === "object" && config ? config : {});
                    if (!data) {
                        data = new Modal(this, _config);
                        $$$1(this).data(DATA_KEY, data);
                    }
                    if (typeof config === "string") {
                        if (typeof data[config] === "undefined") {
                            throw new TypeError('No method named "' + config + '"');
                        }
                        data[config](relatedTarget);
                    } else if (_config.show) {
                        data.show(relatedTarget);
                    }
                });
            };
            _createClass(Modal, null, [ {
                key: "VERSION",
                get: function get() {
                    return VERSION;
                }
            }, {
                key: "Default",
                get: function get() {
                    return Default;
                }
            } ]);
            return Modal;
        }();
        $$$1(document).on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE, function(event) {
            var _this10 = this;
            var target;
            var selector = Util.getSelectorFromElement(this);
            if (selector) {
                target = $$$1(selector)[0];
            }
            var config = $$$1(target).data(DATA_KEY) ? "toggle" : _objectSpread({}, $$$1(target).data(), $$$1(this).data());
            if (this.tagName === "A" || this.tagName === "AREA") {
                event.preventDefault();
            }
            var $target = $$$1(target).one(Event.SHOW, function(showEvent) {
                if (showEvent.isDefaultPrevented()) {
                    return;
                }
                $target.one(Event.HIDDEN, function() {
                    if ($$$1(_this10).is(":visible")) {
                        _this10.focus();
                    }
                });
            });
            Modal._jQueryInterface.call($$$1(target), config, this);
        });
        $$$1.fn[NAME] = Modal._jQueryInterface;
        $$$1.fn[NAME].Constructor = Modal;
        $$$1.fn[NAME].noConflict = function() {
            $$$1.fn[NAME] = JQUERY_NO_CONFLICT;
            return Modal._jQueryInterface;
        };
        return Modal;
    }($);
    var Tooltip = function($$$1) {
        var NAME = "tooltip";
        var VERSION = "4.1.1";
        var DATA_KEY = "bs.tooltip";
        var EVENT_KEY = "." + DATA_KEY;
        var JQUERY_NO_CONFLICT = $$$1.fn[NAME];
        var CLASS_PREFIX = "bs-tooltip";
        var BSCLS_PREFIX_REGEX = new RegExp("(^|\\s)" + CLASS_PREFIX + "\\S+", "g");
        var DefaultType = {
            animation: "boolean",
            template: "string",
            title: "(string|element|function)",
            trigger: "string",
            delay: "(number|object)",
            html: "boolean",
            selector: "(string|boolean)",
            placement: "(string|function)",
            offset: "(number|string)",
            container: "(string|element|boolean)",
            fallbackPlacement: "(string|array)",
            boundary: "(string|element)"
        };
        var AttachmentMap = {
            AUTO: "auto",
            TOP: "top",
            RIGHT: "right",
            BOTTOM: "bottom",
            LEFT: "left"
        };
        var Default = {
            animation: true,
            template: '<div class="tooltip" role="tooltip">' + '<div class="arrow"></div>' + '<div class="tooltip-inner"></div></div>',
            trigger: "hover focus",
            title: "",
            delay: 0,
            html: false,
            selector: false,
            placement: "top",
            offset: 0,
            container: false,
            fallbackPlacement: "flip",
            boundary: "scrollParent"
        };
        var HoverState = {
            SHOW: "show",
            OUT: "out"
        };
        var Event = {
            HIDE: "hide" + EVENT_KEY,
            HIDDEN: "hidden" + EVENT_KEY,
            SHOW: "show" + EVENT_KEY,
            SHOWN: "shown" + EVENT_KEY,
            INSERTED: "inserted" + EVENT_KEY,
            CLICK: "click" + EVENT_KEY,
            FOCUSIN: "focusin" + EVENT_KEY,
            FOCUSOUT: "focusout" + EVENT_KEY,
            MOUSEENTER: "mouseenter" + EVENT_KEY,
            MOUSELEAVE: "mouseleave" + EVENT_KEY
        };
        var ClassName = {
            FADE: "fade",
            SHOW: "show"
        };
        var Selector = {
            TOOLTIP: ".tooltip",
            TOOLTIP_INNER: ".tooltip-inner",
            ARROW: ".arrow"
        };
        var Trigger = {
            HOVER: "hover",
            FOCUS: "focus",
            CLICK: "click",
            MANUAL: "manual"
        };
        var Tooltip = function() {
            function Tooltip(element, config) {
                if (typeof Popper === "undefined") {
                    throw new TypeError("Bootstrap tooltips require Popper.js (https://popper.js.org)");
                }
                this._isEnabled = true;
                this._timeout = 0;
                this._hoverState = "";
                this._activeTrigger = {};
                this._popper = null;
                this.element = element;
                this.config = this._getConfig(config);
                this.tip = null;
                this._setListeners();
            }
            var _proto = Tooltip.prototype;
            _proto.enable = function enable() {
                this._isEnabled = true;
            };
            _proto.disable = function disable() {
                this._isEnabled = false;
            };
            _proto.toggleEnabled = function toggleEnabled() {
                this._isEnabled = !this._isEnabled;
            };
            _proto.toggle = function toggle(event) {
                if (!this._isEnabled) {
                    return;
                }
                if (event) {
                    var dataKey = this.constructor.DATA_KEY;
                    var context = $$$1(event.currentTarget).data(dataKey);
                    if (!context) {
                        context = new this.constructor(event.currentTarget, this._getDelegateConfig());
                        $$$1(event.currentTarget).data(dataKey, context);
                    }
                    context._activeTrigger.click = !context._activeTrigger.click;
                    if (context._isWithActiveTrigger()) {
                        context._enter(null, context);
                    } else {
                        context._leave(null, context);
                    }
                } else {
                    if ($$$1(this.getTipElement()).hasClass(ClassName.SHOW)) {
                        this._leave(null, this);
                        return;
                    }
                    this._enter(null, this);
                }
            };
            _proto.dispose = function dispose() {
                clearTimeout(this._timeout);
                $$$1.removeData(this.element, this.constructor.DATA_KEY);
                $$$1(this.element).off(this.constructor.EVENT_KEY);
                $$$1(this.element).closest(".modal").off("hide.bs.modal");
                if (this.tip) {
                    $$$1(this.tip).remove();
                }
                this._isEnabled = null;
                this._timeout = null;
                this._hoverState = null;
                this._activeTrigger = null;
                if (this._popper !== null) {
                    this._popper.destroy();
                }
                this._popper = null;
                this.element = null;
                this.config = null;
                this.tip = null;
            };
            _proto.show = function show() {
                var _this = this;
                if ($$$1(this.element).css("display") === "none") {
                    throw new Error("Please use show on visible elements");
                }
                var showEvent = $$$1.Event(this.constructor.Event.SHOW);
                if (this.isWithContent() && this._isEnabled) {
                    $$$1(this.element).trigger(showEvent);
                    var isInTheDom = $$$1.contains(this.element.ownerDocument.documentElement, this.element);
                    if (showEvent.isDefaultPrevented() || !isInTheDom) {
                        return;
                    }
                    var tip = this.getTipElement();
                    var tipId = Util.getUID(this.constructor.NAME);
                    tip.setAttribute("id", tipId);
                    this.element.setAttribute("aria-describedby", tipId);
                    this.setContent();
                    if (this.config.animation) {
                        $$$1(tip).addClass(ClassName.FADE);
                    }
                    var placement = typeof this.config.placement === "function" ? this.config.placement.call(this, tip, this.element) : this.config.placement;
                    var attachment = this._getAttachment(placement);
                    this.addAttachmentClass(attachment);
                    var container = this.config.container === false ? document.body : $$$1(this.config.container);
                    $$$1(tip).data(this.constructor.DATA_KEY, this);
                    if (!$$$1.contains(this.element.ownerDocument.documentElement, this.tip)) {
                        $$$1(tip).appendTo(container);
                    }
                    $$$1(this.element).trigger(this.constructor.Event.INSERTED);
                    this._popper = new Popper(this.element, tip, {
                        placement: attachment,
                        modifiers: {
                            offset: {
                                offset: this.config.offset
                            },
                            flip: {
                                behavior: this.config.fallbackPlacement
                            },
                            arrow: {
                                element: Selector.ARROW
                            },
                            preventOverflow: {
                                boundariesElement: this.config.boundary
                            }
                        },
                        onCreate: function onCreate(data) {
                            if (data.originalPlacement !== data.placement) {
                                _this._handlePopperPlacementChange(data);
                            }
                        },
                        onUpdate: function onUpdate(data) {
                            _this._handlePopperPlacementChange(data);
                        }
                    });
                    $$$1(tip).addClass(ClassName.SHOW);
                    if ("ontouchstart" in document.documentElement) {
                        $$$1(document.body).children().on("mouseover", null, $$$1.noop);
                    }
                    var complete = function complete() {
                        if (_this.config.animation) {
                            _this._fixTransition();
                        }
                        var prevHoverState = _this._hoverState;
                        _this._hoverState = null;
                        $$$1(_this.element).trigger(_this.constructor.Event.SHOWN);
                        if (prevHoverState === HoverState.OUT) {
                            _this._leave(null, _this);
                        }
                    };
                    if ($$$1(this.tip).hasClass(ClassName.FADE)) {
                        var transitionDuration = Util.getTransitionDurationFromElement(this.tip);
                        $$$1(this.tip).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);
                    } else {
                        complete();
                    }
                }
            };
            _proto.hide = function hide(callback) {
                var _this2 = this;
                var tip = this.getTipElement();
                var hideEvent = $$$1.Event(this.constructor.Event.HIDE);
                var complete = function complete() {
                    if (_this2._hoverState !== HoverState.SHOW && tip.parentNode) {
                        tip.parentNode.removeChild(tip);
                    }
                    _this2._cleanTipClass();
                    _this2.element.removeAttribute("aria-describedby");
                    $$$1(_this2.element).trigger(_this2.constructor.Event.HIDDEN);
                    if (_this2._popper !== null) {
                        _this2._popper.destroy();
                    }
                    if (callback) {
                        callback();
                    }
                };
                $$$1(this.element).trigger(hideEvent);
                if (hideEvent.isDefaultPrevented()) {
                    return;
                }
                $$$1(tip).removeClass(ClassName.SHOW);
                if ("ontouchstart" in document.documentElement) {
                    $$$1(document.body).children().off("mouseover", null, $$$1.noop);
                }
                this._activeTrigger[Trigger.CLICK] = false;
                this._activeTrigger[Trigger.FOCUS] = false;
                this._activeTrigger[Trigger.HOVER] = false;
                if ($$$1(this.tip).hasClass(ClassName.FADE)) {
                    var transitionDuration = Util.getTransitionDurationFromElement(tip);
                    $$$1(tip).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);
                } else {
                    complete();
                }
                this._hoverState = "";
            };
            _proto.update = function update() {
                if (this._popper !== null) {
                    this._popper.scheduleUpdate();
                }
            };
            _proto.isWithContent = function isWithContent() {
                return Boolean(this.getTitle());
            };
            _proto.addAttachmentClass = function addAttachmentClass(attachment) {
                $$$1(this.getTipElement()).addClass(CLASS_PREFIX + "-" + attachment);
            };
            _proto.getTipElement = function getTipElement() {
                this.tip = this.tip || $$$1(this.config.template)[0];
                return this.tip;
            };
            _proto.setContent = function setContent() {
                var $tip = $$$1(this.getTipElement());
                this.setElementContent($tip.find(Selector.TOOLTIP_INNER), this.getTitle());
                $tip.removeClass(ClassName.FADE + " " + ClassName.SHOW);
            };
            _proto.setElementContent = function setElementContent($element, content) {
                var html = this.config.html;
                if (typeof content === "object" && (content.nodeType || content.jquery)) {
                    if (html) {
                        if (!$$$1(content).parent().is($element)) {
                            $element.empty().append(content);
                        }
                    } else {
                        $element.text($$$1(content).text());
                    }
                } else {
                    $element[html ? "html" : "text"](content);
                }
            };
            _proto.getTitle = function getTitle() {
                var title = this.element.getAttribute("data-original-title");
                if (!title) {
                    title = typeof this.config.title === "function" ? this.config.title.call(this.element) : this.config.title;
                }
                return title;
            };
            _proto._getAttachment = function _getAttachment(placement) {
                return AttachmentMap[placement.toUpperCase()];
            };
            _proto._setListeners = function _setListeners() {
                var _this3 = this;
                var triggers = this.config.trigger.split(" ");
                triggers.forEach(function(trigger) {
                    if (trigger === "click") {
                        $$$1(_this3.element).on(_this3.constructor.Event.CLICK, _this3.config.selector, function(event) {
                            return _this3.toggle(event);
                        });
                    } else if (trigger !== Trigger.MANUAL) {
                        var eventIn = trigger === Trigger.HOVER ? _this3.constructor.Event.MOUSEENTER : _this3.constructor.Event.FOCUSIN;
                        var eventOut = trigger === Trigger.HOVER ? _this3.constructor.Event.MOUSELEAVE : _this3.constructor.Event.FOCUSOUT;
                        $$$1(_this3.element).on(eventIn, _this3.config.selector, function(event) {
                            return _this3._enter(event);
                        }).on(eventOut, _this3.config.selector, function(event) {
                            return _this3._leave(event);
                        });
                    }
                    $$$1(_this3.element).closest(".modal").on("hide.bs.modal", function() {
                        return _this3.hide();
                    });
                });
                if (this.config.selector) {
                    this.config = _objectSpread({}, this.config, {
                        trigger: "manual",
                        selector: ""
                    });
                } else {
                    this._fixTitle();
                }
            };
            _proto._fixTitle = function _fixTitle() {
                var titleType = typeof this.element.getAttribute("data-original-title");
                if (this.element.getAttribute("title") || titleType !== "string") {
                    this.element.setAttribute("data-original-title", this.element.getAttribute("title") || "");
                    this.element.setAttribute("title", "");
                }
            };
            _proto._enter = function _enter(event, context) {
                var dataKey = this.constructor.DATA_KEY;
                context = context || $$$1(event.currentTarget).data(dataKey);
                if (!context) {
                    context = new this.constructor(event.currentTarget, this._getDelegateConfig());
                    $$$1(event.currentTarget).data(dataKey, context);
                }
                if (event) {
                    context._activeTrigger[event.type === "focusin" ? Trigger.FOCUS : Trigger.HOVER] = true;
                }
                if ($$$1(context.getTipElement()).hasClass(ClassName.SHOW) || context._hoverState === HoverState.SHOW) {
                    context._hoverState = HoverState.SHOW;
                    return;
                }
                clearTimeout(context._timeout);
                context._hoverState = HoverState.SHOW;
                if (!context.config.delay || !context.config.delay.show) {
                    context.show();
                    return;
                }
                context._timeout = setTimeout(function() {
                    if (context._hoverState === HoverState.SHOW) {
                        context.show();
                    }
                }, context.config.delay.show);
            };
            _proto._leave = function _leave(event, context) {
                var dataKey = this.constructor.DATA_KEY;
                context = context || $$$1(event.currentTarget).data(dataKey);
                if (!context) {
                    context = new this.constructor(event.currentTarget, this._getDelegateConfig());
                    $$$1(event.currentTarget).data(dataKey, context);
                }
                if (event) {
                    context._activeTrigger[event.type === "focusout" ? Trigger.FOCUS : Trigger.HOVER] = false;
                }
                if (context._isWithActiveTrigger()) {
                    return;
                }
                clearTimeout(context._timeout);
                context._hoverState = HoverState.OUT;
                if (!context.config.delay || !context.config.delay.hide) {
                    context.hide();
                    return;
                }
                context._timeout = setTimeout(function() {
                    if (context._hoverState === HoverState.OUT) {
                        context.hide();
                    }
                }, context.config.delay.hide);
            };
            _proto._isWithActiveTrigger = function _isWithActiveTrigger() {
                for (var trigger in this._activeTrigger) {
                    if (this._activeTrigger[trigger]) {
                        return true;
                    }
                }
                return false;
            };
            _proto._getConfig = function _getConfig(config) {
                config = _objectSpread({}, this.constructor.Default, $$$1(this.element).data(), typeof config === "object" && config ? config : {});
                if (typeof config.delay === "number") {
                    config.delay = {
                        show: config.delay,
                        hide: config.delay
                    };
                }
                if (typeof config.title === "number") {
                    config.title = config.title.toString();
                }
                if (typeof config.content === "number") {
                    config.content = config.content.toString();
                }
                Util.typeCheckConfig(NAME, config, this.constructor.DefaultType);
                return config;
            };
            _proto._getDelegateConfig = function _getDelegateConfig() {
                var config = {};
                if (this.config) {
                    for (var key in this.config) {
                        if (this.constructor.Default[key] !== this.config[key]) {
                            config[key] = this.config[key];
                        }
                    }
                }
                return config;
            };
            _proto._cleanTipClass = function _cleanTipClass() {
                var $tip = $$$1(this.getTipElement());
                var tabClass = $tip.attr("class").match(BSCLS_PREFIX_REGEX);
                if (tabClass !== null && tabClass.length > 0) {
                    $tip.removeClass(tabClass.join(""));
                }
            };
            _proto._handlePopperPlacementChange = function _handlePopperPlacementChange(data) {
                this._cleanTipClass();
                this.addAttachmentClass(this._getAttachment(data.placement));
            };
            _proto._fixTransition = function _fixTransition() {
                var tip = this.getTipElement();
                var initConfigAnimation = this.config.animation;
                if (tip.getAttribute("x-placement") !== null) {
                    return;
                }
                $$$1(tip).removeClass(ClassName.FADE);
                this.config.animation = false;
                this.hide();
                this.show();
                this.config.animation = initConfigAnimation;
            };
            Tooltip._jQueryInterface = function _jQueryInterface(config) {
                return this.each(function() {
                    var data = $$$1(this).data(DATA_KEY);
                    var _config = typeof config === "object" && config;
                    if (!data && /dispose|hide/.test(config)) {
                        return;
                    }
                    if (!data) {
                        data = new Tooltip(this, _config);
                        $$$1(this).data(DATA_KEY, data);
                    }
                    if (typeof config === "string") {
                        if (typeof data[config] === "undefined") {
                            throw new TypeError('No method named "' + config + '"');
                        }
                        data[config]();
                    }
                });
            };
            _createClass(Tooltip, null, [ {
                key: "VERSION",
                get: function get() {
                    return VERSION;
                }
            }, {
                key: "Default",
                get: function get() {
                    return Default;
                }
            }, {
                key: "NAME",
                get: function get() {
                    return NAME;
                }
            }, {
                key: "DATA_KEY",
                get: function get() {
                    return DATA_KEY;
                }
            }, {
                key: "Event",
                get: function get() {
                    return Event;
                }
            }, {
                key: "EVENT_KEY",
                get: function get() {
                    return EVENT_KEY;
                }
            }, {
                key: "DefaultType",
                get: function get() {
                    return DefaultType;
                }
            } ]);
            return Tooltip;
        }();
        $$$1.fn[NAME] = Tooltip._jQueryInterface;
        $$$1.fn[NAME].Constructor = Tooltip;
        $$$1.fn[NAME].noConflict = function() {
            $$$1.fn[NAME] = JQUERY_NO_CONFLICT;
            return Tooltip._jQueryInterface;
        };
        return Tooltip;
    }($, Popper);
    var Popover = function($$$1) {
        var NAME = "popover";
        var VERSION = "4.1.1";
        var DATA_KEY = "bs.popover";
        var EVENT_KEY = "." + DATA_KEY;
        var JQUERY_NO_CONFLICT = $$$1.fn[NAME];
        var CLASS_PREFIX = "bs-popover";
        var BSCLS_PREFIX_REGEX = new RegExp("(^|\\s)" + CLASS_PREFIX + "\\S+", "g");
        var Default = _objectSpread({}, Tooltip.Default, {
            placement: "right",
            trigger: "click",
            content: "",
            template: '<div class="popover" role="tooltip">' + '<div class="arrow"></div>' + '<h3 class="popover-header"></h3>' + '<div class="popover-body"></div></div>'
        });
        var DefaultType = _objectSpread({}, Tooltip.DefaultType, {
            content: "(string|element|function)"
        });
        var ClassName = {
            FADE: "fade",
            SHOW: "show"
        };
        var Selector = {
            TITLE: ".popover-header",
            CONTENT: ".popover-body"
        };
        var Event = {
            HIDE: "hide" + EVENT_KEY,
            HIDDEN: "hidden" + EVENT_KEY,
            SHOW: "show" + EVENT_KEY,
            SHOWN: "shown" + EVENT_KEY,
            INSERTED: "inserted" + EVENT_KEY,
            CLICK: "click" + EVENT_KEY,
            FOCUSIN: "focusin" + EVENT_KEY,
            FOCUSOUT: "focusout" + EVENT_KEY,
            MOUSEENTER: "mouseenter" + EVENT_KEY,
            MOUSELEAVE: "mouseleave" + EVENT_KEY
        };
        var Popover = function(_Tooltip) {
            _inheritsLoose(Popover, _Tooltip);
            function Popover() {
                return _Tooltip.apply(this, arguments) || this;
            }
            var _proto = Popover.prototype;
            _proto.isWithContent = function isWithContent() {
                return this.getTitle() || this._getContent();
            };
            _proto.addAttachmentClass = function addAttachmentClass(attachment) {
                $$$1(this.getTipElement()).addClass(CLASS_PREFIX + "-" + attachment);
            };
            _proto.getTipElement = function getTipElement() {
                this.tip = this.tip || $$$1(this.config.template)[0];
                return this.tip;
            };
            _proto.setContent = function setContent() {
                var $tip = $$$1(this.getTipElement());
                this.setElementContent($tip.find(Selector.TITLE), this.getTitle());
                var content = this._getContent();
                if (typeof content === "function") {
                    content = content.call(this.element);
                }
                this.setElementContent($tip.find(Selector.CONTENT), content);
                $tip.removeClass(ClassName.FADE + " " + ClassName.SHOW);
            };
            _proto._getContent = function _getContent() {
                return this.element.getAttribute("data-content") || this.config.content;
            };
            _proto._cleanTipClass = function _cleanTipClass() {
                var $tip = $$$1(this.getTipElement());
                var tabClass = $tip.attr("class").match(BSCLS_PREFIX_REGEX);
                if (tabClass !== null && tabClass.length > 0) {
                    $tip.removeClass(tabClass.join(""));
                }
            };
            Popover._jQueryInterface = function _jQueryInterface(config) {
                return this.each(function() {
                    var data = $$$1(this).data(DATA_KEY);
                    var _config = typeof config === "object" ? config : null;
                    if (!data && /destroy|hide/.test(config)) {
                        return;
                    }
                    if (!data) {
                        data = new Popover(this, _config);
                        $$$1(this).data(DATA_KEY, data);
                    }
                    if (typeof config === "string") {
                        if (typeof data[config] === "undefined") {
                            throw new TypeError('No method named "' + config + '"');
                        }
                        data[config]();
                    }
                });
            };
            _createClass(Popover, null, [ {
                key: "VERSION",
                get: function get() {
                    return VERSION;
                }
            }, {
                key: "Default",
                get: function get() {
                    return Default;
                }
            }, {
                key: "NAME",
                get: function get() {
                    return NAME;
                }
            }, {
                key: "DATA_KEY",
                get: function get() {
                    return DATA_KEY;
                }
            }, {
                key: "Event",
                get: function get() {
                    return Event;
                }
            }, {
                key: "EVENT_KEY",
                get: function get() {
                    return EVENT_KEY;
                }
            }, {
                key: "DefaultType",
                get: function get() {
                    return DefaultType;
                }
            } ]);
            return Popover;
        }(Tooltip);
        $$$1.fn[NAME] = Popover._jQueryInterface;
        $$$1.fn[NAME].Constructor = Popover;
        $$$1.fn[NAME].noConflict = function() {
            $$$1.fn[NAME] = JQUERY_NO_CONFLICT;
            return Popover._jQueryInterface;
        };
        return Popover;
    }($);
    var ScrollSpy = function($$$1) {
        var NAME = "scrollspy";
        var VERSION = "4.1.1";
        var DATA_KEY = "bs.scrollspy";
        var EVENT_KEY = "." + DATA_KEY;
        var DATA_API_KEY = ".data-api";
        var JQUERY_NO_CONFLICT = $$$1.fn[NAME];
        var Default = {
            offset: 10,
            method: "auto",
            target: ""
        };
        var DefaultType = {
            offset: "number",
            method: "string",
            target: "(string|element)"
        };
        var Event = {
            ACTIVATE: "activate" + EVENT_KEY,
            SCROLL: "scroll" + EVENT_KEY,
            LOAD_DATA_API: "load" + EVENT_KEY + DATA_API_KEY
        };
        var ClassName = {
            DROPDOWN_ITEM: "dropdown-item",
            DROPDOWN_MENU: "dropdown-menu",
            ACTIVE: "active"
        };
        var Selector = {
            DATA_SPY: '[data-spy="scroll"]',
            ACTIVE: ".active",
            NAV_LIST_GROUP: ".nav, .list-group",
            NAV_LINKS: ".nav-link",
            NAV_ITEMS: ".nav-item",
            LIST_ITEMS: ".list-group-item",
            DROPDOWN: ".dropdown",
            DROPDOWN_ITEMS: ".dropdown-item",
            DROPDOWN_TOGGLE: ".dropdown-toggle"
        };
        var OffsetMethod = {
            OFFSET: "offset",
            POSITION: "position"
        };
        var ScrollSpy = function() {
            function ScrollSpy(element, config) {
                var _this = this;
                this._element = element;
                this._scrollElement = element.tagName === "BODY" ? window : element;
                this._config = this._getConfig(config);
                this._selector = this._config.target + " " + Selector.NAV_LINKS + "," + (this._config.target + " " + Selector.LIST_ITEMS + ",") + (this._config.target + " " + Selector.DROPDOWN_ITEMS);
                this._offsets = [];
                this._targets = [];
                this._activeTarget = null;
                this._scrollHeight = 0;
                $$$1(this._scrollElement).on(Event.SCROLL, function(event) {
                    return _this._process(event);
                });
                this.refresh();
                this._process();
            }
            var _proto = ScrollSpy.prototype;
            _proto.refresh = function refresh() {
                var _this2 = this;
                var autoMethod = this._scrollElement === this._scrollElement.window ? OffsetMethod.OFFSET : OffsetMethod.POSITION;
                var offsetMethod = this._config.method === "auto" ? autoMethod : this._config.method;
                var offsetBase = offsetMethod === OffsetMethod.POSITION ? this._getScrollTop() : 0;
                this._offsets = [];
                this._targets = [];
                this._scrollHeight = this._getScrollHeight();
                var targets = $$$1.makeArray($$$1(this._selector));
                targets.map(function(element) {
                    var target;
                    var targetSelector = Util.getSelectorFromElement(element);
                    if (targetSelector) {
                        target = $$$1(targetSelector)[0];
                    }
                    if (target) {
                        var targetBCR = target.getBoundingClientRect();
                        if (targetBCR.width || targetBCR.height) {
                            return [ $$$1(target)[offsetMethod]().top + offsetBase, targetSelector ];
                        }
                    }
                    return null;
                }).filter(function(item) {
                    return item;
                }).sort(function(a, b) {
                    return a[0] - b[0];
                }).forEach(function(item) {
                    _this2._offsets.push(item[0]);
                    _this2._targets.push(item[1]);
                });
            };
            _proto.dispose = function dispose() {
                $$$1.removeData(this._element, DATA_KEY);
                $$$1(this._scrollElement).off(EVENT_KEY);
                this._element = null;
                this._scrollElement = null;
                this._config = null;
                this._selector = null;
                this._offsets = null;
                this._targets = null;
                this._activeTarget = null;
                this._scrollHeight = null;
            };
            _proto._getConfig = function _getConfig(config) {
                config = _objectSpread({}, Default, typeof config === "object" && config ? config : {});
                if (typeof config.target !== "string") {
                    var id = $$$1(config.target).attr("id");
                    if (!id) {
                        id = Util.getUID(NAME);
                        $$$1(config.target).attr("id", id);
                    }
                    config.target = "#" + id;
                }
                Util.typeCheckConfig(NAME, config, DefaultType);
                return config;
            };
            _proto._getScrollTop = function _getScrollTop() {
                return this._scrollElement === window ? this._scrollElement.pageYOffset : this._scrollElement.scrollTop;
            };
            _proto._getScrollHeight = function _getScrollHeight() {
                return this._scrollElement.scrollHeight || Math.max(document.body.scrollHeight, document.documentElement.scrollHeight);
            };
            _proto._getOffsetHeight = function _getOffsetHeight() {
                return this._scrollElement === window ? window.innerHeight : this._scrollElement.getBoundingClientRect().height;
            };
            _proto._process = function _process() {
                var scrollTop = this._getScrollTop() + this._config.offset;
                var scrollHeight = this._getScrollHeight();
                var maxScroll = this._config.offset + scrollHeight - this._getOffsetHeight();
                if (this._scrollHeight !== scrollHeight) {
                    this.refresh();
                }
                if (scrollTop >= maxScroll) {
                    var target = this._targets[this._targets.length - 1];
                    if (this._activeTarget !== target) {
                        this._activate(target);
                    }
                    return;
                }
                if (this._activeTarget && scrollTop < this._offsets[0] && this._offsets[0] > 0) {
                    this._activeTarget = null;
                    this._clear();
                    return;
                }
                for (var i = this._offsets.length; i--; ) {
                    var isActiveTarget = this._activeTarget !== this._targets[i] && scrollTop >= this._offsets[i] && (typeof this._offsets[i + 1] === "undefined" || scrollTop < this._offsets[i + 1]);
                    if (isActiveTarget) {
                        this._activate(this._targets[i]);
                    }
                }
            };
            _proto._activate = function _activate(target) {
                this._activeTarget = target;
                this._clear();
                var queries = this._selector.split(",");
                queries = queries.map(function(selector) {
                    return selector + '[data-target="' + target + '"],' + (selector + '[href="' + target + '"]');
                });
                var $link = $$$1(queries.join(","));
                if ($link.hasClass(ClassName.DROPDOWN_ITEM)) {
                    $link.closest(Selector.DROPDOWN).find(Selector.DROPDOWN_TOGGLE).addClass(ClassName.ACTIVE);
                    $link.addClass(ClassName.ACTIVE);
                } else {
                    $link.addClass(ClassName.ACTIVE);
                    $link.parents(Selector.NAV_LIST_GROUP).prev(Selector.NAV_LINKS + ", " + Selector.LIST_ITEMS).addClass(ClassName.ACTIVE);
                    $link.parents(Selector.NAV_LIST_GROUP).prev(Selector.NAV_ITEMS).children(Selector.NAV_LINKS).addClass(ClassName.ACTIVE);
                }
                $$$1(this._scrollElement).trigger(Event.ACTIVATE, {
                    relatedTarget: target
                });
            };
            _proto._clear = function _clear() {
                $$$1(this._selector).filter(Selector.ACTIVE).removeClass(ClassName.ACTIVE);
            };
            ScrollSpy._jQueryInterface = function _jQueryInterface(config) {
                return this.each(function() {
                    var data = $$$1(this).data(DATA_KEY);
                    var _config = typeof config === "object" && config;
                    if (!data) {
                        data = new ScrollSpy(this, _config);
                        $$$1(this).data(DATA_KEY, data);
                    }
                    if (typeof config === "string") {
                        if (typeof data[config] === "undefined") {
                            throw new TypeError('No method named "' + config + '"');
                        }
                        data[config]();
                    }
                });
            };
            _createClass(ScrollSpy, null, [ {
                key: "VERSION",
                get: function get() {
                    return VERSION;
                }
            }, {
                key: "Default",
                get: function get() {
                    return Default;
                }
            } ]);
            return ScrollSpy;
        }();
        $$$1(window).on(Event.LOAD_DATA_API, function() {
            var scrollSpys = $$$1.makeArray($$$1(Selector.DATA_SPY));
            for (var i = scrollSpys.length; i--; ) {
                var $spy = $$$1(scrollSpys[i]);
                ScrollSpy._jQueryInterface.call($spy, $spy.data());
            }
        });
        $$$1.fn[NAME] = ScrollSpy._jQueryInterface;
        $$$1.fn[NAME].Constructor = ScrollSpy;
        $$$1.fn[NAME].noConflict = function() {
            $$$1.fn[NAME] = JQUERY_NO_CONFLICT;
            return ScrollSpy._jQueryInterface;
        };
        return ScrollSpy;
    }($);
    var Tab = function($$$1) {
        var NAME = "tab";
        var VERSION = "4.1.1";
        var DATA_KEY = "bs.tab";
        var EVENT_KEY = "." + DATA_KEY;
        var DATA_API_KEY = ".data-api";
        var JQUERY_NO_CONFLICT = $$$1.fn[NAME];
        var Event = {
            HIDE: "hide" + EVENT_KEY,
            HIDDEN: "hidden" + EVENT_KEY,
            SHOW: "show" + EVENT_KEY,
            SHOWN: "shown" + EVENT_KEY,
            CLICK_DATA_API: "click" + EVENT_KEY + DATA_API_KEY
        };
        var ClassName = {
            DROPDOWN_MENU: "dropdown-menu",
            ACTIVE: "active",
            DISABLED: "disabled",
            FADE: "fade",
            SHOW: "show"
        };
        var Selector = {
            DROPDOWN: ".dropdown",
            NAV_LIST_GROUP: ".nav, .list-group",
            ACTIVE: ".active",
            ACTIVE_UL: "> li > .active",
            DATA_TOGGLE: '[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]',
            DROPDOWN_TOGGLE: ".dropdown-toggle",
            DROPDOWN_ACTIVE_CHILD: "> .dropdown-menu .active"
        };
        var Tab = function() {
            function Tab(element) {
                this._element = element;
            }
            var _proto = Tab.prototype;
            _proto.show = function show() {
                var _this = this;
                if (this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE && $$$1(this._element).hasClass(ClassName.ACTIVE) || $$$1(this._element).hasClass(ClassName.DISABLED)) {
                    return;
                }
                var target;
                var previous;
                var listElement = $$$1(this._element).closest(Selector.NAV_LIST_GROUP)[0];
                var selector = Util.getSelectorFromElement(this._element);
                if (listElement) {
                    var itemSelector = listElement.nodeName === "UL" ? Selector.ACTIVE_UL : Selector.ACTIVE;
                    previous = $$$1.makeArray($$$1(listElement).find(itemSelector));
                    previous = previous[previous.length - 1];
                }
                var hideEvent = $$$1.Event(Event.HIDE, {
                    relatedTarget: this._element
                });
                var showEvent = $$$1.Event(Event.SHOW, {
                    relatedTarget: previous
                });
                if (previous) {
                    $$$1(previous).trigger(hideEvent);
                }
                $$$1(this._element).trigger(showEvent);
                if (showEvent.isDefaultPrevented() || hideEvent.isDefaultPrevented()) {
                    return;
                }
                if (selector) {
                    target = $$$1(selector)[0];
                }
                this._activate(this._element, listElement);
                var complete = function complete() {
                    var hiddenEvent = $$$1.Event(Event.HIDDEN, {
                        relatedTarget: _this._element
                    });
                    var shownEvent = $$$1.Event(Event.SHOWN, {
                        relatedTarget: previous
                    });
                    $$$1(previous).trigger(hiddenEvent);
                    $$$1(_this._element).trigger(shownEvent);
                };
                if (target) {
                    this._activate(target, target.parentNode, complete);
                } else {
                    complete();
                }
            };
            _proto.dispose = function dispose() {
                $$$1.removeData(this._element, DATA_KEY);
                this._element = null;
            };
            _proto._activate = function _activate(element, container, callback) {
                var _this2 = this;
                var activeElements;
                if (container.nodeName === "UL") {
                    activeElements = $$$1(container).find(Selector.ACTIVE_UL);
                } else {
                    activeElements = $$$1(container).children(Selector.ACTIVE);
                }
                var active = activeElements[0];
                var isTransitioning = callback && active && $$$1(active).hasClass(ClassName.FADE);
                var complete = function complete() {
                    return _this2._transitionComplete(element, active, callback);
                };
                if (active && isTransitioning) {
                    var transitionDuration = Util.getTransitionDurationFromElement(active);
                    $$$1(active).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);
                } else {
                    complete();
                }
            };
            _proto._transitionComplete = function _transitionComplete(element, active, callback) {
                if (active) {
                    $$$1(active).removeClass(ClassName.SHOW + " " + ClassName.ACTIVE);
                    var dropdownChild = $$$1(active.parentNode).find(Selector.DROPDOWN_ACTIVE_CHILD)[0];
                    if (dropdownChild) {
                        $$$1(dropdownChild).removeClass(ClassName.ACTIVE);
                    }
                    if (active.getAttribute("role") === "tab") {
                        active.setAttribute("aria-selected", false);
                    }
                }
                $$$1(element).addClass(ClassName.ACTIVE);
                if (element.getAttribute("role") === "tab") {
                    element.setAttribute("aria-selected", true);
                }
                Util.reflow(element);
                $$$1(element).addClass(ClassName.SHOW);
                if (element.parentNode && $$$1(element.parentNode).hasClass(ClassName.DROPDOWN_MENU)) {
                    var dropdownElement = $$$1(element).closest(Selector.DROPDOWN)[0];
                    if (dropdownElement) {
                        $$$1(dropdownElement).find(Selector.DROPDOWN_TOGGLE).addClass(ClassName.ACTIVE);
                    }
                    element.setAttribute("aria-expanded", true);
                }
                if (callback) {
                    callback();
                }
            };
            Tab._jQueryInterface = function _jQueryInterface(config) {
                return this.each(function() {
                    var $this = $$$1(this);
                    var data = $this.data(DATA_KEY);
                    if (!data) {
                        data = new Tab(this);
                        $this.data(DATA_KEY, data);
                    }
                    if (typeof config === "string") {
                        if (typeof data[config] === "undefined") {
                            throw new TypeError('No method named "' + config + '"');
                        }
                        data[config]();
                    }
                });
            };
            _createClass(Tab, null, [ {
                key: "VERSION",
                get: function get() {
                    return VERSION;
                }
            } ]);
            return Tab;
        }();
        $$$1(document).on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE, function(event) {
            event.preventDefault();
            Tab._jQueryInterface.call($$$1(this), "show");
        });
        $$$1.fn[NAME] = Tab._jQueryInterface;
        $$$1.fn[NAME].Constructor = Tab;
        $$$1.fn[NAME].noConflict = function() {
            $$$1.fn[NAME] = JQUERY_NO_CONFLICT;
            return Tab._jQueryInterface;
        };
        return Tab;
    }($);
    (function($$$1) {
        if (typeof $$$1 === "undefined") {
            throw new TypeError("Bootstrap's JavaScript requires jQuery. jQuery must be included before Bootstrap's JavaScript.");
        }
        var version = $$$1.fn.jquery.split(" ")[0].split(".");
        var minMajor = 1;
        var ltMajor = 2;
        var minMinor = 9;
        var minPatch = 1;
        var maxMajor = 4;
        if (version[0] < ltMajor && version[1] < minMinor || version[0] === minMajor && version[1] === minMinor && version[2] < minPatch || version[0] >= maxMajor) {
            throw new Error("Bootstrap's JavaScript requires at least jQuery v1.9.1 but less than v4.0.0");
        }
    })($);
    exports.Util = Util;
    exports.Alert = Alert;
    exports.Button = Button;
    exports.Carousel = Carousel;
    exports.Collapse = Collapse;
    exports.Dropdown = Dropdown;
    exports.Modal = Modal;
    exports.Popover = Popover;
    exports.Scrollspy = ScrollSpy;
    exports.Tab = Tab;
    exports.Tooltip = Tooltip;
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
});

!function(t, e) {
    "object" == typeof exports && "undefined" != typeof module ? e(exports, require("jquery")) : "function" == typeof define && define.amd ? define([ "exports", "jquery" ], e) : e(t.bootstrap = {}, t.jQuery);
}(this, function(t, e) {
    "use strict";
    function i(t, e) {
        for (var n = 0; n < e.length; n++) {
            var i = e[n];
            i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), 
            Object.defineProperty(t, i.key, i);
        }
    }
    function s(t, e, n) {
        return e && i(t.prototype, e), n && i(t, n), t;
    }
    function c(r) {
        for (var t = 1; t < arguments.length; t++) {
            var o = null != arguments[t] ? arguments[t] : {}, e = Object.keys(o);
            "function" == typeof Object.getOwnPropertySymbols && (e = e.concat(Object.getOwnPropertySymbols(o).filter(function(t) {
                return Object.getOwnPropertyDescriptor(o, t).enumerable;
            }))), e.forEach(function(t) {
                var e, n, i;
                e = r, i = o[n = t], n in e ? Object.defineProperty(e, n, {
                    value: i,
                    enumerable: !0,
                    configurable: !0,
                    writable: !0
                }) : e[n] = i;
            });
        }
        return r;
    }
    for (var r, n, o, a, l, f, h, u, d, p, g, m, _, v, E, y, b, T, C, w, I, D, A, S, O, N, k, L, P, x, j, M, R, H, W, F, U, B, K, V, Q, Y, G, q, z, X, J, Z, $, tt, et, nt, it, rt, ot, st, at, lt, ct, ft, ht, ut, dt, pt, gt = function(i) {
        var e = "transitionend";
        function t(t) {
            var e = this, n = !1;
            return i(this).one(l.TRANSITION_END, function() {
                n = !0;
            }), setTimeout(function() {
                n || l.triggerTransitionEnd(e);
            }, t), this;
        }
        var l = {
            TRANSITION_END: "bsTransitionEnd",
            getUID: function(t) {
                for (;t += ~~(1e6 * Math.random()), document.getElementById(t); ) ;
                return t;
            },
            getSelectorFromElement: function(t) {
                var e = t.getAttribute("data-target");
                e && "#" !== e || (e = t.getAttribute("href") || "");
                try {
                    return 0 < i(document).find(e).length ? e : null;
                } catch (t) {
                    return null;
                }
            },
            getTransitionDurationFromElement: function(t) {
                if (!t) return 0;
                var e = i(t).css("transition-duration");
                return parseFloat(e) ? (e = e.split(",")[0], 1e3 * parseFloat(e)) : 0;
            },
            reflow: function(t) {
                return t.offsetHeight;
            },
            triggerTransitionEnd: function(t) {
                i(t).trigger(e);
            },
            supportsTransitionEnd: function() {
                return Boolean(e);
            },
            isElement: function(t) {
                return (t[0] || t).nodeType;
            },
            typeCheckConfig: function(t, e, n) {
                for (var i in n) if (Object.prototype.hasOwnProperty.call(n, i)) {
                    var r = n[i], o = e[i], s = o && l.isElement(o) ? "element" : (a = o, {}.toString.call(a).match(/\s([a-z]+)/i)[1].toLowerCase());
                    if (!new RegExp(r).test(s)) throw new Error(t.toUpperCase() + ': Option "' + i + '" provided type "' + s + '" but expected type "' + r + '".');
                }
                var a;
            }
        };
        return i.fn.emulateTransitionEnd = t, i.event.special[l.TRANSITION_END] = {
            bindType: e,
            delegateType: e,
            handle: function(t) {
                if (i(t.target).is(this)) return t.handleObj.handler.apply(this, arguments);
            }
        }, l;
    }(e = e && e.hasOwnProperty("default") ? e.default : e), mt = (n = "alert", a = "." + (o = "bs.alert"), 
    l = (r = e).fn[n], f = {
        CLOSE: "close" + a,
        CLOSED: "closed" + a,
        CLICK_DATA_API: "click" + a + ".data-api"
    }, h = "alert", u = "fade", d = "show", p = function() {
        function i(t) {
            this._element = t;
        }
        var t = i.prototype;
        return t.close = function(t) {
            var e = this._element;
            t && (e = this._getRootElement(t)), this._triggerCloseEvent(e).isDefaultPrevented() || this._removeElement(e);
        }, t.dispose = function() {
            r.removeData(this._element, o), this._element = null;
        }, t._getRootElement = function(t) {
            var e = gt.getSelectorFromElement(t), n = !1;
            return e && (n = r(e)[0]), n || (n = r(t).closest("." + h)[0]), n;
        }, t._triggerCloseEvent = function(t) {
            var e = r.Event(f.CLOSE);
            return r(t).trigger(e), e;
        }, t._removeElement = function(e) {
            var n = this;
            if (r(e).removeClass(d), r(e).hasClass(u)) {
                var t = gt.getTransitionDurationFromElement(e);
                r(e).one(gt.TRANSITION_END, function(t) {
                    return n._destroyElement(e, t);
                }).emulateTransitionEnd(t);
            } else this._destroyElement(e);
        }, t._destroyElement = function(t) {
            r(t).detach().trigger(f.CLOSED).remove();
        }, i._jQueryInterface = function(n) {
            return this.each(function() {
                var t = r(this), e = t.data(o);
                e || (e = new i(this), t.data(o, e)), "close" === n && e[n](this);
            });
        }, i._handleDismiss = function(e) {
            return function(t) {
                t && t.preventDefault(), e.close(this);
            };
        }, s(i, null, [ {
            key: "VERSION",
            get: function() {
                return "4.1.1";
            }
        } ]), i;
    }(), r(document).on(f.CLICK_DATA_API, '[data-dismiss="alert"]', p._handleDismiss(new p())), 
    r.fn[n] = p._jQueryInterface, r.fn[n].Constructor = p, r.fn[n].noConflict = function() {
        return r.fn[n] = l, p._jQueryInterface;
    }, p), _t = (m = "button", v = "." + (_ = "bs.button"), E = ".data-api", y = (g = e).fn[m], 
    b = "active", T = "btn", w = '[data-toggle^="button"]', I = '[data-toggle="buttons"]', 
    D = "input", A = ".active", S = ".btn", O = {
        CLICK_DATA_API: "click" + v + E,
        FOCUS_BLUR_DATA_API: (C = "focus") + v + E + " blur" + v + E
    }, N = function() {
        function n(t) {
            this._element = t;
        }
        var t = n.prototype;
        return t.toggle = function() {
            var t = !0, e = !0, n = g(this._element).closest(I)[0];
            if (n) {
                var i = g(this._element).find(D)[0];
                if (i) {
                    if ("radio" === i.type) if (i.checked && g(this._element).hasClass(b)) t = !1; else {
                        var r = g(n).find(A)[0];
                        r && g(r).removeClass(b);
                    }
                    if (t) {
                        if (i.hasAttribute("disabled") || n.hasAttribute("disabled") || i.classList.contains("disabled") || n.classList.contains("disabled")) return;
                        i.checked = !g(this._element).hasClass(b), g(i).trigger("change");
                    }
                    i.focus(), e = !1;
                }
            }
            e && this._element.setAttribute("aria-pressed", !g(this._element).hasClass(b)), 
            t && g(this._element).toggleClass(b);
        }, t.dispose = function() {
            g.removeData(this._element, _), this._element = null;
        }, n._jQueryInterface = function(e) {
            return this.each(function() {
                var t = g(this).data(_);
                t || (t = new n(this), g(this).data(_, t)), "toggle" === e && t[e]();
            });
        }, s(n, null, [ {
            key: "VERSION",
            get: function() {
                return "4.1.1";
            }
        } ]), n;
    }(), g(document).on(O.CLICK_DATA_API, w, function(t) {
        t.preventDefault();
        var e = t.target;
        g(e).hasClass(T) || (e = g(e).closest(S)), N._jQueryInterface.call(g(e), "toggle");
    }).on(O.FOCUS_BLUR_DATA_API, w, function(t) {
        var e = g(t.target).closest(S)[0];
        g(e).toggleClass(C, /^focus(in)?$/.test(t.type));
    }), g.fn[m] = N._jQueryInterface, g.fn[m].Constructor = N, g.fn[m].noConflict = function() {
        return g.fn[m] = y, N._jQueryInterface;
    }, N), vt = (L = "carousel", x = "." + (P = "bs.carousel"), j = ".data-api", M = (k = e).fn[L], 
    R = {
        interval: 5e3,
        keyboard: !0,
        slide: !1,
        pause: "hover",
        wrap: !0
    }, H = {
        interval: "(number|boolean)",
        keyboard: "boolean",
        slide: "(boolean|string)",
        pause: "(string|boolean)",
        wrap: "boolean"
    }, W = "next", F = "prev", U = "left", B = "right", K = {
        SLIDE: "slide" + x,
        SLID: "slid" + x,
        KEYDOWN: "keydown" + x,
        MOUSEENTER: "mouseenter" + x,
        MOUSELEAVE: "mouseleave" + x,
        TOUCHEND: "touchend" + x,
        LOAD_DATA_API: "load" + x + j,
        CLICK_DATA_API: "click" + x + j
    }, V = "carousel", Q = "active", Y = "slide", G = "carousel-item-right", q = "carousel-item-left", 
    z = "carousel-item-next", X = "carousel-item-prev", J = {
        ACTIVE: ".active",
        ACTIVE_ITEM: ".active.carousel-item",
        ITEM: ".carousel-item",
        NEXT_PREV: ".carousel-item-next, .carousel-item-prev",
        INDICATORS: ".carousel-indicators",
        DATA_SLIDE: "[data-slide], [data-slide-to]",
        DATA_RIDE: '[data-ride="carousel"]'
    }, Z = function() {
        function o(t, e) {
            this._items = null, this._interval = null, this._activeElement = null, this._isPaused = !1, 
            this._isSliding = !1, this.touchTimeout = null, this._config = this._getConfig(e), 
            this._element = k(t)[0], this._indicatorsElement = k(this._element).find(J.INDICATORS)[0], 
            this._addEventListeners();
        }
        var t = o.prototype;
        return t.next = function() {
            this._isSliding || this._slide(W);
        }, t.nextWhenVisible = function() {
            !document.hidden && k(this._element).is(":visible") && "hidden" !== k(this._element).css("visibility") && this.next();
        }, t.prev = function() {
            this._isSliding || this._slide(F);
        }, t.pause = function(t) {
            t || (this._isPaused = !0), k(this._element).find(J.NEXT_PREV)[0] && (gt.triggerTransitionEnd(this._element), 
            this.cycle(!0)), clearInterval(this._interval), this._interval = null;
        }, t.cycle = function(t) {
            t || (this._isPaused = !1), this._interval && (clearInterval(this._interval), this._interval = null), 
            this._config.interval && !this._isPaused && (this._interval = setInterval((document.visibilityState ? this.nextWhenVisible : this.next).bind(this), this._config.interval));
        }, t.to = function(t) {
            var e = this;
            this._activeElement = k(this._element).find(J.ACTIVE_ITEM)[0];
            var n = this._getItemIndex(this._activeElement);
            if (!(t > this._items.length - 1 || t < 0)) if (this._isSliding) k(this._element).one(K.SLID, function() {
                return e.to(t);
            }); else {
                if (n === t) return this.pause(), void this.cycle();
                var i = n < t ? W : F;
                this._slide(i, this._items[t]);
            }
        }, t.dispose = function() {
            k(this._element).off(x), k.removeData(this._element, P), this._items = null, this._config = null, 
            this._element = null, this._interval = null, this._isPaused = null, this._isSliding = null, 
            this._activeElement = null, this._indicatorsElement = null;
        }, t._getConfig = function(t) {
            return t = c({}, R, t), gt.typeCheckConfig(L, t, H), t;
        }, t._addEventListeners = function() {
            var e = this;
            this._config.keyboard && k(this._element).on(K.KEYDOWN, function(t) {
                return e._keydown(t);
            }), "hover" === this._config.pause && (k(this._element).on(K.MOUSEENTER, function(t) {
                return e.pause(t);
            }).on(K.MOUSELEAVE, function(t) {
                return e.cycle(t);
            }), "ontouchstart" in document.documentElement && k(this._element).on(K.TOUCHEND, function() {
                e.pause(), e.touchTimeout && clearTimeout(e.touchTimeout), e.touchTimeout = setTimeout(function(t) {
                    return e.cycle(t);
                }, 500 + e._config.interval);
            }));
        }, t._keydown = function(t) {
            if (!/input|textarea/i.test(t.target.tagName)) switch (t.which) {
              case 37:
                t.preventDefault(), this.prev();
                break;

              case 39:
                t.preventDefault(), this.next();
            }
        }, t._getItemIndex = function(t) {
            return this._items = k.makeArray(k(t).parent().find(J.ITEM)), this._items.indexOf(t);
        }, t._getItemByDirection = function(t, e) {
            var n = t === W, i = t === F, r = this._getItemIndex(e), o = this._items.length - 1;
            if ((i && 0 === r || n && r === o) && !this._config.wrap) return e;
            var s = (r + (t === F ? -1 : 1)) % this._items.length;
            return -1 === s ? this._items[this._items.length - 1] : this._items[s];
        }, t._triggerSlideEvent = function(t, e) {
            var n = this._getItemIndex(t), i = this._getItemIndex(k(this._element).find(J.ACTIVE_ITEM)[0]), r = k.Event(K.SLIDE, {
                relatedTarget: t,
                direction: e,
                from: i,
                to: n
            });
            return k(this._element).trigger(r), r;
        }, t._setActiveIndicatorElement = function(t) {
            if (this._indicatorsElement) {
                k(this._indicatorsElement).find(J.ACTIVE).removeClass(Q);
                var e = this._indicatorsElement.children[this._getItemIndex(t)];
                e && k(e).addClass(Q);
            }
        }, t._slide = function(t, e) {
            var n, i, r, o = this, s = k(this._element).find(J.ACTIVE_ITEM)[0], a = this._getItemIndex(s), l = e || s && this._getItemByDirection(t, s), c = this._getItemIndex(l), f = Boolean(this._interval);
            if (t === W ? (n = q, i = z, r = U) : (n = G, i = X, r = B), l && k(l).hasClass(Q)) this._isSliding = !1; else if (!this._triggerSlideEvent(l, r).isDefaultPrevented() && s && l) {
                this._isSliding = !0, f && this.pause(), this._setActiveIndicatorElement(l);
                var h = k.Event(K.SLID, {
                    relatedTarget: l,
                    direction: r,
                    from: a,
                    to: c
                });
                if (k(this._element).hasClass(Y)) {
                    k(l).addClass(i), gt.reflow(l), k(s).addClass(n), k(l).addClass(n);
                    var u = gt.getTransitionDurationFromElement(s);
                    k(s).one(gt.TRANSITION_END, function() {
                        k(l).removeClass(n + " " + i).addClass(Q), k(s).removeClass(Q + " " + i + " " + n), 
                        o._isSliding = !1, setTimeout(function() {
                            return k(o._element).trigger(h);
                        }, 0);
                    }).emulateTransitionEnd(u);
                } else k(s).removeClass(Q), k(l).addClass(Q), this._isSliding = !1, k(this._element).trigger(h);
                f && this.cycle();
            }
        }, o._jQueryInterface = function(i) {
            return this.each(function() {
                var t = k(this).data(P), e = c({}, R, k(this).data());
                "object" == typeof i && (e = c({}, e, i));
                var n = "string" == typeof i ? i : e.slide;
                if (t || (t = new o(this, e), k(this).data(P, t)), "number" == typeof i) t.to(i); else if ("string" == typeof n) {
                    if ("undefined" == typeof t[n]) throw new TypeError('No method named "' + n + '"');
                    t[n]();
                } else e.interval && (t.pause(), t.cycle());
            });
        }, o._dataApiClickHandler = function(t) {
            var e = gt.getSelectorFromElement(this);
            if (e) {
                var n = k(e)[0];
                if (n && k(n).hasClass(V)) {
                    var i = c({}, k(n).data(), k(this).data()), r = this.getAttribute("data-slide-to");
                    r && (i.interval = !1), o._jQueryInterface.call(k(n), i), r && k(n).data(P).to(r), 
                    t.preventDefault();
                }
            }
        }, s(o, null, [ {
            key: "VERSION",
            get: function() {
                return "4.1.1";
            }
        }, {
            key: "Default",
            get: function() {
                return R;
            }
        } ]), o;
    }(), k(document).on(K.CLICK_DATA_API, J.DATA_SLIDE, Z._dataApiClickHandler), k(window).on(K.LOAD_DATA_API, function() {
        k(J.DATA_RIDE).each(function() {
            var t = k(this);
            Z._jQueryInterface.call(t, t.data());
        });
    }), k.fn[L] = Z._jQueryInterface, k.fn[L].Constructor = Z, k.fn[L].noConflict = function() {
        return k.fn[L] = M, Z._jQueryInterface;
    }, Z), Et = (tt = "collapse", nt = "." + (et = "bs.collapse"), it = ($ = e).fn[tt], 
    rt = {
        toggle: !0,
        parent: ""
    }, ot = {
        toggle: "boolean",
        parent: "(string|element)"
    }, st = {
        SHOW: "show" + nt,
        SHOWN: "shown" + nt,
        HIDE: "hide" + nt,
        HIDDEN: "hidden" + nt,
        CLICK_DATA_API: "click" + nt + ".data-api"
    }, at = "show", lt = "collapse", ct = "collapsing", ft = "collapsed", ht = "width", 
    ut = "height", dt = {
        ACTIVES: ".show, .collapsing",
        DATA_TOGGLE: '[data-toggle="collapse"]'
    }, pt = function() {
        function a(t, e) {
            this._isTransitioning = !1, this._element = t, this._config = this._getConfig(e), 
            this._triggerArray = $.makeArray($('[data-toggle="collapse"][href="#' + t.id + '"],[data-toggle="collapse"][data-target="#' + t.id + '"]'));
            for (var n = $(dt.DATA_TOGGLE), i = 0; i < n.length; i++) {
                var r = n[i], o = gt.getSelectorFromElement(r);
                null !== o && 0 < $(o).filter(t).length && (this._selector = o, this._triggerArray.push(r));
            }
            this._parent = this._config.parent ? this._getParent() : null, this._config.parent || this._addAriaAndCollapsedClass(this._element, this._triggerArray), 
            this._config.toggle && this.toggle();
        }
        var t = a.prototype;
        return t.toggle = function() {
            $(this._element).hasClass(at) ? this.hide() : this.show();
        }, t.show = function() {
            var t, e, n = this;
            if (!this._isTransitioning && !$(this._element).hasClass(at) && (this._parent && 0 === (t = $.makeArray($(this._parent).find(dt.ACTIVES).filter('[data-parent="' + this._config.parent + '"]'))).length && (t = null), 
            !(t && (e = $(t).not(this._selector).data(et)) && e._isTransitioning))) {
                var i = $.Event(st.SHOW);
                if ($(this._element).trigger(i), !i.isDefaultPrevented()) {
                    t && (a._jQueryInterface.call($(t).not(this._selector), "hide"), e || $(t).data(et, null));
                    var r = this._getDimension();
                    $(this._element).removeClass(lt).addClass(ct), (this._element.style[r] = 0) < this._triggerArray.length && $(this._triggerArray).removeClass(ft).attr("aria-expanded", !0), 
                    this.setTransitioning(!0);
                    var o = "scroll" + (r[0].toUpperCase() + r.slice(1)), s = gt.getTransitionDurationFromElement(this._element);
                    $(this._element).one(gt.TRANSITION_END, function() {
                        $(n._element).removeClass(ct).addClass(lt).addClass(at), n._element.style[r] = "", 
                        n.setTransitioning(!1), $(n._element).trigger(st.SHOWN);
                    }).emulateTransitionEnd(s), this._element.style[r] = this._element[o] + "px";
                }
            }
        }, t.hide = function() {
            var t = this;
            if (!this._isTransitioning && $(this._element).hasClass(at)) {
                var e = $.Event(st.HIDE);
                if ($(this._element).trigger(e), !e.isDefaultPrevented()) {
                    var n = this._getDimension();
                    if (this._element.style[n] = this._element.getBoundingClientRect()[n] + "px", gt.reflow(this._element), 
                    $(this._element).addClass(ct).removeClass(lt).removeClass(at), 0 < this._triggerArray.length) for (var i = 0; i < this._triggerArray.length; i++) {
                        var r = this._triggerArray[i], o = gt.getSelectorFromElement(r);
                        if (null !== o) $(o).hasClass(at) || $(r).addClass(ft).attr("aria-expanded", !1);
                    }
                    this.setTransitioning(!0);
                    this._element.style[n] = "";
                    var s = gt.getTransitionDurationFromElement(this._element);
                    $(this._element).one(gt.TRANSITION_END, function() {
                        t.setTransitioning(!1), $(t._element).removeClass(ct).addClass(lt).trigger(st.HIDDEN);
                    }).emulateTransitionEnd(s);
                }
            }
        }, t.setTransitioning = function(t) {
            this._isTransitioning = t;
        }, t.dispose = function() {
            $.removeData(this._element, et), this._config = null, this._parent = null, this._element = null, 
            this._triggerArray = null, this._isTransitioning = null;
        }, t._getConfig = function(t) {
            return (t = c({}, rt, t)).toggle = Boolean(t.toggle), gt.typeCheckConfig(tt, t, ot), 
            t;
        }, t._getDimension = function() {
            return $(this._element).hasClass(ht) ? ht : ut;
        }, t._getParent = function() {
            var n = this, t = null;
            gt.isElement(this._config.parent) ? (t = this._config.parent, "undefined" != typeof this._config.parent.jquery && (t = this._config.parent[0])) : t = $(this._config.parent)[0];
            var e = '[data-toggle="collapse"][data-parent="' + this._config.parent + '"]';
            return $(t).find(e).each(function(t, e) {
                n._addAriaAndCollapsedClass(a._getTargetFromElement(e), [ e ]);
            }), t;
        }, t._addAriaAndCollapsedClass = function(t, e) {
            if (t) {
                var n = $(t).hasClass(at);
                0 < e.length && $(e).toggleClass(ft, !n).attr("aria-expanded", n);
            }
        }, a._getTargetFromElement = function(t) {
            var e = gt.getSelectorFromElement(t);
            return e ? $(e)[0] : null;
        }, a._jQueryInterface = function(i) {
            return this.each(function() {
                var t = $(this), e = t.data(et), n = c({}, rt, t.data(), "object" == typeof i && i ? i : {});
                if (!e && n.toggle && /show|hide/.test(i) && (n.toggle = !1), e || (e = new a(this, n), 
                t.data(et, e)), "string" == typeof i) {
                    if ("undefined" == typeof e[i]) throw new TypeError('No method named "' + i + '"');
                    e[i]();
                }
            });
        }, s(a, null, [ {
            key: "VERSION",
            get: function() {
                return "4.1.1";
            }
        }, {
            key: "Default",
            get: function() {
                return rt;
            }
        } ]), a;
    }(), $(document).on(st.CLICK_DATA_API, dt.DATA_TOGGLE, function(t) {
        "A" === t.currentTarget.tagName && t.preventDefault();
        var n = $(this), e = gt.getSelectorFromElement(this);
        $(e).each(function() {
            var t = $(this), e = t.data(et) ? "toggle" : n.data();
            pt._jQueryInterface.call(t, e);
        });
    }), $.fn[tt] = pt._jQueryInterface, $.fn[tt].Constructor = pt, $.fn[tt].noConflict = function() {
        return $.fn[tt] = it, pt._jQueryInterface;
    }, pt), yt = "undefined" != typeof window && "undefined" != typeof document, bt = [ "Edge", "Trident", "Firefox" ], Tt = 0, Ct = 0; Ct < bt.length; Ct += 1) if (yt && 0 <= navigator.userAgent.indexOf(bt[Ct])) {
        Tt = 1;
        break;
    }
    var wt = yt && window.Promise ? function(t) {
        var e = !1;
        return function() {
            e || (e = !0, window.Promise.resolve().then(function() {
                e = !1, t();
            }));
        };
    } : function(t) {
        var e = !1;
        return function() {
            e || (e = !0, setTimeout(function() {
                e = !1, t();
            }, Tt));
        };
    };
    function It(t) {
        return t && "[object Function]" === {}.toString.call(t);
    }
    function Dt(t, e) {
        if (1 !== t.nodeType) return [];
        var n = getComputedStyle(t, null);
        return e ? n[e] : n;
    }
    function At(t) {
        return "HTML" === t.nodeName ? t : t.parentNode || t.host;
    }
    function St(t) {
        if (!t) return document.body;
        switch (t.nodeName) {
          case "HTML":
          case "BODY":
            return t.ownerDocument.body;

          case "#document":
            return t.body;
        }
        var e = Dt(t), n = e.overflow, i = e.overflowX, r = e.overflowY;
        return /(auto|scroll|overlay)/.test(n + r + i) ? t : St(At(t));
    }
    var Ot = yt && !(!window.MSInputMethodContext || !document.documentMode), Nt = yt && /MSIE 10/.test(navigator.userAgent);
    function kt(t) {
        return 11 === t ? Ot : 10 === t ? Nt : Ot || Nt;
    }
    function Lt(t) {
        if (!t) return document.documentElement;
        for (var e = kt(10) ? document.body : null, n = t.offsetParent; n === e && t.nextElementSibling; ) n = (t = t.nextElementSibling).offsetParent;
        var i = n && n.nodeName;
        return i && "BODY" !== i && "HTML" !== i ? -1 !== [ "TD", "TABLE" ].indexOf(n.nodeName) && "static" === Dt(n, "position") ? Lt(n) : n : t ? t.ownerDocument.documentElement : document.documentElement;
    }
    function Pt(t) {
        return null !== t.parentNode ? Pt(t.parentNode) : t;
    }
    function xt(t, e) {
        if (!(t && t.nodeType && e && e.nodeType)) return document.documentElement;
        var n = t.compareDocumentPosition(e) & Node.DOCUMENT_POSITION_FOLLOWING, i = n ? t : e, r = n ? e : t, o = document.createRange();
        o.setStart(i, 0), o.setEnd(r, 0);
        var s, a, l = o.commonAncestorContainer;
        if (t !== l && e !== l || i.contains(r)) return "BODY" === (a = (s = l).nodeName) || "HTML" !== a && Lt(s.firstElementChild) !== s ? Lt(l) : l;
        var c = Pt(t);
        return c.host ? xt(c.host, e) : xt(t, Pt(e).host);
    }
    function jt(t) {
        var e = "top" === (1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : "top") ? "scrollTop" : "scrollLeft", n = t.nodeName;
        if ("BODY" === n || "HTML" === n) {
            var i = t.ownerDocument.documentElement;
            return (t.ownerDocument.scrollingElement || i)[e];
        }
        return t[e];
    }
    function Mt(t, e) {
        var n = "x" === e ? "Left" : "Top", i = "Left" === n ? "Right" : "Bottom";
        return parseFloat(t["border" + n + "Width"], 10) + parseFloat(t["border" + i + "Width"], 10);
    }
    function Rt(t, e, n, i) {
        return Math.max(e["offset" + t], e["scroll" + t], n["client" + t], n["offset" + t], n["scroll" + t], kt(10) ? n["offset" + t] + i["margin" + ("Height" === t ? "Top" : "Left")] + i["margin" + ("Height" === t ? "Bottom" : "Right")] : 0);
    }
    function Ht() {
        var t = document.body, e = document.documentElement, n = kt(10) && getComputedStyle(e);
        return {
            height: Rt("Height", t, e, n),
            width: Rt("Width", t, e, n)
        };
    }
    var Wt = function(t, e) {
        if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
    }, Ft = function() {
        function i(t, e) {
            for (var n = 0; n < e.length; n++) {
                var i = e[n];
                i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), 
                Object.defineProperty(t, i.key, i);
            }
        }
        return function(t, e, n) {
            return e && i(t.prototype, e), n && i(t, n), t;
        };
    }(), Ut = function(t, e, n) {
        return e in t ? Object.defineProperty(t, e, {
            value: n,
            enumerable: !0,
            configurable: !0,
            writable: !0
        }) : t[e] = n, t;
    }, Bt = Object.assign || function(t) {
        for (var e = 1; e < arguments.length; e++) {
            var n = arguments[e];
            for (var i in n) Object.prototype.hasOwnProperty.call(n, i) && (t[i] = n[i]);
        }
        return t;
    };
    function Kt(t) {
        return Bt({}, t, {
            right: t.left + t.width,
            bottom: t.top + t.height
        });
    }
    function Vt(t) {
        var e = {};
        try {
            if (kt(10)) {
                e = t.getBoundingClientRect();
                var n = jt(t, "top"), i = jt(t, "left");
                e.top += n, e.left += i, e.bottom += n, e.right += i;
            } else e = t.getBoundingClientRect();
        } catch (t) {}
        var r = {
            left: e.left,
            top: e.top,
            width: e.right - e.left,
            height: e.bottom - e.top
        }, o = "HTML" === t.nodeName ? Ht() : {}, s = o.width || t.clientWidth || r.right - r.left, a = o.height || t.clientHeight || r.bottom - r.top, l = t.offsetWidth - s, c = t.offsetHeight - a;
        if (l || c) {
            var f = Dt(t);
            l -= Mt(f, "x"), c -= Mt(f, "y"), r.width -= l, r.height -= c;
        }
        return Kt(r);
    }
    function Qt(t, e) {
        var n = 2 < arguments.length && void 0 !== arguments[2] && arguments[2], i = kt(10), r = "HTML" === e.nodeName, o = Vt(t), s = Vt(e), a = St(t), l = Dt(e), c = parseFloat(l.borderTopWidth, 10), f = parseFloat(l.borderLeftWidth, 10);
        n && "HTML" === e.nodeName && (s.top = Math.max(s.top, 0), s.left = Math.max(s.left, 0));
        var h = Kt({
            top: o.top - s.top - c,
            left: o.left - s.left - f,
            width: o.width,
            height: o.height
        });
        if (h.marginTop = 0, h.marginLeft = 0, !i && r) {
            var u = parseFloat(l.marginTop, 10), d = parseFloat(l.marginLeft, 10);
            h.top -= c - u, h.bottom -= c - u, h.left -= f - d, h.right -= f - d, h.marginTop = u, 
            h.marginLeft = d;
        }
        return (i && !n ? e.contains(a) : e === a && "BODY" !== a.nodeName) && (h = function(t, e) {
            var n = 2 < arguments.length && void 0 !== arguments[2] && arguments[2], i = jt(e, "top"), r = jt(e, "left"), o = n ? -1 : 1;
            return t.top += i * o, t.bottom += i * o, t.left += r * o, t.right += r * o, t;
        }(h, e)), h;
    }
    function Yt(t) {
        if (!t || !t.parentElement || kt()) return document.documentElement;
        for (var e = t.parentElement; e && "none" === Dt(e, "transform"); ) e = e.parentElement;
        return e || document.documentElement;
    }
    function Gt(t, e, n, i) {
        var r = 4 < arguments.length && void 0 !== arguments[4] && arguments[4], o = {
            top: 0,
            left: 0
        }, s = r ? Yt(t) : xt(t, e);
        if ("viewport" === i) o = function(t) {
            var e = 1 < arguments.length && void 0 !== arguments[1] && arguments[1], n = t.ownerDocument.documentElement, i = Qt(t, n), r = Math.max(n.clientWidth, window.innerWidth || 0), o = Math.max(n.clientHeight, window.innerHeight || 0), s = e ? 0 : jt(n), a = e ? 0 : jt(n, "left");
            return Kt({
                top: s - i.top + i.marginTop,
                left: a - i.left + i.marginLeft,
                width: r,
                height: o
            });
        }(s, r); else {
            var a = void 0;
            "scrollParent" === i ? "BODY" === (a = St(At(e))).nodeName && (a = t.ownerDocument.documentElement) : a = "window" === i ? t.ownerDocument.documentElement : i;
            var l = Qt(a, s, r);
            if ("HTML" !== a.nodeName || function t(e) {
                var n = e.nodeName;
                return "BODY" !== n && "HTML" !== n && ("fixed" === Dt(e, "position") || t(At(e)));
            }(s)) o = l; else {
                var c = Ht(), f = c.height, h = c.width;
                o.top += l.top - l.marginTop, o.bottom = f + l.top, o.left += l.left - l.marginLeft, 
                o.right = h + l.left;
            }
        }
        return o.left += n, o.top += n, o.right -= n, o.bottom -= n, o;
    }
    function qt(t, e, i, n, r) {
        var o = 5 < arguments.length && void 0 !== arguments[5] ? arguments[5] : 0;
        if (-1 === t.indexOf("auto")) return t;
        var s = Gt(i, n, o, r), a = {
            top: {
                width: s.width,
                height: e.top - s.top
            },
            right: {
                width: s.right - e.right,
                height: s.height
            },
            bottom: {
                width: s.width,
                height: s.bottom - e.bottom
            },
            left: {
                width: e.left - s.left,
                height: s.height
            }
        }, l = Object.keys(a).map(function(t) {
            return Bt({
                key: t
            }, a[t], {
                area: (e = a[t], e.width * e.height)
            });
            var e;
        }).sort(function(t, e) {
            return e.area - t.area;
        }), c = l.filter(function(t) {
            var e = t.width, n = t.height;
            return e >= i.clientWidth && n >= i.clientHeight;
        }), f = 0 < c.length ? c[0].key : l[0].key, h = t.split("-")[1];
        return f + (h ? "-" + h : "");
    }
    function zt(t, e, n) {
        var i = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
        return Qt(n, i ? Yt(e) : xt(e, n), i);
    }
    function Xt(t) {
        var e = getComputedStyle(t), n = parseFloat(e.marginTop) + parseFloat(e.marginBottom), i = parseFloat(e.marginLeft) + parseFloat(e.marginRight);
        return {
            width: t.offsetWidth + i,
            height: t.offsetHeight + n
        };
    }
    function Jt(t) {
        var e = {
            left: "right",
            right: "left",
            bottom: "top",
            top: "bottom"
        };
        return t.replace(/left|right|bottom|top/g, function(t) {
            return e[t];
        });
    }
    function Zt(t, e, n) {
        n = n.split("-")[0];
        var i = Xt(t), r = {
            width: i.width,
            height: i.height
        }, o = -1 !== [ "right", "left" ].indexOf(n), s = o ? "top" : "left", a = o ? "left" : "top", l = o ? "height" : "width", c = o ? "width" : "height";
        return r[s] = e[s] + e[l] / 2 - i[l] / 2, r[a] = n === a ? e[a] - i[c] : e[Jt(a)], 
        r;
    }
    function $t(t, e) {
        return Array.prototype.find ? t.find(e) : t.filter(e)[0];
    }
    function te(t, n, e) {
        return (void 0 === e ? t : t.slice(0, function(t, e, n) {
            if (Array.prototype.findIndex) return t.findIndex(function(t) {
                return t[e] === n;
            });
            var i = $t(t, function(t) {
                return t[e] === n;
            });
            return t.indexOf(i);
        }(t, "name", e))).forEach(function(t) {
            t.function && console.warn("`modifier.function` is deprecated, use `modifier.fn`!");
            var e = t.function || t.fn;
            t.enabled && It(e) && (n.offsets.popper = Kt(n.offsets.popper), n.offsets.reference = Kt(n.offsets.reference), 
            n = e(n, t));
        }), n;
    }
    function ee(t, n) {
        return t.some(function(t) {
            var e = t.name;
            return t.enabled && e === n;
        });
    }
    function ne(t) {
        for (var e = [ !1, "ms", "Webkit", "Moz", "O" ], n = t.charAt(0).toUpperCase() + t.slice(1), i = 0; i < e.length; i++) {
            var r = e[i], o = r ? "" + r + n : t;
            if ("undefined" != typeof document.body.style[o]) return o;
        }
        return null;
    }
    function ie(t) {
        var e = t.ownerDocument;
        return e ? e.defaultView : window;
    }
    function re(t, e, n, i) {
        n.updateBound = i, ie(t).addEventListener("resize", n.updateBound, {
            passive: !0
        });
        var r = St(t);
        return function t(e, n, i, r) {
            var o = "BODY" === e.nodeName, s = o ? e.ownerDocument.defaultView : e;
            s.addEventListener(n, i, {
                passive: !0
            }), o || t(St(s.parentNode), n, i, r), r.push(s);
        }(r, "scroll", n.updateBound, n.scrollParents), n.scrollElement = r, n.eventsEnabled = !0, 
        n;
    }
    function oe() {
        var t, e;
        this.state.eventsEnabled && (cancelAnimationFrame(this.scheduleUpdate), this.state = (t = this.reference, 
        e = this.state, ie(t).removeEventListener("resize", e.updateBound), e.scrollParents.forEach(function(t) {
            t.removeEventListener("scroll", e.updateBound);
        }), e.updateBound = null, e.scrollParents = [], e.scrollElement = null, e.eventsEnabled = !1, 
        e));
    }
    function se(t) {
        return "" !== t && !isNaN(parseFloat(t)) && isFinite(t);
    }
    function ae(n, i) {
        Object.keys(i).forEach(function(t) {
            var e = "";
            -1 !== [ "width", "height", "top", "right", "bottom", "left" ].indexOf(t) && se(i[t]) && (e = "px"), 
            n.style[t] = i[t] + e;
        });
    }
    function le(t, e, n) {
        var i = $t(t, function(t) {
            return t.name === e;
        }), r = !!i && t.some(function(t) {
            return t.name === n && t.enabled && t.order < i.order;
        });
        if (!r) {
            var o = "`" + e + "`", s = "`" + n + "`";
            console.warn(s + " modifier is required by " + o + " modifier in order to work, be sure to include it before " + o + "!");
        }
        return r;
    }
    var ce = [ "auto-start", "auto", "auto-end", "top-start", "top", "top-end", "right-start", "right", "right-end", "bottom-end", "bottom", "bottom-start", "left-end", "left", "left-start" ], fe = ce.slice(3);
    function he(t) {
        var e = 1 < arguments.length && void 0 !== arguments[1] && arguments[1], n = fe.indexOf(t), i = fe.slice(n + 1).concat(fe.slice(0, n));
        return e ? i.reverse() : i;
    }
    var ue = {
        FLIP: "flip",
        CLOCKWISE: "clockwise",
        COUNTERCLOCKWISE: "counterclockwise"
    };
    function de(t, r, o, e) {
        var s = [ 0, 0 ], a = -1 !== [ "right", "left" ].indexOf(e), n = t.split(/(\+|\-)/).map(function(t) {
            return t.trim();
        }), i = n.indexOf($t(n, function(t) {
            return -1 !== t.search(/,|\s/);
        }));
        n[i] && -1 === n[i].indexOf(",") && console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");
        var l = /\s*,\s*|\s+/, c = -1 !== i ? [ n.slice(0, i).concat([ n[i].split(l)[0] ]), [ n[i].split(l)[1] ].concat(n.slice(i + 1)) ] : [ n ];
        return (c = c.map(function(t, e) {
            var n = (1 === e ? !a : a) ? "height" : "width", i = !1;
            return t.reduce(function(t, e) {
                return "" === t[t.length - 1] && -1 !== [ "+", "-" ].indexOf(e) ? (t[t.length - 1] = e, 
                i = !0, t) : i ? (t[t.length - 1] += e, i = !1, t) : t.concat(e);
            }, []).map(function(t) {
                return function(t, e, n, i) {
                    var r = t.match(/((?:\-|\+)?\d*\.?\d*)(.*)/), o = +r[1], s = r[2];
                    if (!o) return t;
                    if (0 === s.indexOf("%")) {
                        var a = void 0;
                        switch (s) {
                          case "%p":
                            a = n;
                            break;

                          case "%":
                          case "%r":
                          default:
                            a = i;
                        }
                        return Kt(a)[e] / 100 * o;
                    }
                    if ("vh" === s || "vw" === s) return ("vh" === s ? Math.max(document.documentElement.clientHeight, window.innerHeight || 0) : Math.max(document.documentElement.clientWidth, window.innerWidth || 0)) / 100 * o;
                    return o;
                }(t, n, r, o);
            });
        })).forEach(function(n, i) {
            n.forEach(function(t, e) {
                se(t) && (s[i] += t * ("-" === n[e - 1] ? -1 : 1));
            });
        }), s;
    }
    var pe = {
        placement: "bottom",
        positionFixed: !1,
        eventsEnabled: !0,
        removeOnDestroy: !1,
        onCreate: function() {},
        onUpdate: function() {},
        modifiers: {
            shift: {
                order: 100,
                enabled: !0,
                fn: function(t) {
                    var e = t.placement, n = e.split("-")[0], i = e.split("-")[1];
                    if (i) {
                        var r = t.offsets, o = r.reference, s = r.popper, a = -1 !== [ "bottom", "top" ].indexOf(n), l = a ? "left" : "top", c = a ? "width" : "height", f = {
                            start: Ut({}, l, o[l]),
                            end: Ut({}, l, o[l] + o[c] - s[c])
                        };
                        t.offsets.popper = Bt({}, s, f[i]);
                    }
                    return t;
                }
            },
            offset: {
                order: 200,
                enabled: !0,
                fn: function(t, e) {
                    var n = e.offset, i = t.placement, r = t.offsets, o = r.popper, s = r.reference, a = i.split("-")[0], l = void 0;
                    return l = se(+n) ? [ +n, 0 ] : de(n, o, s, a), "left" === a ? (o.top += l[0], o.left -= l[1]) : "right" === a ? (o.top += l[0], 
                    o.left += l[1]) : "top" === a ? (o.left += l[0], o.top -= l[1]) : "bottom" === a && (o.left += l[0], 
                    o.top += l[1]), t.popper = o, t;
                },
                offset: 0
            },
            preventOverflow: {
                order: 300,
                enabled: !0,
                fn: function(t, i) {
                    var e = i.boundariesElement || Lt(t.instance.popper);
                    t.instance.reference === e && (e = Lt(e));
                    var n = ne("transform"), r = t.instance.popper.style, o = r.top, s = r.left, a = r[n];
                    r.top = "", r.left = "", r[n] = "";
                    var l = Gt(t.instance.popper, t.instance.reference, i.padding, e, t.positionFixed);
                    r.top = o, r.left = s, r[n] = a, i.boundaries = l;
                    var c = i.priority, f = t.offsets.popper, h = {
                        primary: function(t) {
                            var e = f[t];
                            return f[t] < l[t] && !i.escapeWithReference && (e = Math.max(f[t], l[t])), Ut({}, t, e);
                        },
                        secondary: function(t) {
                            var e = "right" === t ? "left" : "top", n = f[e];
                            return f[t] > l[t] && !i.escapeWithReference && (n = Math.min(f[e], l[t] - ("right" === t ? f.width : f.height))), 
                            Ut({}, e, n);
                        }
                    };
                    return c.forEach(function(t) {
                        var e = -1 !== [ "left", "top" ].indexOf(t) ? "primary" : "secondary";
                        f = Bt({}, f, h[e](t));
                    }), t.offsets.popper = f, t;
                },
                priority: [ "left", "right", "top", "bottom" ],
                padding: 5,
                boundariesElement: "scrollParent"
            },
            keepTogether: {
                order: 400,
                enabled: !0,
                fn: function(t) {
                    var e = t.offsets, n = e.popper, i = e.reference, r = t.placement.split("-")[0], o = Math.floor, s = -1 !== [ "top", "bottom" ].indexOf(r), a = s ? "right" : "bottom", l = s ? "left" : "top", c = s ? "width" : "height";
                    return n[a] < o(i[l]) && (t.offsets.popper[l] = o(i[l]) - n[c]), n[l] > o(i[a]) && (t.offsets.popper[l] = o(i[a])), 
                    t;
                }
            },
            arrow: {
                order: 500,
                enabled: !0,
                fn: function(t, e) {
                    var n;
                    if (!le(t.instance.modifiers, "arrow", "keepTogether")) return t;
                    var i = e.element;
                    if ("string" == typeof i) {
                        if (!(i = t.instance.popper.querySelector(i))) return t;
                    } else if (!t.instance.popper.contains(i)) return console.warn("WARNING: `arrow.element` must be child of its popper element!"), 
                    t;
                    var r = t.placement.split("-")[0], o = t.offsets, s = o.popper, a = o.reference, l = -1 !== [ "left", "right" ].indexOf(r), c = l ? "height" : "width", f = l ? "Top" : "Left", h = f.toLowerCase(), u = l ? "left" : "top", d = l ? "bottom" : "right", p = Xt(i)[c];
                    a[d] - p < s[h] && (t.offsets.popper[h] -= s[h] - (a[d] - p)), a[h] + p > s[d] && (t.offsets.popper[h] += a[h] + p - s[d]), 
                    t.offsets.popper = Kt(t.offsets.popper);
                    var g = a[h] + a[c] / 2 - p / 2, m = Dt(t.instance.popper), _ = parseFloat(m["margin" + f], 10), v = parseFloat(m["border" + f + "Width"], 10), E = g - t.offsets.popper[h] - _ - v;
                    return E = Math.max(Math.min(s[c] - p, E), 0), t.arrowElement = i, t.offsets.arrow = (Ut(n = {}, h, Math.round(E)), 
                    Ut(n, u, ""), n), t;
                },
                element: "[x-arrow]"
            },
            flip: {
                order: 600,
                enabled: !0,
                fn: function(p, g) {
                    if (ee(p.instance.modifiers, "inner")) return p;
                    if (p.flipped && p.placement === p.originalPlacement) return p;
                    var m = Gt(p.instance.popper, p.instance.reference, g.padding, g.boundariesElement, p.positionFixed), _ = p.placement.split("-")[0], v = Jt(_), E = p.placement.split("-")[1] || "", y = [];
                    switch (g.behavior) {
                      case ue.FLIP:
                        y = [ _, v ];
                        break;

                      case ue.CLOCKWISE:
                        y = he(_);
                        break;

                      case ue.COUNTERCLOCKWISE:
                        y = he(_, !0);
                        break;

                      default:
                        y = g.behavior;
                    }
                    return y.forEach(function(t, e) {
                        if (_ !== t || y.length === e + 1) return p;
                        _ = p.placement.split("-")[0], v = Jt(_);
                        var n, i = p.offsets.popper, r = p.offsets.reference, o = Math.floor, s = "left" === _ && o(i.right) > o(r.left) || "right" === _ && o(i.left) < o(r.right) || "top" === _ && o(i.bottom) > o(r.top) || "bottom" === _ && o(i.top) < o(r.bottom), a = o(i.left) < o(m.left), l = o(i.right) > o(m.right), c = o(i.top) < o(m.top), f = o(i.bottom) > o(m.bottom), h = "left" === _ && a || "right" === _ && l || "top" === _ && c || "bottom" === _ && f, u = -1 !== [ "top", "bottom" ].indexOf(_), d = !!g.flipVariations && (u && "start" === E && a || u && "end" === E && l || !u && "start" === E && c || !u && "end" === E && f);
                        (s || h || d) && (p.flipped = !0, (s || h) && (_ = y[e + 1]), d && (E = "end" === (n = E) ? "start" : "start" === n ? "end" : n), 
                        p.placement = _ + (E ? "-" + E : ""), p.offsets.popper = Bt({}, p.offsets.popper, Zt(p.instance.popper, p.offsets.reference, p.placement)), 
                        p = te(p.instance.modifiers, p, "flip"));
                    }), p;
                },
                behavior: "flip",
                padding: 5,
                boundariesElement: "viewport"
            },
            inner: {
                order: 700,
                enabled: !1,
                fn: function(t) {
                    var e = t.placement, n = e.split("-")[0], i = t.offsets, r = i.popper, o = i.reference, s = -1 !== [ "left", "right" ].indexOf(n), a = -1 === [ "top", "left" ].indexOf(n);
                    return r[s ? "left" : "top"] = o[n] - (a ? r[s ? "width" : "height"] : 0), t.placement = Jt(e), 
                    t.offsets.popper = Kt(r), t;
                }
            },
            hide: {
                order: 800,
                enabled: !0,
                fn: function(t) {
                    if (!le(t.instance.modifiers, "hide", "preventOverflow")) return t;
                    var e = t.offsets.reference, n = $t(t.instance.modifiers, function(t) {
                        return "preventOverflow" === t.name;
                    }).boundaries;
                    if (e.bottom < n.top || e.left > n.right || e.top > n.bottom || e.right < n.left) {
                        if (!0 === t.hide) return t;
                        t.hide = !0, t.attributes["x-out-of-boundaries"] = "";
                    } else {
                        if (!1 === t.hide) return t;
                        t.hide = !1, t.attributes["x-out-of-boundaries"] = !1;
                    }
                    return t;
                }
            },
            computeStyle: {
                order: 850,
                enabled: !0,
                fn: function(t, e) {
                    var n = e.x, i = e.y, r = t.offsets.popper, o = $t(t.instance.modifiers, function(t) {
                        return "applyStyle" === t.name;
                    }).gpuAcceleration;
                    void 0 !== o && console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");
                    var s = void 0 !== o ? o : e.gpuAcceleration, a = Vt(Lt(t.instance.popper)), l = {
                        position: r.position
                    }, c = {
                        left: Math.floor(r.left),
                        top: Math.round(r.top),
                        bottom: Math.round(r.bottom),
                        right: Math.floor(r.right)
                    }, f = "bottom" === n ? "top" : "bottom", h = "right" === i ? "left" : "right", u = ne("transform"), d = void 0, p = void 0;
                    if (p = "bottom" === f ? -a.height + c.bottom : c.top, d = "right" === h ? -a.width + c.right : c.left, 
                    s && u) l[u] = "translate3d(" + d + "px, " + p + "px, 0)", l[f] = 0, l[h] = 0, l.willChange = "transform"; else {
                        var g = "bottom" === f ? -1 : 1, m = "right" === h ? -1 : 1;
                        l[f] = p * g, l[h] = d * m, l.willChange = f + ", " + h;
                    }
                    var _ = {
                        "x-placement": t.placement
                    };
                    return t.attributes = Bt({}, _, t.attributes), t.styles = Bt({}, l, t.styles), t.arrowStyles = Bt({}, t.offsets.arrow, t.arrowStyles), 
                    t;
                },
                gpuAcceleration: !0,
                x: "bottom",
                y: "right"
            },
            applyStyle: {
                order: 900,
                enabled: !0,
                fn: function(t) {
                    var e, n;
                    return ae(t.instance.popper, t.styles), e = t.instance.popper, n = t.attributes, 
                    Object.keys(n).forEach(function(t) {
                        !1 !== n[t] ? e.setAttribute(t, n[t]) : e.removeAttribute(t);
                    }), t.arrowElement && Object.keys(t.arrowStyles).length && ae(t.arrowElement, t.arrowStyles), 
                    t;
                },
                onLoad: function(t, e, n, i, r) {
                    var o = zt(r, e, t, n.positionFixed), s = qt(n.placement, o, e, t, n.modifiers.flip.boundariesElement, n.modifiers.flip.padding);
                    return e.setAttribute("x-placement", s), ae(e, {
                        position: n.positionFixed ? "fixed" : "absolute"
                    }), n;
                },
                gpuAcceleration: void 0
            }
        }
    }, ge = function() {
        function o(t, e) {
            var n = this, i = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : {};
            Wt(this, o), this.scheduleUpdate = function() {
                return requestAnimationFrame(n.update);
            }, this.update = wt(this.update.bind(this)), this.options = Bt({}, o.Defaults, i), 
            this.state = {
                isDestroyed: !1,
                isCreated: !1,
                scrollParents: []
            }, this.reference = t && t.jquery ? t[0] : t, this.popper = e && e.jquery ? e[0] : e, 
            this.options.modifiers = {}, Object.keys(Bt({}, o.Defaults.modifiers, i.modifiers)).forEach(function(t) {
                n.options.modifiers[t] = Bt({}, o.Defaults.modifiers[t] || {}, i.modifiers ? i.modifiers[t] : {});
            }), this.modifiers = Object.keys(this.options.modifiers).map(function(t) {
                return Bt({
                    name: t
                }, n.options.modifiers[t]);
            }).sort(function(t, e) {
                return t.order - e.order;
            }), this.modifiers.forEach(function(t) {
                t.enabled && It(t.onLoad) && t.onLoad(n.reference, n.popper, n.options, t, n.state);
            }), this.update();
            var r = this.options.eventsEnabled;
            r && this.enableEventListeners(), this.state.eventsEnabled = r;
        }
        return Ft(o, [ {
            key: "update",
            value: function() {
                return function() {
                    if (!this.state.isDestroyed) {
                        var t = {
                            instance: this,
                            styles: {},
                            arrowStyles: {},
                            attributes: {},
                            flipped: !1,
                            offsets: {}
                        };
                        t.offsets.reference = zt(this.state, this.popper, this.reference, this.options.positionFixed), 
                        t.placement = qt(this.options.placement, t.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding), 
                        t.originalPlacement = t.placement, t.positionFixed = this.options.positionFixed, 
                        t.offsets.popper = Zt(this.popper, t.offsets.reference, t.placement), t.offsets.popper.position = this.options.positionFixed ? "fixed" : "absolute", 
                        t = te(this.modifiers, t), this.state.isCreated ? this.options.onUpdate(t) : (this.state.isCreated = !0, 
                        this.options.onCreate(t));
                    }
                }.call(this);
            }
        }, {
            key: "destroy",
            value: function() {
                return function() {
                    return this.state.isDestroyed = !0, ee(this.modifiers, "applyStyle") && (this.popper.removeAttribute("x-placement"), 
                    this.popper.style.position = "", this.popper.style.top = "", this.popper.style.left = "", 
                    this.popper.style.right = "", this.popper.style.bottom = "", this.popper.style.willChange = "", 
                    this.popper.style[ne("transform")] = ""), this.disableEventListeners(), this.options.removeOnDestroy && this.popper.parentNode.removeChild(this.popper), 
                    this;
                }.call(this);
            }
        }, {
            key: "enableEventListeners",
            value: function() {
                return function() {
                    this.state.eventsEnabled || (this.state = re(this.reference, this.options, this.state, this.scheduleUpdate));
                }.call(this);
            }
        }, {
            key: "disableEventListeners",
            value: function() {
                return oe.call(this);
            }
        } ]), o;
    }();
    ge.Utils = ("undefined" != typeof window ? window : global).PopperUtils, ge.placements = ce, 
    ge.Defaults = pe;
    var me, _e, ve, Ee, ye, be, Te, Ce, we, Ie, De, Ae, Se, Oe, Ne, ke, Le, Pe, xe, je, Me, Re, He, We, Fe, Ue, Be, Ke, Ve, Qe, Ye, Ge, qe, ze, Xe, Je, Ze, $e, tn, en, nn, rn, on, sn, an, ln, cn, fn, hn, un, dn, pn, gn, mn, _n, vn, En, yn, bn, Tn, Cn, wn, In, Dn, An, Sn, On, Nn, kn, Ln, Pn, xn, jn, Mn, Rn, Hn, Wn, Fn, Un, Bn, Kn, Vn, Qn, Yn, Gn, qn, zn, Xn, Jn, Zn, $n, ti, ei, ni, ii, ri, oi, si, ai, li, ci, fi, hi, ui, di, pi, gi, mi, _i, vi, Ei, yi, bi, Ti = (_e = "dropdown", 
    Ee = "." + (ve = "bs.dropdown"), ye = ".data-api", be = (me = e).fn[_e], Te = new RegExp("38|40|27"), 
    Ce = {
        HIDE: "hide" + Ee,
        HIDDEN: "hidden" + Ee,
        SHOW: "show" + Ee,
        SHOWN: "shown" + Ee,
        CLICK: "click" + Ee,
        CLICK_DATA_API: "click" + Ee + ye,
        KEYDOWN_DATA_API: "keydown" + Ee + ye,
        KEYUP_DATA_API: "keyup" + Ee + ye
    }, we = "disabled", Ie = "show", De = "dropup", Ae = "dropright", Se = "dropleft", 
    Oe = "dropdown-menu-right", Ne = "position-static", ke = '[data-toggle="dropdown"]', 
    Le = ".dropdown form", Pe = ".dropdown-menu", xe = ".navbar-nav", je = ".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)", 
    Me = "top-start", Re = "top-end", He = "bottom-start", We = "bottom-end", Fe = "right-start", 
    Ue = "left-start", Be = {
        offset: 0,
        flip: !0,
        boundary: "scrollParent",
        reference: "toggle",
        display: "dynamic"
    }, Ke = {
        offset: "(number|string|function)",
        flip: "boolean",
        boundary: "(string|element)",
        reference: "(string|element)",
        display: "string"
    }, Ve = function() {
        function l(t, e) {
            this._element = t, this._popper = null, this._config = this._getConfig(e), this._menu = this._getMenuElement(), 
            this._inNavbar = this._detectNavbar(), this._addEventListeners();
        }
        var t = l.prototype;
        return t.toggle = function() {
            if (!this._element.disabled && !me(this._element).hasClass(we)) {
                var t = l._getParentFromElement(this._element), e = me(this._menu).hasClass(Ie);
                if (l._clearMenus(), !e) {
                    var n = {
                        relatedTarget: this._element
                    }, i = me.Event(Ce.SHOW, n);
                    if (me(t).trigger(i), !i.isDefaultPrevented()) {
                        if (!this._inNavbar) {
                            if ("undefined" == typeof ge) throw new TypeError("Bootstrap dropdown require Popper.js (https://popper.js.org)");
                            var r = this._element;
                            "parent" === this._config.reference ? r = t : gt.isElement(this._config.reference) && (r = this._config.reference, 
                            "undefined" != typeof this._config.reference.jquery && (r = this._config.reference[0])), 
                            "scrollParent" !== this._config.boundary && me(t).addClass(Ne), this._popper = new ge(r, this._menu, this._getPopperConfig());
                        }
                        "ontouchstart" in document.documentElement && 0 === me(t).closest(xe).length && me(document.body).children().on("mouseover", null, me.noop), 
                        this._element.focus(), this._element.setAttribute("aria-expanded", !0), me(this._menu).toggleClass(Ie), 
                        me(t).toggleClass(Ie).trigger(me.Event(Ce.SHOWN, n));
                    }
                }
            }
        }, t.dispose = function() {
            me.removeData(this._element, ve), me(this._element).off(Ee), this._element = null, 
            (this._menu = null) !== this._popper && (this._popper.destroy(), this._popper = null);
        }, t.update = function() {
            this._inNavbar = this._detectNavbar(), null !== this._popper && this._popper.scheduleUpdate();
        }, t._addEventListeners = function() {
            var e = this;
            me(this._element).on(Ce.CLICK, function(t) {
                t.preventDefault(), t.stopPropagation(), e.toggle();
            });
        }, t._getConfig = function(t) {
            return t = c({}, this.constructor.Default, me(this._element).data(), t), gt.typeCheckConfig(_e, t, this.constructor.DefaultType), 
            t;
        }, t._getMenuElement = function() {
            if (!this._menu) {
                var t = l._getParentFromElement(this._element);
                this._menu = me(t).find(Pe)[0];
            }
            return this._menu;
        }, t._getPlacement = function() {
            var t = me(this._element).parent(), e = He;
            return t.hasClass(De) ? (e = Me, me(this._menu).hasClass(Oe) && (e = Re)) : t.hasClass(Ae) ? e = Fe : t.hasClass(Se) ? e = Ue : me(this._menu).hasClass(Oe) && (e = We), 
            e;
        }, t._detectNavbar = function() {
            return 0 < me(this._element).closest(".navbar").length;
        }, t._getPopperConfig = function() {
            var e = this, t = {};
            "function" == typeof this._config.offset ? t.fn = function(t) {
                return t.offsets = c({}, t.offsets, e._config.offset(t.offsets) || {}), t;
            } : t.offset = this._config.offset;
            var n = {
                placement: this._getPlacement(),
                modifiers: {
                    offset: t,
                    flip: {
                        enabled: this._config.flip
                    },
                    preventOverflow: {
                        boundariesElement: this._config.boundary
                    }
                }
            };
            return "static" === this._config.display && (n.modifiers.applyStyle = {
                enabled: !1
            }), n;
        }, l._jQueryInterface = function(e) {
            return this.each(function() {
                var t = me(this).data(ve);
                if (t || (t = new l(this, "object" == typeof e ? e : null), me(this).data(ve, t)), 
                "string" == typeof e) {
                    if ("undefined" == typeof t[e]) throw new TypeError('No method named "' + e + '"');
                    t[e]();
                }
            });
        }, l._clearMenus = function(t) {
            if (!t || 3 !== t.which && ("keyup" !== t.type || 9 === t.which)) for (var e = me.makeArray(me(ke)), n = 0; n < e.length; n++) {
                var i = l._getParentFromElement(e[n]), r = me(e[n]).data(ve), o = {
                    relatedTarget: e[n]
                };
                if (r) {
                    var s = r._menu;
                    if (me(i).hasClass(Ie) && !(t && ("click" === t.type && /input|textarea/i.test(t.target.tagName) || "keyup" === t.type && 9 === t.which) && me.contains(i, t.target))) {
                        var a = me.Event(Ce.HIDE, o);
                        me(i).trigger(a), a.isDefaultPrevented() || ("ontouchstart" in document.documentElement && me(document.body).children().off("mouseover", null, me.noop), 
                        e[n].setAttribute("aria-expanded", "false"), me(s).removeClass(Ie), me(i).removeClass(Ie).trigger(me.Event(Ce.HIDDEN, o)));
                    }
                }
            }
        }, l._getParentFromElement = function(t) {
            var e, n = gt.getSelectorFromElement(t);
            return n && (e = me(n)[0]), e || t.parentNode;
        }, l._dataApiKeydownHandler = function(t) {
            if ((/input|textarea/i.test(t.target.tagName) ? !(32 === t.which || 27 !== t.which && (40 !== t.which && 38 !== t.which || me(t.target).closest(Pe).length)) : Te.test(t.which)) && (t.preventDefault(), 
            t.stopPropagation(), !this.disabled && !me(this).hasClass(we))) {
                var e = l._getParentFromElement(this), n = me(e).hasClass(Ie);
                if ((n || 27 === t.which && 32 === t.which) && (!n || 27 !== t.which && 32 !== t.which)) {
                    var i = me(e).find(je).get();
                    if (0 !== i.length) {
                        var r = i.indexOf(t.target);
                        38 === t.which && 0 < r && r--, 40 === t.which && r < i.length - 1 && r++, r < 0 && (r = 0), 
                        i[r].focus();
                    }
                } else {
                    if (27 === t.which) {
                        var o = me(e).find(ke)[0];
                        me(o).trigger("focus");
                    }
                    me(this).trigger("click");
                }
            }
        }, s(l, null, [ {
            key: "VERSION",
            get: function() {
                return "4.1.1";
            }
        }, {
            key: "Default",
            get: function() {
                return Be;
            }
        }, {
            key: "DefaultType",
            get: function() {
                return Ke;
            }
        } ]), l;
    }(), me(document).on(Ce.KEYDOWN_DATA_API, ke, Ve._dataApiKeydownHandler).on(Ce.KEYDOWN_DATA_API, Pe, Ve._dataApiKeydownHandler).on(Ce.CLICK_DATA_API + " " + Ce.KEYUP_DATA_API, Ve._clearMenus).on(Ce.CLICK_DATA_API, ke, function(t) {
        t.preventDefault(), t.stopPropagation(), Ve._jQueryInterface.call(me(this), "toggle");
    }).on(Ce.CLICK_DATA_API, Le, function(t) {
        t.stopPropagation();
    }), me.fn[_e] = Ve._jQueryInterface, me.fn[_e].Constructor = Ve, me.fn[_e].noConflict = function() {
        return me.fn[_e] = be, Ve._jQueryInterface;
    }, Ve), Ci = (Ye = "modal", qe = "." + (Ge = "bs.modal"), ze = (Qe = e).fn[Ye], 
    Xe = {
        backdrop: !0,
        keyboard: !0,
        focus: !0,
        show: !0
    }, Je = {
        backdrop: "(boolean|string)",
        keyboard: "boolean",
        focus: "boolean",
        show: "boolean"
    }, Ze = {
        HIDE: "hide" + qe,
        HIDDEN: "hidden" + qe,
        SHOW: "show" + qe,
        SHOWN: "shown" + qe,
        FOCUSIN: "focusin" + qe,
        RESIZE: "resize" + qe,
        CLICK_DISMISS: "click.dismiss" + qe,
        KEYDOWN_DISMISS: "keydown.dismiss" + qe,
        MOUSEUP_DISMISS: "mouseup.dismiss" + qe,
        MOUSEDOWN_DISMISS: "mousedown.dismiss" + qe,
        CLICK_DATA_API: "click" + qe + ".data-api"
    }, $e = "modal-scrollbar-measure", tn = "modal-backdrop", en = "modal-open", nn = "fade", 
    rn = "show", on = {
        DIALOG: ".modal-dialog",
        DATA_TOGGLE: '[data-toggle="modal"]',
        DATA_DISMISS: '[data-dismiss="modal"]',
        FIXED_CONTENT: ".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",
        STICKY_CONTENT: ".sticky-top",
        NAVBAR_TOGGLER: ".navbar-toggler"
    }, sn = function() {
        function r(t, e) {
            this._config = this._getConfig(e), this._element = t, this._dialog = Qe(t).find(on.DIALOG)[0], 
            this._backdrop = null, this._isShown = !1, this._isBodyOverflowing = !1, this._ignoreBackdropClick = !1, 
            this._scrollbarWidth = 0;
        }
        var t = r.prototype;
        return t.toggle = function(t) {
            return this._isShown ? this.hide() : this.show(t);
        }, t.show = function(t) {
            var e = this;
            if (!this._isTransitioning && !this._isShown) {
                Qe(this._element).hasClass(nn) && (this._isTransitioning = !0);
                var n = Qe.Event(Ze.SHOW, {
                    relatedTarget: t
                });
                Qe(this._element).trigger(n), this._isShown || n.isDefaultPrevented() || (this._isShown = !0, 
                this._checkScrollbar(), this._setScrollbar(), this._adjustDialog(), Qe(document.body).addClass(en), 
                this._setEscapeEvent(), this._setResizeEvent(), Qe(this._element).on(Ze.CLICK_DISMISS, on.DATA_DISMISS, function(t) {
                    return e.hide(t);
                }), Qe(this._dialog).on(Ze.MOUSEDOWN_DISMISS, function() {
                    Qe(e._element).one(Ze.MOUSEUP_DISMISS, function(t) {
                        Qe(t.target).is(e._element) && (e._ignoreBackdropClick = !0);
                    });
                }), this._showBackdrop(function() {
                    return e._showElement(t);
                }));
            }
        }, t.hide = function(t) {
            var e = this;
            if (t && t.preventDefault(), !this._isTransitioning && this._isShown) {
                var n = Qe.Event(Ze.HIDE);
                if (Qe(this._element).trigger(n), this._isShown && !n.isDefaultPrevented()) {
                    this._isShown = !1;
                    var i = Qe(this._element).hasClass(nn);
                    if (i && (this._isTransitioning = !0), this._setEscapeEvent(), this._setResizeEvent(), 
                    Qe(document).off(Ze.FOCUSIN), Qe(this._element).removeClass(rn), Qe(this._element).off(Ze.CLICK_DISMISS), 
                    Qe(this._dialog).off(Ze.MOUSEDOWN_DISMISS), i) {
                        var r = gt.getTransitionDurationFromElement(this._element);
                        Qe(this._element).one(gt.TRANSITION_END, function(t) {
                            return e._hideModal(t);
                        }).emulateTransitionEnd(r);
                    } else this._hideModal();
                }
            }
        }, t.dispose = function() {
            Qe.removeData(this._element, Ge), Qe(window, document, this._element, this._backdrop).off(qe), 
            this._config = null, this._element = null, this._dialog = null, this._backdrop = null, 
            this._isShown = null, this._isBodyOverflowing = null, this._ignoreBackdropClick = null, 
            this._scrollbarWidth = null;
        }, t.handleUpdate = function() {
            this._adjustDialog();
        }, t._getConfig = function(t) {
            return t = c({}, Xe, t), gt.typeCheckConfig(Ye, t, Je), t;
        }, t._showElement = function(t) {
            var e = this, n = Qe(this._element).hasClass(nn);
            this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE || document.body.appendChild(this._element), 
            this._element.style.display = "block", this._element.removeAttribute("aria-hidden"), 
            this._element.scrollTop = 0, n && gt.reflow(this._element), Qe(this._element).addClass(rn), 
            this._config.focus && this._enforceFocus();
            var i = Qe.Event(Ze.SHOWN, {
                relatedTarget: t
            }), r = function() {
                e._config.focus && e._element.focus(), e._isTransitioning = !1, Qe(e._element).trigger(i);
            };
            if (n) {
                var o = gt.getTransitionDurationFromElement(this._element);
                Qe(this._dialog).one(gt.TRANSITION_END, r).emulateTransitionEnd(o);
            } else r();
        }, t._enforceFocus = function() {
            var e = this;
            Qe(document).off(Ze.FOCUSIN).on(Ze.FOCUSIN, function(t) {
                document !== t.target && e._element !== t.target && 0 === Qe(e._element).has(t.target).length && e._element.focus();
            });
        }, t._setEscapeEvent = function() {
            var e = this;
            this._isShown && this._config.keyboard ? Qe(this._element).on(Ze.KEYDOWN_DISMISS, function(t) {
                27 === t.which && (t.preventDefault(), e.hide());
            }) : this._isShown || Qe(this._element).off(Ze.KEYDOWN_DISMISS);
        }, t._setResizeEvent = function() {
            var e = this;
            this._isShown ? Qe(window).on(Ze.RESIZE, function(t) {
                return e.handleUpdate(t);
            }) : Qe(window).off(Ze.RESIZE);
        }, t._hideModal = function() {
            var t = this;
            this._element.style.display = "none", this._element.setAttribute("aria-hidden", !0), 
            this._isTransitioning = !1, this._showBackdrop(function() {
                Qe(document.body).removeClass(en), t._resetAdjustments(), t._resetScrollbar(), Qe(t._element).trigger(Ze.HIDDEN);
            });
        }, t._removeBackdrop = function() {
            this._backdrop && (Qe(this._backdrop).remove(), this._backdrop = null);
        }, t._showBackdrop = function(t) {
            var e = this, n = Qe(this._element).hasClass(nn) ? nn : "";
            if (this._isShown && this._config.backdrop) {
                if (this._backdrop = document.createElement("div"), this._backdrop.className = tn, 
                n && Qe(this._backdrop).addClass(n), Qe(this._backdrop).appendTo(document.body), 
                Qe(this._element).on(Ze.CLICK_DISMISS, function(t) {
                    e._ignoreBackdropClick ? e._ignoreBackdropClick = !1 : t.target === t.currentTarget && ("static" === e._config.backdrop ? e._element.focus() : e.hide());
                }), n && gt.reflow(this._backdrop), Qe(this._backdrop).addClass(rn), !t) return;
                if (!n) return void t();
                var i = gt.getTransitionDurationFromElement(this._backdrop);
                Qe(this._backdrop).one(gt.TRANSITION_END, t).emulateTransitionEnd(i);
            } else if (!this._isShown && this._backdrop) {
                Qe(this._backdrop).removeClass(rn);
                var r = function() {
                    e._removeBackdrop(), t && t();
                };
                if (Qe(this._element).hasClass(nn)) {
                    var o = gt.getTransitionDurationFromElement(this._backdrop);
                    Qe(this._backdrop).one(gt.TRANSITION_END, r).emulateTransitionEnd(o);
                } else r();
            } else t && t();
        }, t._adjustDialog = function() {
            var t = this._element.scrollHeight > document.documentElement.clientHeight;
            !this._isBodyOverflowing && t && (this._element.style.paddingLeft = this._scrollbarWidth + "px"), 
            this._isBodyOverflowing && !t && (this._element.style.paddingRight = this._scrollbarWidth + "px");
        }, t._resetAdjustments = function() {
            this._element.style.paddingLeft = "", this._element.style.paddingRight = "";
        }, t._checkScrollbar = function() {
            var t = document.body.getBoundingClientRect();
            this._isBodyOverflowing = t.left + t.right < window.innerWidth, this._scrollbarWidth = this._getScrollbarWidth();
        }, t._setScrollbar = function() {
            var r = this;
            if (this._isBodyOverflowing) {
                Qe(on.FIXED_CONTENT).each(function(t, e) {
                    var n = Qe(e)[0].style.paddingRight, i = Qe(e).css("padding-right");
                    Qe(e).data("padding-right", n).css("padding-right", parseFloat(i) + r._scrollbarWidth + "px");
                }), Qe(on.STICKY_CONTENT).each(function(t, e) {
                    var n = Qe(e)[0].style.marginRight, i = Qe(e).css("margin-right");
                    Qe(e).data("margin-right", n).css("margin-right", parseFloat(i) - r._scrollbarWidth + "px");
                }), Qe(on.NAVBAR_TOGGLER).each(function(t, e) {
                    var n = Qe(e)[0].style.marginRight, i = Qe(e).css("margin-right");
                    Qe(e).data("margin-right", n).css("margin-right", parseFloat(i) + r._scrollbarWidth + "px");
                });
                var t = document.body.style.paddingRight, e = Qe(document.body).css("padding-right");
                Qe(document.body).data("padding-right", t).css("padding-right", parseFloat(e) + this._scrollbarWidth + "px");
            }
        }, t._resetScrollbar = function() {
            Qe(on.FIXED_CONTENT).each(function(t, e) {
                var n = Qe(e).data("padding-right");
                "undefined" != typeof n && Qe(e).css("padding-right", n).removeData("padding-right");
            }), Qe(on.STICKY_CONTENT + ", " + on.NAVBAR_TOGGLER).each(function(t, e) {
                var n = Qe(e).data("margin-right");
                "undefined" != typeof n && Qe(e).css("margin-right", n).removeData("margin-right");
            });
            var t = Qe(document.body).data("padding-right");
            "undefined" != typeof t && Qe(document.body).css("padding-right", t).removeData("padding-right");
        }, t._getScrollbarWidth = function() {
            var t = document.createElement("div");
            t.className = $e, document.body.appendChild(t);
            var e = t.getBoundingClientRect().width - t.clientWidth;
            return document.body.removeChild(t), e;
        }, r._jQueryInterface = function(n, i) {
            return this.each(function() {
                var t = Qe(this).data(Ge), e = c({}, Xe, Qe(this).data(), "object" == typeof n && n ? n : {});
                if (t || (t = new r(this, e), Qe(this).data(Ge, t)), "string" == typeof n) {
                    if ("undefined" == typeof t[n]) throw new TypeError('No method named "' + n + '"');
                    t[n](i);
                } else e.show && t.show(i);
            });
        }, s(r, null, [ {
            key: "VERSION",
            get: function() {
                return "4.1.1";
            }
        }, {
            key: "Default",
            get: function() {
                return Xe;
            }
        } ]), r;
    }(), Qe(document).on(Ze.CLICK_DATA_API, on.DATA_TOGGLE, function(t) {
        var e, n = this, i = gt.getSelectorFromElement(this);
        i && (e = Qe(i)[0]);
        var r = Qe(e).data(Ge) ? "toggle" : c({}, Qe(e).data(), Qe(this).data());
        "A" !== this.tagName && "AREA" !== this.tagName || t.preventDefault();
        var o = Qe(e).one(Ze.SHOW, function(t) {
            t.isDefaultPrevented() || o.one(Ze.HIDDEN, function() {
                Qe(n).is(":visible") && n.focus();
            });
        });
        sn._jQueryInterface.call(Qe(e), r, this);
    }), Qe.fn[Ye] = sn._jQueryInterface, Qe.fn[Ye].Constructor = sn, Qe.fn[Ye].noConflict = function() {
        return Qe.fn[Ye] = ze, sn._jQueryInterface;
    }, sn), wi = (ln = "tooltip", fn = "." + (cn = "bs.tooltip"), hn = (an = e).fn[ln], 
    un = "bs-tooltip", dn = new RegExp("(^|\\s)" + un + "\\S+", "g"), mn = {
        animation: !0,
        template: '<div class="tooltip" role="tooltip"><div class="arrow"></div><div class="tooltip-inner"></div></div>',
        trigger: "hover focus",
        title: "",
        delay: 0,
        html: !(gn = {
            AUTO: "auto",
            TOP: "top",
            RIGHT: "right",
            BOTTOM: "bottom",
            LEFT: "left"
        }),
        selector: !(pn = {
            animation: "boolean",
            template: "string",
            title: "(string|element|function)",
            trigger: "string",
            delay: "(number|object)",
            html: "boolean",
            selector: "(string|boolean)",
            placement: "(string|function)",
            offset: "(number|string)",
            container: "(string|element|boolean)",
            fallbackPlacement: "(string|array)",
            boundary: "(string|element)"
        }),
        placement: "top",
        offset: 0,
        container: !1,
        fallbackPlacement: "flip",
        boundary: "scrollParent"
    }, vn = "out", En = {
        HIDE: "hide" + fn,
        HIDDEN: "hidden" + fn,
        SHOW: (_n = "show") + fn,
        SHOWN: "shown" + fn,
        INSERTED: "inserted" + fn,
        CLICK: "click" + fn,
        FOCUSIN: "focusin" + fn,
        FOCUSOUT: "focusout" + fn,
        MOUSEENTER: "mouseenter" + fn,
        MOUSELEAVE: "mouseleave" + fn
    }, yn = "fade", bn = "show", Tn = ".tooltip-inner", Cn = ".arrow", wn = "hover", 
    In = "focus", Dn = "click", An = "manual", Sn = function() {
        function i(t, e) {
            if ("undefined" == typeof ge) throw new TypeError("Bootstrap tooltips require Popper.js (https://popper.js.org)");
            this._isEnabled = !0, this._timeout = 0, this._hoverState = "", this._activeTrigger = {}, 
            this._popper = null, this.element = t, this.config = this._getConfig(e), this.tip = null, 
            this._setListeners();
        }
        var t = i.prototype;
        return t.enable = function() {
            this._isEnabled = !0;
        }, t.disable = function() {
            this._isEnabled = !1;
        }, t.toggleEnabled = function() {
            this._isEnabled = !this._isEnabled;
        }, t.toggle = function(t) {
            if (this._isEnabled) if (t) {
                var e = this.constructor.DATA_KEY, n = an(t.currentTarget).data(e);
                n || (n = new this.constructor(t.currentTarget, this._getDelegateConfig()), an(t.currentTarget).data(e, n)), 
                n._activeTrigger.click = !n._activeTrigger.click, n._isWithActiveTrigger() ? n._enter(null, n) : n._leave(null, n);
            } else {
                if (an(this.getTipElement()).hasClass(bn)) return void this._leave(null, this);
                this._enter(null, this);
            }
        }, t.dispose = function() {
            clearTimeout(this._timeout), an.removeData(this.element, this.constructor.DATA_KEY), 
            an(this.element).off(this.constructor.EVENT_KEY), an(this.element).closest(".modal").off("hide.bs.modal"), 
            this.tip && an(this.tip).remove(), this._isEnabled = null, this._timeout = null, 
            this._hoverState = null, (this._activeTrigger = null) !== this._popper && this._popper.destroy(), 
            this._popper = null, this.element = null, this.config = null, this.tip = null;
        }, t.show = function() {
            var e = this;
            if ("none" === an(this.element).css("display")) throw new Error("Please use show on visible elements");
            var t = an.Event(this.constructor.Event.SHOW);
            if (this.isWithContent() && this._isEnabled) {
                an(this.element).trigger(t);
                var n = an.contains(this.element.ownerDocument.documentElement, this.element);
                if (t.isDefaultPrevented() || !n) return;
                var i = this.getTipElement(), r = gt.getUID(this.constructor.NAME);
                i.setAttribute("id", r), this.element.setAttribute("aria-describedby", r), this.setContent(), 
                this.config.animation && an(i).addClass(yn);
                var o = "function" == typeof this.config.placement ? this.config.placement.call(this, i, this.element) : this.config.placement, s = this._getAttachment(o);
                this.addAttachmentClass(s);
                var a = !1 === this.config.container ? document.body : an(this.config.container);
                an(i).data(this.constructor.DATA_KEY, this), an.contains(this.element.ownerDocument.documentElement, this.tip) || an(i).appendTo(a), 
                an(this.element).trigger(this.constructor.Event.INSERTED), this._popper = new ge(this.element, i, {
                    placement: s,
                    modifiers: {
                        offset: {
                            offset: this.config.offset
                        },
                        flip: {
                            behavior: this.config.fallbackPlacement
                        },
                        arrow: {
                            element: Cn
                        },
                        preventOverflow: {
                            boundariesElement: this.config.boundary
                        }
                    },
                    onCreate: function(t) {
                        t.originalPlacement !== t.placement && e._handlePopperPlacementChange(t);
                    },
                    onUpdate: function(t) {
                        e._handlePopperPlacementChange(t);
                    }
                }), an(i).addClass(bn), "ontouchstart" in document.documentElement && an(document.body).children().on("mouseover", null, an.noop);
                var l = function() {
                    e.config.animation && e._fixTransition();
                    var t = e._hoverState;
                    e._hoverState = null, an(e.element).trigger(e.constructor.Event.SHOWN), t === vn && e._leave(null, e);
                };
                if (an(this.tip).hasClass(yn)) {
                    var c = gt.getTransitionDurationFromElement(this.tip);
                    an(this.tip).one(gt.TRANSITION_END, l).emulateTransitionEnd(c);
                } else l();
            }
        }, t.hide = function(t) {
            var e = this, n = this.getTipElement(), i = an.Event(this.constructor.Event.HIDE), r = function() {
                e._hoverState !== _n && n.parentNode && n.parentNode.removeChild(n), e._cleanTipClass(), 
                e.element.removeAttribute("aria-describedby"), an(e.element).trigger(e.constructor.Event.HIDDEN), 
                null !== e._popper && e._popper.destroy(), t && t();
            };
            if (an(this.element).trigger(i), !i.isDefaultPrevented()) {
                if (an(n).removeClass(bn), "ontouchstart" in document.documentElement && an(document.body).children().off("mouseover", null, an.noop), 
                this._activeTrigger[Dn] = !1, this._activeTrigger[In] = !1, this._activeTrigger[wn] = !1, 
                an(this.tip).hasClass(yn)) {
                    var o = gt.getTransitionDurationFromElement(n);
                    an(n).one(gt.TRANSITION_END, r).emulateTransitionEnd(o);
                } else r();
                this._hoverState = "";
            }
        }, t.update = function() {
            null !== this._popper && this._popper.scheduleUpdate();
        }, t.isWithContent = function() {
            return Boolean(this.getTitle());
        }, t.addAttachmentClass = function(t) {
            an(this.getTipElement()).addClass(un + "-" + t);
        }, t.getTipElement = function() {
            return this.tip = this.tip || an(this.config.template)[0], this.tip;
        }, t.setContent = function() {
            var t = an(this.getTipElement());
            this.setElementContent(t.find(Tn), this.getTitle()), t.removeClass(yn + " " + bn);
        }, t.setElementContent = function(t, e) {
            var n = this.config.html;
            "object" == typeof e && (e.nodeType || e.jquery) ? n ? an(e).parent().is(t) || t.empty().append(e) : t.text(an(e).text()) : t[n ? "html" : "text"](e);
        }, t.getTitle = function() {
            var t = this.element.getAttribute("data-original-title");
            return t || (t = "function" == typeof this.config.title ? this.config.title.call(this.element) : this.config.title), 
            t;
        }, t._getAttachment = function(t) {
            return gn[t.toUpperCase()];
        }, t._setListeners = function() {
            var i = this;
            this.config.trigger.split(" ").forEach(function(t) {
                if ("click" === t) an(i.element).on(i.constructor.Event.CLICK, i.config.selector, function(t) {
                    return i.toggle(t);
                }); else if (t !== An) {
                    var e = t === wn ? i.constructor.Event.MOUSEENTER : i.constructor.Event.FOCUSIN, n = t === wn ? i.constructor.Event.MOUSELEAVE : i.constructor.Event.FOCUSOUT;
                    an(i.element).on(e, i.config.selector, function(t) {
                        return i._enter(t);
                    }).on(n, i.config.selector, function(t) {
                        return i._leave(t);
                    });
                }
                an(i.element).closest(".modal").on("hide.bs.modal", function() {
                    return i.hide();
                });
            }), this.config.selector ? this.config = c({}, this.config, {
                trigger: "manual",
                selector: ""
            }) : this._fixTitle();
        }, t._fixTitle = function() {
            var t = typeof this.element.getAttribute("data-original-title");
            (this.element.getAttribute("title") || "string" !== t) && (this.element.setAttribute("data-original-title", this.element.getAttribute("title") || ""), 
            this.element.setAttribute("title", ""));
        }, t._enter = function(t, e) {
            var n = this.constructor.DATA_KEY;
            (e = e || an(t.currentTarget).data(n)) || (e = new this.constructor(t.currentTarget, this._getDelegateConfig()), 
            an(t.currentTarget).data(n, e)), t && (e._activeTrigger["focusin" === t.type ? In : wn] = !0), 
            an(e.getTipElement()).hasClass(bn) || e._hoverState === _n ? e._hoverState = _n : (clearTimeout(e._timeout), 
            e._hoverState = _n, e.config.delay && e.config.delay.show ? e._timeout = setTimeout(function() {
                e._hoverState === _n && e.show();
            }, e.config.delay.show) : e.show());
        }, t._leave = function(t, e) {
            var n = this.constructor.DATA_KEY;
            (e = e || an(t.currentTarget).data(n)) || (e = new this.constructor(t.currentTarget, this._getDelegateConfig()), 
            an(t.currentTarget).data(n, e)), t && (e._activeTrigger["focusout" === t.type ? In : wn] = !1), 
            e._isWithActiveTrigger() || (clearTimeout(e._timeout), e._hoverState = vn, e.config.delay && e.config.delay.hide ? e._timeout = setTimeout(function() {
                e._hoverState === vn && e.hide();
            }, e.config.delay.hide) : e.hide());
        }, t._isWithActiveTrigger = function() {
            for (var t in this._activeTrigger) if (this._activeTrigger[t]) return !0;
            return !1;
        }, t._getConfig = function(t) {
            return "number" == typeof (t = c({}, this.constructor.Default, an(this.element).data(), "object" == typeof t && t ? t : {})).delay && (t.delay = {
                show: t.delay,
                hide: t.delay
            }), "number" == typeof t.title && (t.title = t.title.toString()), "number" == typeof t.content && (t.content = t.content.toString()), 
            gt.typeCheckConfig(ln, t, this.constructor.DefaultType), t;
        }, t._getDelegateConfig = function() {
            var t = {};
            if (this.config) for (var e in this.config) this.constructor.Default[e] !== this.config[e] && (t[e] = this.config[e]);
            return t;
        }, t._cleanTipClass = function() {
            var t = an(this.getTipElement()), e = t.attr("class").match(dn);
            null !== e && 0 < e.length && t.removeClass(e.join(""));
        }, t._handlePopperPlacementChange = function(t) {
            this._cleanTipClass(), this.addAttachmentClass(this._getAttachment(t.placement));
        }, t._fixTransition = function() {
            var t = this.getTipElement(), e = this.config.animation;
            null === t.getAttribute("x-placement") && (an(t).removeClass(yn), this.config.animation = !1, 
            this.hide(), this.show(), this.config.animation = e);
        }, i._jQueryInterface = function(n) {
            return this.each(function() {
                var t = an(this).data(cn), e = "object" == typeof n && n;
                if ((t || !/dispose|hide/.test(n)) && (t || (t = new i(this, e), an(this).data(cn, t)), 
                "string" == typeof n)) {
                    if ("undefined" == typeof t[n]) throw new TypeError('No method named "' + n + '"');
                    t[n]();
                }
            });
        }, s(i, null, [ {
            key: "VERSION",
            get: function() {
                return "4.1.1";
            }
        }, {
            key: "Default",
            get: function() {
                return mn;
            }
        }, {
            key: "NAME",
            get: function() {
                return ln;
            }
        }, {
            key: "DATA_KEY",
            get: function() {
                return cn;
            }
        }, {
            key: "Event",
            get: function() {
                return En;
            }
        }, {
            key: "EVENT_KEY",
            get: function() {
                return fn;
            }
        }, {
            key: "DefaultType",
            get: function() {
                return pn;
            }
        } ]), i;
    }(), an.fn[ln] = Sn._jQueryInterface, an.fn[ln].Constructor = Sn, an.fn[ln].noConflict = function() {
        return an.fn[ln] = hn, Sn._jQueryInterface;
    }, Sn), Ii = (Nn = "popover", Ln = "." + (kn = "bs.popover"), Pn = (On = e).fn[Nn], 
    xn = "bs-popover", jn = new RegExp("(^|\\s)" + xn + "\\S+", "g"), Mn = c({}, wi.Default, {
        placement: "right",
        trigger: "click",
        content: "",
        template: '<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'
    }), Rn = c({}, wi.DefaultType, {
        content: "(string|element|function)"
    }), Hn = "fade", Fn = ".popover-header", Un = ".popover-body", Bn = {
        HIDE: "hide" + Ln,
        HIDDEN: "hidden" + Ln,
        SHOW: (Wn = "show") + Ln,
        SHOWN: "shown" + Ln,
        INSERTED: "inserted" + Ln,
        CLICK: "click" + Ln,
        FOCUSIN: "focusin" + Ln,
        FOCUSOUT: "focusout" + Ln,
        MOUSEENTER: "mouseenter" + Ln,
        MOUSELEAVE: "mouseleave" + Ln
    }, Kn = function(t) {
        var e, n;
        function i() {
            return t.apply(this, arguments) || this;
        }
        n = t, (e = i).prototype = Object.create(n.prototype), (e.prototype.constructor = e).__proto__ = n;
        var r = i.prototype;
        return r.isWithContent = function() {
            return this.getTitle() || this._getContent();
        }, r.addAttachmentClass = function(t) {
            On(this.getTipElement()).addClass(xn + "-" + t);
        }, r.getTipElement = function() {
            return this.tip = this.tip || On(this.config.template)[0], this.tip;
        }, r.setContent = function() {
            var t = On(this.getTipElement());
            this.setElementContent(t.find(Fn), this.getTitle());
            var e = this._getContent();
            "function" == typeof e && (e = e.call(this.element)), this.setElementContent(t.find(Un), e), 
            t.removeClass(Hn + " " + Wn);
        }, r._getContent = function() {
            return this.element.getAttribute("data-content") || this.config.content;
        }, r._cleanTipClass = function() {
            var t = On(this.getTipElement()), e = t.attr("class").match(jn);
            null !== e && 0 < e.length && t.removeClass(e.join(""));
        }, i._jQueryInterface = function(n) {
            return this.each(function() {
                var t = On(this).data(kn), e = "object" == typeof n ? n : null;
                if ((t || !/destroy|hide/.test(n)) && (t || (t = new i(this, e), On(this).data(kn, t)), 
                "string" == typeof n)) {
                    if ("undefined" == typeof t[n]) throw new TypeError('No method named "' + n + '"');
                    t[n]();
                }
            });
        }, s(i, null, [ {
            key: "VERSION",
            get: function() {
                return "4.1.1";
            }
        }, {
            key: "Default",
            get: function() {
                return Mn;
            }
        }, {
            key: "NAME",
            get: function() {
                return Nn;
            }
        }, {
            key: "DATA_KEY",
            get: function() {
                return kn;
            }
        }, {
            key: "Event",
            get: function() {
                return Bn;
            }
        }, {
            key: "EVENT_KEY",
            get: function() {
                return Ln;
            }
        }, {
            key: "DefaultType",
            get: function() {
                return Rn;
            }
        } ]), i;
    }(wi), On.fn[Nn] = Kn._jQueryInterface, On.fn[Nn].Constructor = Kn, On.fn[Nn].noConflict = function() {
        return On.fn[Nn] = Pn, Kn._jQueryInterface;
    }, Kn), Di = (Qn = "scrollspy", Gn = "." + (Yn = "bs.scrollspy"), qn = (Vn = e).fn[Qn], 
    zn = {
        offset: 10,
        method: "auto",
        target: ""
    }, Xn = {
        offset: "number",
        method: "string",
        target: "(string|element)"
    }, Jn = {
        ACTIVATE: "activate" + Gn,
        SCROLL: "scroll" + Gn,
        LOAD_DATA_API: "load" + Gn + ".data-api"
    }, Zn = "dropdown-item", $n = "active", ti = {
        DATA_SPY: '[data-spy="scroll"]',
        ACTIVE: ".active",
        NAV_LIST_GROUP: ".nav, .list-group",
        NAV_LINKS: ".nav-link",
        NAV_ITEMS: ".nav-item",
        LIST_ITEMS: ".list-group-item",
        DROPDOWN: ".dropdown",
        DROPDOWN_ITEMS: ".dropdown-item",
        DROPDOWN_TOGGLE: ".dropdown-toggle"
    }, ei = "offset", ni = "position", ii = function() {
        function n(t, e) {
            var n = this;
            this._element = t, this._scrollElement = "BODY" === t.tagName ? window : t, this._config = this._getConfig(e), 
            this._selector = this._config.target + " " + ti.NAV_LINKS + "," + this._config.target + " " + ti.LIST_ITEMS + "," + this._config.target + " " + ti.DROPDOWN_ITEMS, 
            this._offsets = [], this._targets = [], this._activeTarget = null, this._scrollHeight = 0, 
            Vn(this._scrollElement).on(Jn.SCROLL, function(t) {
                return n._process(t);
            }), this.refresh(), this._process();
        }
        var t = n.prototype;
        return t.refresh = function() {
            var e = this, t = this._scrollElement === this._scrollElement.window ? ei : ni, r = "auto" === this._config.method ? t : this._config.method, o = r === ni ? this._getScrollTop() : 0;
            this._offsets = [], this._targets = [], this._scrollHeight = this._getScrollHeight(), 
            Vn.makeArray(Vn(this._selector)).map(function(t) {
                var e, n = gt.getSelectorFromElement(t);
                if (n && (e = Vn(n)[0]), e) {
                    var i = e.getBoundingClientRect();
                    if (i.width || i.height) return [ Vn(e)[r]().top + o, n ];
                }
                return null;
            }).filter(function(t) {
                return t;
            }).sort(function(t, e) {
                return t[0] - e[0];
            }).forEach(function(t) {
                e._offsets.push(t[0]), e._targets.push(t[1]);
            });
        }, t.dispose = function() {
            Vn.removeData(this._element, Yn), Vn(this._scrollElement).off(Gn), this._element = null, 
            this._scrollElement = null, this._config = null, this._selector = null, this._offsets = null, 
            this._targets = null, this._activeTarget = null, this._scrollHeight = null;
        }, t._getConfig = function(t) {
            if ("string" != typeof (t = c({}, zn, "object" == typeof t && t ? t : {})).target) {
                var e = Vn(t.target).attr("id");
                e || (e = gt.getUID(Qn), Vn(t.target).attr("id", e)), t.target = "#" + e;
            }
            return gt.typeCheckConfig(Qn, t, Xn), t;
        }, t._getScrollTop = function() {
            return this._scrollElement === window ? this._scrollElement.pageYOffset : this._scrollElement.scrollTop;
        }, t._getScrollHeight = function() {
            return this._scrollElement.scrollHeight || Math.max(document.body.scrollHeight, document.documentElement.scrollHeight);
        }, t._getOffsetHeight = function() {
            return this._scrollElement === window ? window.innerHeight : this._scrollElement.getBoundingClientRect().height;
        }, t._process = function() {
            var t = this._getScrollTop() + this._config.offset, e = this._getScrollHeight(), n = this._config.offset + e - this._getOffsetHeight();
            if (this._scrollHeight !== e && this.refresh(), n <= t) {
                var i = this._targets[this._targets.length - 1];
                this._activeTarget !== i && this._activate(i);
            } else {
                if (this._activeTarget && t < this._offsets[0] && 0 < this._offsets[0]) return this._activeTarget = null, 
                void this._clear();
                for (var r = this._offsets.length; r--; ) {
                    this._activeTarget !== this._targets[r] && t >= this._offsets[r] && ("undefined" == typeof this._offsets[r + 1] || t < this._offsets[r + 1]) && this._activate(this._targets[r]);
                }
            }
        }, t._activate = function(e) {
            this._activeTarget = e, this._clear();
            var t = this._selector.split(",");
            t = t.map(function(t) {
                return t + '[data-target="' + e + '"],' + t + '[href="' + e + '"]';
            });
            var n = Vn(t.join(","));
            n.hasClass(Zn) ? (n.closest(ti.DROPDOWN).find(ti.DROPDOWN_TOGGLE).addClass($n), 
            n.addClass($n)) : (n.addClass($n), n.parents(ti.NAV_LIST_GROUP).prev(ti.NAV_LINKS + ", " + ti.LIST_ITEMS).addClass($n), 
            n.parents(ti.NAV_LIST_GROUP).prev(ti.NAV_ITEMS).children(ti.NAV_LINKS).addClass($n)), 
            Vn(this._scrollElement).trigger(Jn.ACTIVATE, {
                relatedTarget: e
            });
        }, t._clear = function() {
            Vn(this._selector).filter(ti.ACTIVE).removeClass($n);
        }, n._jQueryInterface = function(e) {
            return this.each(function() {
                var t = Vn(this).data(Yn);
                if (t || (t = new n(this, "object" == typeof e && e), Vn(this).data(Yn, t)), "string" == typeof e) {
                    if ("undefined" == typeof t[e]) throw new TypeError('No method named "' + e + '"');
                    t[e]();
                }
            });
        }, s(n, null, [ {
            key: "VERSION",
            get: function() {
                return "4.1.1";
            }
        }, {
            key: "Default",
            get: function() {
                return zn;
            }
        } ]), n;
    }(), Vn(window).on(Jn.LOAD_DATA_API, function() {
        for (var t = Vn.makeArray(Vn(ti.DATA_SPY)), e = t.length; e--; ) {
            var n = Vn(t[e]);
            ii._jQueryInterface.call(n, n.data());
        }
    }), Vn.fn[Qn] = ii._jQueryInterface, Vn.fn[Qn].Constructor = ii, Vn.fn[Qn].noConflict = function() {
        return Vn.fn[Qn] = qn, ii._jQueryInterface;
    }, ii), Ai = (si = "." + (oi = "bs.tab"), ai = (ri = e).fn.tab, li = {
        HIDE: "hide" + si,
        HIDDEN: "hidden" + si,
        SHOW: "show" + si,
        SHOWN: "shown" + si,
        CLICK_DATA_API: "click" + si + ".data-api"
    }, ci = "dropdown-menu", fi = "active", hi = "disabled", ui = "fade", di = "show", 
    pi = ".dropdown", gi = ".nav, .list-group", mi = ".active", _i = "> li > .active", 
    vi = '[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]', Ei = ".dropdown-toggle", 
    yi = "> .dropdown-menu .active", bi = function() {
        function i(t) {
            this._element = t;
        }
        var t = i.prototype;
        return t.show = function() {
            var n = this;
            if (!(this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE && ri(this._element).hasClass(fi) || ri(this._element).hasClass(hi))) {
                var t, i, e = ri(this._element).closest(gi)[0], r = gt.getSelectorFromElement(this._element);
                if (e) {
                    var o = "UL" === e.nodeName ? _i : mi;
                    i = (i = ri.makeArray(ri(e).find(o)))[i.length - 1];
                }
                var s = ri.Event(li.HIDE, {
                    relatedTarget: this._element
                }), a = ri.Event(li.SHOW, {
                    relatedTarget: i
                });
                if (i && ri(i).trigger(s), ri(this._element).trigger(a), !a.isDefaultPrevented() && !s.isDefaultPrevented()) {
                    r && (t = ri(r)[0]), this._activate(this._element, e);
                    var l = function() {
                        var t = ri.Event(li.HIDDEN, {
                            relatedTarget: n._element
                        }), e = ri.Event(li.SHOWN, {
                            relatedTarget: i
                        });
                        ri(i).trigger(t), ri(n._element).trigger(e);
                    };
                    t ? this._activate(t, t.parentNode, l) : l();
                }
            }
        }, t.dispose = function() {
            ri.removeData(this._element, oi), this._element = null;
        }, t._activate = function(t, e, n) {
            var i = this, r = ("UL" === e.nodeName ? ri(e).find(_i) : ri(e).children(mi))[0], o = n && r && ri(r).hasClass(ui), s = function() {
                return i._transitionComplete(t, r, n);
            };
            if (r && o) {
                var a = gt.getTransitionDurationFromElement(r);
                ri(r).one(gt.TRANSITION_END, s).emulateTransitionEnd(a);
            } else s();
        }, t._transitionComplete = function(t, e, n) {
            if (e) {
                ri(e).removeClass(di + " " + fi);
                var i = ri(e.parentNode).find(yi)[0];
                i && ri(i).removeClass(fi), "tab" === e.getAttribute("role") && e.setAttribute("aria-selected", !1);
            }
            if (ri(t).addClass(fi), "tab" === t.getAttribute("role") && t.setAttribute("aria-selected", !0), 
            gt.reflow(t), ri(t).addClass(di), t.parentNode && ri(t.parentNode).hasClass(ci)) {
                var r = ri(t).closest(pi)[0];
                r && ri(r).find(Ei).addClass(fi), t.setAttribute("aria-expanded", !0);
            }
            n && n();
        }, i._jQueryInterface = function(n) {
            return this.each(function() {
                var t = ri(this), e = t.data(oi);
                if (e || (e = new i(this), t.data(oi, e)), "string" == typeof n) {
                    if ("undefined" == typeof e[n]) throw new TypeError('No method named "' + n + '"');
                    e[n]();
                }
            });
        }, s(i, null, [ {
            key: "VERSION",
            get: function() {
                return "4.1.1";
            }
        } ]), i;
    }(), ri(document).on(li.CLICK_DATA_API, vi, function(t) {
        t.preventDefault(), bi._jQueryInterface.call(ri(this), "show");
    }), ri.fn.tab = bi._jQueryInterface, ri.fn.tab.Constructor = bi, ri.fn.tab.noConflict = function() {
        return ri.fn.tab = ai, bi._jQueryInterface;
    }, bi);
    !function(t) {
        if ("undefined" == typeof t) throw new TypeError("Bootstrap's JavaScript requires jQuery. jQuery must be included before Bootstrap's JavaScript.");
        var e = t.fn.jquery.split(" ")[0].split(".");
        if (e[0] < 2 && e[1] < 9 || 1 === e[0] && 9 === e[1] && e[2] < 1 || 4 <= e[0]) throw new Error("Bootstrap's JavaScript requires at least jQuery v1.9.1 but less than v4.0.0");
    }(e), t.Util = gt, t.Alert = mt, t.Button = _t, t.Carousel = vt, t.Collapse = Et, 
    t.Dropdown = Ti, t.Modal = Ci, t.Popover = Ii, t.Scrollspy = Di, t.Tab = Ai, t.Tooltip = wi, 
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
});

(function(global, factory) {
    typeof exports === "object" && typeof module !== "undefined" ? factory(exports, require("jquery"), require("popper.js")) : typeof define === "function" && define.amd ? define([ "exports", "jquery", "popper.js" ], factory) : factory(global.bootstrap = {}, global.jQuery, global.Popper);
})(this, function(exports, $, Popper) {
    "use strict";
    $ = $ && $.hasOwnProperty("default") ? $["default"] : $;
    Popper = Popper && Popper.hasOwnProperty("default") ? Popper["default"] : Popper;
    function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
    }
    function _defineProperty(obj, key, value) {
        if (key in obj) {
            Object.defineProperty(obj, key, {
                value: value,
                enumerable: true,
                configurable: true,
                writable: true
            });
        } else {
            obj[key] = value;
        }
        return obj;
    }
    function _objectSpread(target) {
        for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i] != null ? arguments[i] : {};
            var ownKeys = Object.keys(source);
            if (typeof Object.getOwnPropertySymbols === "function") {
                ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                    return Object.getOwnPropertyDescriptor(source, sym).enumerable;
                }));
            }
            ownKeys.forEach(function(key) {
                _defineProperty(target, key, source[key]);
            });
        }
        return target;
    }
    function _inheritsLoose(subClass, superClass) {
        subClass.prototype = Object.create(superClass.prototype);
        subClass.prototype.constructor = subClass;
        subClass.__proto__ = superClass;
    }
    var Util = function($$$1) {
        var TRANSITION_END = "transitionend";
        var MAX_UID = 1e6;
        var MILLISECONDS_MULTIPLIER = 1e3;
        function toType(obj) {
            return {}.toString.call(obj).match(/\s([a-z]+)/i)[1].toLowerCase();
        }
        function getSpecialTransitionEndEvent() {
            return {
                bindType: TRANSITION_END,
                delegateType: TRANSITION_END,
                handle: function handle(event) {
                    if ($$$1(event.target).is(this)) {
                        return event.handleObj.handler.apply(this, arguments);
                    }
                    return undefined;
                }
            };
        }
        function transitionEndEmulator(duration) {
            var _this = this;
            var called = false;
            $$$1(this).one(Util.TRANSITION_END, function() {
                called = true;
            });
            setTimeout(function() {
                if (!called) {
                    Util.triggerTransitionEnd(_this);
                }
            }, duration);
            return this;
        }
        function setTransitionEndSupport() {
            $$$1.fn.emulateTransitionEnd = transitionEndEmulator;
            $$$1.event.special[Util.TRANSITION_END] = getSpecialTransitionEndEvent();
        }
        var Util = {
            TRANSITION_END: "bsTransitionEnd",
            getUID: function getUID(prefix) {
                do {
                    prefix += ~~(Math.random() * MAX_UID);
                } while (document.getElementById(prefix));
                return prefix;
            },
            getSelectorFromElement: function getSelectorFromElement(element) {
                var selector = element.getAttribute("data-target");
                if (!selector || selector === "#") {
                    selector = element.getAttribute("href") || "";
                }
                try {
                    var $selector = $$$1(document).find(selector);
                    return $selector.length > 0 ? selector : null;
                } catch (err) {
                    return null;
                }
            },
            getTransitionDurationFromElement: function getTransitionDurationFromElement(element) {
                if (!element) {
                    return 0;
                }
                var transitionDuration = $$$1(element).css("transition-duration");
                var floatTransitionDuration = parseFloat(transitionDuration);
                if (!floatTransitionDuration) {
                    return 0;
                }
                transitionDuration = transitionDuration.split(",")[0];
                return parseFloat(transitionDuration) * MILLISECONDS_MULTIPLIER;
            },
            reflow: function reflow(element) {
                return element.offsetHeight;
            },
            triggerTransitionEnd: function triggerTransitionEnd(element) {
                $$$1(element).trigger(TRANSITION_END);
            },
            supportsTransitionEnd: function supportsTransitionEnd() {
                return Boolean(TRANSITION_END);
            },
            isElement: function isElement(obj) {
                return (obj[0] || obj).nodeType;
            },
            typeCheckConfig: function typeCheckConfig(componentName, config, configTypes) {
                for (var property in configTypes) {
                    if (Object.prototype.hasOwnProperty.call(configTypes, property)) {
                        var expectedTypes = configTypes[property];
                        var value = config[property];
                        var valueType = value && Util.isElement(value) ? "element" : toType(value);
                        if (!new RegExp(expectedTypes).test(valueType)) {
                            throw new Error(componentName.toUpperCase() + ": " + ('Option "' + property + '" provided type "' + valueType + '" ') + ('but expected type "' + expectedTypes + '".'));
                        }
                    }
                }
            }
        };
        setTransitionEndSupport();
        return Util;
    }($);
    var Alert = function($$$1) {
        var NAME = "alert";
        var VERSION = "4.1.1";
        var DATA_KEY = "bs.alert";
        var EVENT_KEY = "." + DATA_KEY;
        var DATA_API_KEY = ".data-api";
        var JQUERY_NO_CONFLICT = $$$1.fn[NAME];
        var Selector = {
            DISMISS: '[data-dismiss="alert"]'
        };
        var Event = {
            CLOSE: "close" + EVENT_KEY,
            CLOSED: "closed" + EVENT_KEY,
            CLICK_DATA_API: "click" + EVENT_KEY + DATA_API_KEY
        };
        var ClassName = {
            ALERT: "alert",
            FADE: "fade",
            SHOW: "show"
        };
        var Alert = function() {
            function Alert(element) {
                this._element = element;
            }
            var _proto = Alert.prototype;
            _proto.close = function close(element) {
                var rootElement = this._element;
                if (element) {
                    rootElement = this._getRootElement(element);
                }
                var customEvent = this._triggerCloseEvent(rootElement);
                if (customEvent.isDefaultPrevented()) {
                    return;
                }
                this._removeElement(rootElement);
            };
            _proto.dispose = function dispose() {
                $$$1.removeData(this._element, DATA_KEY);
                this._element = null;
            };
            _proto._getRootElement = function _getRootElement(element) {
                var selector = Util.getSelectorFromElement(element);
                var parent = false;
                if (selector) {
                    parent = $$$1(selector)[0];
                }
                if (!parent) {
                    parent = $$$1(element).closest("." + ClassName.ALERT)[0];
                }
                return parent;
            };
            _proto._triggerCloseEvent = function _triggerCloseEvent(element) {
                var closeEvent = $$$1.Event(Event.CLOSE);
                $$$1(element).trigger(closeEvent);
                return closeEvent;
            };
            _proto._removeElement = function _removeElement(element) {
                var _this = this;
                $$$1(element).removeClass(ClassName.SHOW);
                if (!$$$1(element).hasClass(ClassName.FADE)) {
                    this._destroyElement(element);
                    return;
                }
                var transitionDuration = Util.getTransitionDurationFromElement(element);
                $$$1(element).one(Util.TRANSITION_END, function(event) {
                    return _this._destroyElement(element, event);
                }).emulateTransitionEnd(transitionDuration);
            };
            _proto._destroyElement = function _destroyElement(element) {
                $$$1(element).detach().trigger(Event.CLOSED).remove();
            };
            Alert._jQueryInterface = function _jQueryInterface(config) {
                return this.each(function() {
                    var $element = $$$1(this);
                    var data = $element.data(DATA_KEY);
                    if (!data) {
                        data = new Alert(this);
                        $element.data(DATA_KEY, data);
                    }
                    if (config === "close") {
                        data[config](this);
                    }
                });
            };
            Alert._handleDismiss = function _handleDismiss(alertInstance) {
                return function(event) {
                    if (event) {
                        event.preventDefault();
                    }
                    alertInstance.close(this);
                };
            };
            _createClass(Alert, null, [ {
                key: "VERSION",
                get: function get() {
                    return VERSION;
                }
            } ]);
            return Alert;
        }();
        $$$1(document).on(Event.CLICK_DATA_API, Selector.DISMISS, Alert._handleDismiss(new Alert()));
        $$$1.fn[NAME] = Alert._jQueryInterface;
        $$$1.fn[NAME].Constructor = Alert;
        $$$1.fn[NAME].noConflict = function() {
            $$$1.fn[NAME] = JQUERY_NO_CONFLICT;
            return Alert._jQueryInterface;
        };
        return Alert;
    }($);
    var Button = function($$$1) {
        var NAME = "button";
        var VERSION = "4.1.1";
        var DATA_KEY = "bs.button";
        var EVENT_KEY = "." + DATA_KEY;
        var DATA_API_KEY = ".data-api";
        var JQUERY_NO_CONFLICT = $$$1.fn[NAME];
        var ClassName = {
            ACTIVE: "active",
            BUTTON: "btn",
            FOCUS: "focus"
        };
        var Selector = {
            DATA_TOGGLE_CARROT: '[data-toggle^="button"]',
            DATA_TOGGLE: '[data-toggle="buttons"]',
            INPUT: "input",
            ACTIVE: ".active",
            BUTTON: ".btn"
        };
        var Event = {
            CLICK_DATA_API: "click" + EVENT_KEY + DATA_API_KEY,
            FOCUS_BLUR_DATA_API: "focus" + EVENT_KEY + DATA_API_KEY + " " + ("blur" + EVENT_KEY + DATA_API_KEY)
        };
        var Button = function() {
            function Button(element) {
                this._element = element;
            }
            var _proto = Button.prototype;
            _proto.toggle = function toggle() {
                var triggerChangeEvent = true;
                var addAriaPressed = true;
                var rootElement = $$$1(this._element).closest(Selector.DATA_TOGGLE)[0];
                if (rootElement) {
                    var input = $$$1(this._element).find(Selector.INPUT)[0];
                    if (input) {
                        if (input.type === "radio") {
                            if (input.checked && $$$1(this._element).hasClass(ClassName.ACTIVE)) {
                                triggerChangeEvent = false;
                            } else {
                                var activeElement = $$$1(rootElement).find(Selector.ACTIVE)[0];
                                if (activeElement) {
                                    $$$1(activeElement).removeClass(ClassName.ACTIVE);
                                }
                            }
                        }
                        if (triggerChangeEvent) {
                            if (input.hasAttribute("disabled") || rootElement.hasAttribute("disabled") || input.classList.contains("disabled") || rootElement.classList.contains("disabled")) {
                                return;
                            }
                            input.checked = !$$$1(this._element).hasClass(ClassName.ACTIVE);
                            $$$1(input).trigger("change");
                        }
                        input.focus();
                        addAriaPressed = false;
                    }
                }
                if (addAriaPressed) {
                    this._element.setAttribute("aria-pressed", !$$$1(this._element).hasClass(ClassName.ACTIVE));
                }
                if (triggerChangeEvent) {
                    $$$1(this._element).toggleClass(ClassName.ACTIVE);
                }
            };
            _proto.dispose = function dispose() {
                $$$1.removeData(this._element, DATA_KEY);
                this._element = null;
            };
            Button._jQueryInterface = function _jQueryInterface(config) {
                return this.each(function() {
                    var data = $$$1(this).data(DATA_KEY);
                    if (!data) {
                        data = new Button(this);
                        $$$1(this).data(DATA_KEY, data);
                    }
                    if (config === "toggle") {
                        data[config]();
                    }
                });
            };
            _createClass(Button, null, [ {
                key: "VERSION",
                get: function get() {
                    return VERSION;
                }
            } ]);
            return Button;
        }();
        $$$1(document).on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE_CARROT, function(event) {
            event.preventDefault();
            var button = event.target;
            if (!$$$1(button).hasClass(ClassName.BUTTON)) {
                button = $$$1(button).closest(Selector.BUTTON);
            }
            Button._jQueryInterface.call($$$1(button), "toggle");
        }).on(Event.FOCUS_BLUR_DATA_API, Selector.DATA_TOGGLE_CARROT, function(event) {
            var button = $$$1(event.target).closest(Selector.BUTTON)[0];
            $$$1(button).toggleClass(ClassName.FOCUS, /^focus(in)?$/.test(event.type));
        });
        $$$1.fn[NAME] = Button._jQueryInterface;
        $$$1.fn[NAME].Constructor = Button;
        $$$1.fn[NAME].noConflict = function() {
            $$$1.fn[NAME] = JQUERY_NO_CONFLICT;
            return Button._jQueryInterface;
        };
        return Button;
    }($);
    var Carousel = function($$$1) {
        var NAME = "carousel";
        var VERSION = "4.1.1";
        var DATA_KEY = "bs.carousel";
        var EVENT_KEY = "." + DATA_KEY;
        var DATA_API_KEY = ".data-api";
        var JQUERY_NO_CONFLICT = $$$1.fn[NAME];
        var ARROW_LEFT_KEYCODE = 37;
        var ARROW_RIGHT_KEYCODE = 39;
        var TOUCHEVENT_COMPAT_WAIT = 500;
        var Default = {
            interval: 5e3,
            keyboard: true,
            slide: false,
            pause: "hover",
            wrap: true
        };
        var DefaultType = {
            interval: "(number|boolean)",
            keyboard: "boolean",
            slide: "(boolean|string)",
            pause: "(string|boolean)",
            wrap: "boolean"
        };
        var Direction = {
            NEXT: "next",
            PREV: "prev",
            LEFT: "left",
            RIGHT: "right"
        };
        var Event = {
            SLIDE: "slide" + EVENT_KEY,
            SLID: "slid" + EVENT_KEY,
            KEYDOWN: "keydown" + EVENT_KEY,
            MOUSEENTER: "mouseenter" + EVENT_KEY,
            MOUSELEAVE: "mouseleave" + EVENT_KEY,
            TOUCHEND: "touchend" + EVENT_KEY,
            LOAD_DATA_API: "load" + EVENT_KEY + DATA_API_KEY,
            CLICK_DATA_API: "click" + EVENT_KEY + DATA_API_KEY
        };
        var ClassName = {
            CAROUSEL: "carousel",
            ACTIVE: "active",
            SLIDE: "slide",
            RIGHT: "carousel-item-right",
            LEFT: "carousel-item-left",
            NEXT: "carousel-item-next",
            PREV: "carousel-item-prev",
            ITEM: "carousel-item"
        };
        var Selector = {
            ACTIVE: ".active",
            ACTIVE_ITEM: ".active.carousel-item",
            ITEM: ".carousel-item",
            NEXT_PREV: ".carousel-item-next, .carousel-item-prev",
            INDICATORS: ".carousel-indicators",
            DATA_SLIDE: "[data-slide], [data-slide-to]",
            DATA_RIDE: '[data-ride="carousel"]'
        };
        var Carousel = function() {
            function Carousel(element, config) {
                this._items = null;
                this._interval = null;
                this._activeElement = null;
                this._isPaused = false;
                this._isSliding = false;
                this.touchTimeout = null;
                this._config = this._getConfig(config);
                this._element = $$$1(element)[0];
                this._indicatorsElement = $$$1(this._element).find(Selector.INDICATORS)[0];
                this._addEventListeners();
            }
            var _proto = Carousel.prototype;
            _proto.next = function next() {
                if (!this._isSliding) {
                    this._slide(Direction.NEXT);
                }
            };
            _proto.nextWhenVisible = function nextWhenVisible() {
                if (!document.hidden && $$$1(this._element).is(":visible") && $$$1(this._element).css("visibility") !== "hidden") {
                    this.next();
                }
            };
            _proto.prev = function prev() {
                if (!this._isSliding) {
                    this._slide(Direction.PREV);
                }
            };
            _proto.pause = function pause(event) {
                if (!event) {
                    this._isPaused = true;
                }
                if ($$$1(this._element).find(Selector.NEXT_PREV)[0]) {
                    Util.triggerTransitionEnd(this._element);
                    this.cycle(true);
                }
                clearInterval(this._interval);
                this._interval = null;
            };
            _proto.cycle = function cycle(event) {
                if (!event) {
                    this._isPaused = false;
                }
                if (this._interval) {
                    clearInterval(this._interval);
                    this._interval = null;
                }
                if (this._config.interval && !this._isPaused) {
                    this._interval = setInterval((document.visibilityState ? this.nextWhenVisible : this.next).bind(this), this._config.interval);
                }
            };
            _proto.to = function to(index) {
                var _this = this;
                this._activeElement = $$$1(this._element).find(Selector.ACTIVE_ITEM)[0];
                var activeIndex = this._getItemIndex(this._activeElement);
                if (index > this._items.length - 1 || index < 0) {
                    return;
                }
                if (this._isSliding) {
                    $$$1(this._element).one(Event.SLID, function() {
                        return _this.to(index);
                    });
                    return;
                }
                if (activeIndex === index) {
                    this.pause();
                    this.cycle();
                    return;
                }
                var direction = index > activeIndex ? Direction.NEXT : Direction.PREV;
                this._slide(direction, this._items[index]);
            };
            _proto.dispose = function dispose() {
                $$$1(this._element).off(EVENT_KEY);
                $$$1.removeData(this._element, DATA_KEY);
                this._items = null;
                this._config = null;
                this._element = null;
                this._interval = null;
                this._isPaused = null;
                this._isSliding = null;
                this._activeElement = null;
                this._indicatorsElement = null;
            };
            _proto._getConfig = function _getConfig(config) {
                config = _objectSpread({}, Default, config);
                Util.typeCheckConfig(NAME, config, DefaultType);
                return config;
            };
            _proto._addEventListeners = function _addEventListeners() {
                var _this2 = this;
                if (this._config.keyboard) {
                    $$$1(this._element).on(Event.KEYDOWN, function(event) {
                        return _this2._keydown(event);
                    });
                }
                if (this._config.pause === "hover") {
                    $$$1(this._element).on(Event.MOUSEENTER, function(event) {
                        return _this2.pause(event);
                    }).on(Event.MOUSELEAVE, function(event) {
                        return _this2.cycle(event);
                    });
                    if ("ontouchstart" in document.documentElement) {
                        $$$1(this._element).on(Event.TOUCHEND, function() {
                            _this2.pause();
                            if (_this2.touchTimeout) {
                                clearTimeout(_this2.touchTimeout);
                            }
                            _this2.touchTimeout = setTimeout(function(event) {
                                return _this2.cycle(event);
                            }, TOUCHEVENT_COMPAT_WAIT + _this2._config.interval);
                        });
                    }
                }
            };
            _proto._keydown = function _keydown(event) {
                if (/input|textarea/i.test(event.target.tagName)) {
                    return;
                }
                switch (event.which) {
                  case ARROW_LEFT_KEYCODE:
                    event.preventDefault();
                    this.prev();
                    break;

                  case ARROW_RIGHT_KEYCODE:
                    event.preventDefault();
                    this.next();
                    break;

                  default:
                }
            };
            _proto._getItemIndex = function _getItemIndex(element) {
                this._items = $$$1.makeArray($$$1(element).parent().find(Selector.ITEM));
                return this._items.indexOf(element);
            };
            _proto._getItemByDirection = function _getItemByDirection(direction, activeElement) {
                var isNextDirection = direction === Direction.NEXT;
                var isPrevDirection = direction === Direction.PREV;
                var activeIndex = this._getItemIndex(activeElement);
                var lastItemIndex = this._items.length - 1;
                var isGoingToWrap = isPrevDirection && activeIndex === 0 || isNextDirection && activeIndex === lastItemIndex;
                if (isGoingToWrap && !this._config.wrap) {
                    return activeElement;
                }
                var delta = direction === Direction.PREV ? -1 : 1;
                var itemIndex = (activeIndex + delta) % this._items.length;
                return itemIndex === -1 ? this._items[this._items.length - 1] : this._items[itemIndex];
            };
            _proto._triggerSlideEvent = function _triggerSlideEvent(relatedTarget, eventDirectionName) {
                var targetIndex = this._getItemIndex(relatedTarget);
                var fromIndex = this._getItemIndex($$$1(this._element).find(Selector.ACTIVE_ITEM)[0]);
                var slideEvent = $$$1.Event(Event.SLIDE, {
                    relatedTarget: relatedTarget,
                    direction: eventDirectionName,
                    from: fromIndex,
                    to: targetIndex
                });
                $$$1(this._element).trigger(slideEvent);
                return slideEvent;
            };
            _proto._setActiveIndicatorElement = function _setActiveIndicatorElement(element) {
                if (this._indicatorsElement) {
                    $$$1(this._indicatorsElement).find(Selector.ACTIVE).removeClass(ClassName.ACTIVE);
                    var nextIndicator = this._indicatorsElement.children[this._getItemIndex(element)];
                    if (nextIndicator) {
                        $$$1(nextIndicator).addClass(ClassName.ACTIVE);
                    }
                }
            };
            _proto._slide = function _slide(direction, element) {
                var _this3 = this;
                var activeElement = $$$1(this._element).find(Selector.ACTIVE_ITEM)[0];
                var activeElementIndex = this._getItemIndex(activeElement);
                var nextElement = element || activeElement && this._getItemByDirection(direction, activeElement);
                var nextElementIndex = this._getItemIndex(nextElement);
                var isCycling = Boolean(this._interval);
                var directionalClassName;
                var orderClassName;
                var eventDirectionName;
                if (direction === Direction.NEXT) {
                    directionalClassName = ClassName.LEFT;
                    orderClassName = ClassName.NEXT;
                    eventDirectionName = Direction.LEFT;
                } else {
                    directionalClassName = ClassName.RIGHT;
                    orderClassName = ClassName.PREV;
                    eventDirectionName = Direction.RIGHT;
                }
                if (nextElement && $$$1(nextElement).hasClass(ClassName.ACTIVE)) {
                    this._isSliding = false;
                    return;
                }
                var slideEvent = this._triggerSlideEvent(nextElement, eventDirectionName);
                if (slideEvent.isDefaultPrevented()) {
                    return;
                }
                if (!activeElement || !nextElement) {
                    return;
                }
                this._isSliding = true;
                if (isCycling) {
                    this.pause();
                }
                this._setActiveIndicatorElement(nextElement);
                var slidEvent = $$$1.Event(Event.SLID, {
                    relatedTarget: nextElement,
                    direction: eventDirectionName,
                    from: activeElementIndex,
                    to: nextElementIndex
                });
                if ($$$1(this._element).hasClass(ClassName.SLIDE)) {
                    $$$1(nextElement).addClass(orderClassName);
                    Util.reflow(nextElement);
                    $$$1(activeElement).addClass(directionalClassName);
                    $$$1(nextElement).addClass(directionalClassName);
                    var transitionDuration = Util.getTransitionDurationFromElement(activeElement);
                    $$$1(activeElement).one(Util.TRANSITION_END, function() {
                        $$$1(nextElement).removeClass(directionalClassName + " " + orderClassName).addClass(ClassName.ACTIVE);
                        $$$1(activeElement).removeClass(ClassName.ACTIVE + " " + orderClassName + " " + directionalClassName);
                        _this3._isSliding = false;
                        setTimeout(function() {
                            return $$$1(_this3._element).trigger(slidEvent);
                        }, 0);
                    }).emulateTransitionEnd(transitionDuration);
                } else {
                    $$$1(activeElement).removeClass(ClassName.ACTIVE);
                    $$$1(nextElement).addClass(ClassName.ACTIVE);
                    this._isSliding = false;
                    $$$1(this._element).trigger(slidEvent);
                }
                if (isCycling) {
                    this.cycle();
                }
            };
            Carousel._jQueryInterface = function _jQueryInterface(config) {
                return this.each(function() {
                    var data = $$$1(this).data(DATA_KEY);
                    var _config = _objectSpread({}, Default, $$$1(this).data());
                    if (typeof config === "object") {
                        _config = _objectSpread({}, _config, config);
                    }
                    var action = typeof config === "string" ? config : _config.slide;
                    if (!data) {
                        data = new Carousel(this, _config);
                        $$$1(this).data(DATA_KEY, data);
                    }
                    if (typeof config === "number") {
                        data.to(config);
                    } else if (typeof action === "string") {
                        if (typeof data[action] === "undefined") {
                            throw new TypeError('No method named "' + action + '"');
                        }
                        data[action]();
                    } else if (_config.interval) {
                        data.pause();
                        data.cycle();
                    }
                });
            };
            Carousel._dataApiClickHandler = function _dataApiClickHandler(event) {
                var selector = Util.getSelectorFromElement(this);
                if (!selector) {
                    return;
                }
                var target = $$$1(selector)[0];
                if (!target || !$$$1(target).hasClass(ClassName.CAROUSEL)) {
                    return;
                }
                var config = _objectSpread({}, $$$1(target).data(), $$$1(this).data());
                var slideIndex = this.getAttribute("data-slide-to");
                if (slideIndex) {
                    config.interval = false;
                }
                Carousel._jQueryInterface.call($$$1(target), config);
                if (slideIndex) {
                    $$$1(target).data(DATA_KEY).to(slideIndex);
                }
                event.preventDefault();
            };
            _createClass(Carousel, null, [ {
                key: "VERSION",
                get: function get() {
                    return VERSION;
                }
            }, {
                key: "Default",
                get: function get() {
                    return Default;
                }
            } ]);
            return Carousel;
        }();
        $$$1(document).on(Event.CLICK_DATA_API, Selector.DATA_SLIDE, Carousel._dataApiClickHandler);
        $$$1(window).on(Event.LOAD_DATA_API, function() {
            $$$1(Selector.DATA_RIDE).each(function() {
                var $carousel = $$$1(this);
                Carousel._jQueryInterface.call($carousel, $carousel.data());
            });
        });
        $$$1.fn[NAME] = Carousel._jQueryInterface;
        $$$1.fn[NAME].Constructor = Carousel;
        $$$1.fn[NAME].noConflict = function() {
            $$$1.fn[NAME] = JQUERY_NO_CONFLICT;
            return Carousel._jQueryInterface;
        };
        return Carousel;
    }($);
    var Collapse = function($$$1) {
        var NAME = "collapse";
        var VERSION = "4.1.1";
        var DATA_KEY = "bs.collapse";
        var EVENT_KEY = "." + DATA_KEY;
        var DATA_API_KEY = ".data-api";
        var JQUERY_NO_CONFLICT = $$$1.fn[NAME];
        var Default = {
            toggle: true,
            parent: ""
        };
        var DefaultType = {
            toggle: "boolean",
            parent: "(string|element)"
        };
        var Event = {
            SHOW: "show" + EVENT_KEY,
            SHOWN: "shown" + EVENT_KEY,
            HIDE: "hide" + EVENT_KEY,
            HIDDEN: "hidden" + EVENT_KEY,
            CLICK_DATA_API: "click" + EVENT_KEY + DATA_API_KEY
        };
        var ClassName = {
            SHOW: "show",
            COLLAPSE: "collapse",
            COLLAPSING: "collapsing",
            COLLAPSED: "collapsed"
        };
        var Dimension = {
            WIDTH: "width",
            HEIGHT: "height"
        };
        var Selector = {
            ACTIVES: ".show, .collapsing",
            DATA_TOGGLE: '[data-toggle="collapse"]'
        };
        var Collapse = function() {
            function Collapse(element, config) {
                this._isTransitioning = false;
                this._element = element;
                this._config = this._getConfig(config);
                this._triggerArray = $$$1.makeArray($$$1('[data-toggle="collapse"][href="#' + element.id + '"],' + ('[data-toggle="collapse"][data-target="#' + element.id + '"]')));
                var tabToggles = $$$1(Selector.DATA_TOGGLE);
                for (var i = 0; i < tabToggles.length; i++) {
                    var elem = tabToggles[i];
                    var selector = Util.getSelectorFromElement(elem);
                    if (selector !== null && $$$1(selector).filter(element).length > 0) {
                        this._selector = selector;
                        this._triggerArray.push(elem);
                    }
                }
                this._parent = this._config.parent ? this._getParent() : null;
                if (!this._config.parent) {
                    this._addAriaAndCollapsedClass(this._element, this._triggerArray);
                }
                if (this._config.toggle) {
                    this.toggle();
                }
            }
            var _proto = Collapse.prototype;
            _proto.toggle = function toggle() {
                if ($$$1(this._element).hasClass(ClassName.SHOW)) {
                    this.hide();
                } else {
                    this.show();
                }
            };
            _proto.show = function show() {
                var _this = this;
                if (this._isTransitioning || $$$1(this._element).hasClass(ClassName.SHOW)) {
                    return;
                }
                var actives;
                var activesData;
                if (this._parent) {
                    actives = $$$1.makeArray($$$1(this._parent).find(Selector.ACTIVES).filter('[data-parent="' + this._config.parent + '"]'));
                    if (actives.length === 0) {
                        actives = null;
                    }
                }
                if (actives) {
                    activesData = $$$1(actives).not(this._selector).data(DATA_KEY);
                    if (activesData && activesData._isTransitioning) {
                        return;
                    }
                }
                var startEvent = $$$1.Event(Event.SHOW);
                $$$1(this._element).trigger(startEvent);
                if (startEvent.isDefaultPrevented()) {
                    return;
                }
                if (actives) {
                    Collapse._jQueryInterface.call($$$1(actives).not(this._selector), "hide");
                    if (!activesData) {
                        $$$1(actives).data(DATA_KEY, null);
                    }
                }
                var dimension = this._getDimension();
                $$$1(this._element).removeClass(ClassName.COLLAPSE).addClass(ClassName.COLLAPSING);
                this._element.style[dimension] = 0;
                if (this._triggerArray.length > 0) {
                    $$$1(this._triggerArray).removeClass(ClassName.COLLAPSED).attr("aria-expanded", true);
                }
                this.setTransitioning(true);
                var complete = function complete() {
                    $$$1(_this._element).removeClass(ClassName.COLLAPSING).addClass(ClassName.COLLAPSE).addClass(ClassName.SHOW);
                    _this._element.style[dimension] = "";
                    _this.setTransitioning(false);
                    $$$1(_this._element).trigger(Event.SHOWN);
                };
                var capitalizedDimension = dimension[0].toUpperCase() + dimension.slice(1);
                var scrollSize = "scroll" + capitalizedDimension;
                var transitionDuration = Util.getTransitionDurationFromElement(this._element);
                $$$1(this._element).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);
                this._element.style[dimension] = this._element[scrollSize] + "px";
            };
            _proto.hide = function hide() {
                var _this2 = this;
                if (this._isTransitioning || !$$$1(this._element).hasClass(ClassName.SHOW)) {
                    return;
                }
                var startEvent = $$$1.Event(Event.HIDE);
                $$$1(this._element).trigger(startEvent);
                if (startEvent.isDefaultPrevented()) {
                    return;
                }
                var dimension = this._getDimension();
                this._element.style[dimension] = this._element.getBoundingClientRect()[dimension] + "px";
                Util.reflow(this._element);
                $$$1(this._element).addClass(ClassName.COLLAPSING).removeClass(ClassName.COLLAPSE).removeClass(ClassName.SHOW);
                if (this._triggerArray.length > 0) {
                    for (var i = 0; i < this._triggerArray.length; i++) {
                        var trigger = this._triggerArray[i];
                        var selector = Util.getSelectorFromElement(trigger);
                        if (selector !== null) {
                            var $elem = $$$1(selector);
                            if (!$elem.hasClass(ClassName.SHOW)) {
                                $$$1(trigger).addClass(ClassName.COLLAPSED).attr("aria-expanded", false);
                            }
                        }
                    }
                }
                this.setTransitioning(true);
                var complete = function complete() {
                    _this2.setTransitioning(false);
                    $$$1(_this2._element).removeClass(ClassName.COLLAPSING).addClass(ClassName.COLLAPSE).trigger(Event.HIDDEN);
                };
                this._element.style[dimension] = "";
                var transitionDuration = Util.getTransitionDurationFromElement(this._element);
                $$$1(this._element).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);
            };
            _proto.setTransitioning = function setTransitioning(isTransitioning) {
                this._isTransitioning = isTransitioning;
            };
            _proto.dispose = function dispose() {
                $$$1.removeData(this._element, DATA_KEY);
                this._config = null;
                this._parent = null;
                this._element = null;
                this._triggerArray = null;
                this._isTransitioning = null;
            };
            _proto._getConfig = function _getConfig(config) {
                config = _objectSpread({}, Default, config);
                config.toggle = Boolean(config.toggle);
                Util.typeCheckConfig(NAME, config, DefaultType);
                return config;
            };
            _proto._getDimension = function _getDimension() {
                var hasWidth = $$$1(this._element).hasClass(Dimension.WIDTH);
                return hasWidth ? Dimension.WIDTH : Dimension.HEIGHT;
            };
            _proto._getParent = function _getParent() {
                var _this3 = this;
                var parent = null;
                if (Util.isElement(this._config.parent)) {
                    parent = this._config.parent;
                    if (typeof this._config.parent.jquery !== "undefined") {
                        parent = this._config.parent[0];
                    }
                } else {
                    parent = $$$1(this._config.parent)[0];
                }
                var selector = '[data-toggle="collapse"][data-parent="' + this._config.parent + '"]';
                $$$1(parent).find(selector).each(function(i, element) {
                    _this3._addAriaAndCollapsedClass(Collapse._getTargetFromElement(element), [ element ]);
                });
                return parent;
            };
            _proto._addAriaAndCollapsedClass = function _addAriaAndCollapsedClass(element, triggerArray) {
                if (element) {
                    var isOpen = $$$1(element).hasClass(ClassName.SHOW);
                    if (triggerArray.length > 0) {
                        $$$1(triggerArray).toggleClass(ClassName.COLLAPSED, !isOpen).attr("aria-expanded", isOpen);
                    }
                }
            };
            Collapse._getTargetFromElement = function _getTargetFromElement(element) {
                var selector = Util.getSelectorFromElement(element);
                return selector ? $$$1(selector)[0] : null;
            };
            Collapse._jQueryInterface = function _jQueryInterface(config) {
                return this.each(function() {
                    var $this = $$$1(this);
                    var data = $this.data(DATA_KEY);
                    var _config = _objectSpread({}, Default, $this.data(), typeof config === "object" && config ? config : {});
                    if (!data && _config.toggle && /show|hide/.test(config)) {
                        _config.toggle = false;
                    }
                    if (!data) {
                        data = new Collapse(this, _config);
                        $this.data(DATA_KEY, data);
                    }
                    if (typeof config === "string") {
                        if (typeof data[config] === "undefined") {
                            throw new TypeError('No method named "' + config + '"');
                        }
                        data[config]();
                    }
                });
            };
            _createClass(Collapse, null, [ {
                key: "VERSION",
                get: function get() {
                    return VERSION;
                }
            }, {
                key: "Default",
                get: function get() {
                    return Default;
                }
            } ]);
            return Collapse;
        }();
        $$$1(document).on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE, function(event) {
            if (event.currentTarget.tagName === "A") {
                event.preventDefault();
            }
            var $trigger = $$$1(this);
            var selector = Util.getSelectorFromElement(this);
            $$$1(selector).each(function() {
                var $target = $$$1(this);
                var data = $target.data(DATA_KEY);
                var config = data ? "toggle" : $trigger.data();
                Collapse._jQueryInterface.call($target, config);
            });
        });
        $$$1.fn[NAME] = Collapse._jQueryInterface;
        $$$1.fn[NAME].Constructor = Collapse;
        $$$1.fn[NAME].noConflict = function() {
            $$$1.fn[NAME] = JQUERY_NO_CONFLICT;
            return Collapse._jQueryInterface;
        };
        return Collapse;
    }($);
    var Dropdown = function($$$1) {
        var NAME = "dropdown";
        var VERSION = "4.1.1";
        var DATA_KEY = "bs.dropdown";
        var EVENT_KEY = "." + DATA_KEY;
        var DATA_API_KEY = ".data-api";
        var JQUERY_NO_CONFLICT = $$$1.fn[NAME];
        var ESCAPE_KEYCODE = 27;
        var SPACE_KEYCODE = 32;
        var TAB_KEYCODE = 9;
        var ARROW_UP_KEYCODE = 38;
        var ARROW_DOWN_KEYCODE = 40;
        var RIGHT_MOUSE_BUTTON_WHICH = 3;
        var REGEXP_KEYDOWN = new RegExp(ARROW_UP_KEYCODE + "|" + ARROW_DOWN_KEYCODE + "|" + ESCAPE_KEYCODE);
        var Event = {
            HIDE: "hide" + EVENT_KEY,
            HIDDEN: "hidden" + EVENT_KEY,
            SHOW: "show" + EVENT_KEY,
            SHOWN: "shown" + EVENT_KEY,
            CLICK: "click" + EVENT_KEY,
            CLICK_DATA_API: "click" + EVENT_KEY + DATA_API_KEY,
            KEYDOWN_DATA_API: "keydown" + EVENT_KEY + DATA_API_KEY,
            KEYUP_DATA_API: "keyup" + EVENT_KEY + DATA_API_KEY
        };
        var ClassName = {
            DISABLED: "disabled",
            SHOW: "show",
            DROPUP: "dropup",
            DROPRIGHT: "dropright",
            DROPLEFT: "dropleft",
            MENURIGHT: "dropdown-menu-right",
            MENULEFT: "dropdown-menu-left",
            POSITION_STATIC: "position-static"
        };
        var Selector = {
            DATA_TOGGLE: '[data-toggle="dropdown"]',
            FORM_CHILD: ".dropdown form",
            MENU: ".dropdown-menu",
            NAVBAR_NAV: ".navbar-nav",
            VISIBLE_ITEMS: ".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)"
        };
        var AttachmentMap = {
            TOP: "top-start",
            TOPEND: "top-end",
            BOTTOM: "bottom-start",
            BOTTOMEND: "bottom-end",
            RIGHT: "right-start",
            RIGHTEND: "right-end",
            LEFT: "left-start",
            LEFTEND: "left-end"
        };
        var Default = {
            offset: 0,
            flip: true,
            boundary: "scrollParent",
            reference: "toggle",
            display: "dynamic"
        };
        var DefaultType = {
            offset: "(number|string|function)",
            flip: "boolean",
            boundary: "(string|element)",
            reference: "(string|element)",
            display: "string"
        };
        var Dropdown = function() {
            function Dropdown(element, config) {
                this._element = element;
                this._popper = null;
                this._config = this._getConfig(config);
                this._menu = this._getMenuElement();
                this._inNavbar = this._detectNavbar();
                this._addEventListeners();
            }
            var _proto = Dropdown.prototype;
            _proto.toggle = function toggle() {
                if (this._element.disabled || $$$1(this._element).hasClass(ClassName.DISABLED)) {
                    return;
                }
                var parent = Dropdown._getParentFromElement(this._element);
                var isActive = $$$1(this._menu).hasClass(ClassName.SHOW);
                Dropdown._clearMenus();
                if (isActive) {
                    return;
                }
                var relatedTarget = {
                    relatedTarget: this._element
                };
                var showEvent = $$$1.Event(Event.SHOW, relatedTarget);
                $$$1(parent).trigger(showEvent);
                if (showEvent.isDefaultPrevented()) {
                    return;
                }
                if (!this._inNavbar) {
                    if (typeof Popper === "undefined") {
                        throw new TypeError("Bootstrap dropdown require Popper.js (https://popper.js.org)");
                    }
                    var referenceElement = this._element;
                    if (this._config.reference === "parent") {
                        referenceElement = parent;
                    } else if (Util.isElement(this._config.reference)) {
                        referenceElement = this._config.reference;
                        if (typeof this._config.reference.jquery !== "undefined") {
                            referenceElement = this._config.reference[0];
                        }
                    }
                    if (this._config.boundary !== "scrollParent") {
                        $$$1(parent).addClass(ClassName.POSITION_STATIC);
                    }
                    this._popper = new Popper(referenceElement, this._menu, this._getPopperConfig());
                }
                if ("ontouchstart" in document.documentElement && $$$1(parent).closest(Selector.NAVBAR_NAV).length === 0) {
                    $$$1(document.body).children().on("mouseover", null, $$$1.noop);
                }
                this._element.focus();
                this._element.setAttribute("aria-expanded", true);
                $$$1(this._menu).toggleClass(ClassName.SHOW);
                $$$1(parent).toggleClass(ClassName.SHOW).trigger($$$1.Event(Event.SHOWN, relatedTarget));
            };
            _proto.dispose = function dispose() {
                $$$1.removeData(this._element, DATA_KEY);
                $$$1(this._element).off(EVENT_KEY);
                this._element = null;
                this._menu = null;
                if (this._popper !== null) {
                    this._popper.destroy();
                    this._popper = null;
                }
            };
            _proto.update = function update() {
                this._inNavbar = this._detectNavbar();
                if (this._popper !== null) {
                    this._popper.scheduleUpdate();
                }
            };
            _proto._addEventListeners = function _addEventListeners() {
                var _this = this;
                $$$1(this._element).on(Event.CLICK, function(event) {
                    event.preventDefault();
                    event.stopPropagation();
                    _this.toggle();
                });
            };
            _proto._getConfig = function _getConfig(config) {
                config = _objectSpread({}, this.constructor.Default, $$$1(this._element).data(), config);
                Util.typeCheckConfig(NAME, config, this.constructor.DefaultType);
                return config;
            };
            _proto._getMenuElement = function _getMenuElement() {
                if (!this._menu) {
                    var parent = Dropdown._getParentFromElement(this._element);
                    this._menu = $$$1(parent).find(Selector.MENU)[0];
                }
                return this._menu;
            };
            _proto._getPlacement = function _getPlacement() {
                var $parentDropdown = $$$1(this._element).parent();
                var placement = AttachmentMap.BOTTOM;
                if ($parentDropdown.hasClass(ClassName.DROPUP)) {
                    placement = AttachmentMap.TOP;
                    if ($$$1(this._menu).hasClass(ClassName.MENURIGHT)) {
                        placement = AttachmentMap.TOPEND;
                    }
                } else if ($parentDropdown.hasClass(ClassName.DROPRIGHT)) {
                    placement = AttachmentMap.RIGHT;
                } else if ($parentDropdown.hasClass(ClassName.DROPLEFT)) {
                    placement = AttachmentMap.LEFT;
                } else if ($$$1(this._menu).hasClass(ClassName.MENURIGHT)) {
                    placement = AttachmentMap.BOTTOMEND;
                }
                return placement;
            };
            _proto._detectNavbar = function _detectNavbar() {
                return $$$1(this._element).closest(".navbar").length > 0;
            };
            _proto._getPopperConfig = function _getPopperConfig() {
                var _this2 = this;
                var offsetConf = {};
                if (typeof this._config.offset === "function") {
                    offsetConf.fn = function(data) {
                        data.offsets = _objectSpread({}, data.offsets, _this2._config.offset(data.offsets) || {});
                        return data;
                    };
                } else {
                    offsetConf.offset = this._config.offset;
                }
                var popperConfig = {
                    placement: this._getPlacement(),
                    modifiers: {
                        offset: offsetConf,
                        flip: {
                            enabled: this._config.flip
                        },
                        preventOverflow: {
                            boundariesElement: this._config.boundary
                        }
                    }
                };
                if (this._config.display === "static") {
                    popperConfig.modifiers.applyStyle = {
                        enabled: false
                    };
                }
                return popperConfig;
            };
            Dropdown._jQueryInterface = function _jQueryInterface(config) {
                return this.each(function() {
                    var data = $$$1(this).data(DATA_KEY);
                    var _config = typeof config === "object" ? config : null;
                    if (!data) {
                        data = new Dropdown(this, _config);
                        $$$1(this).data(DATA_KEY, data);
                    }
                    if (typeof config === "string") {
                        if (typeof data[config] === "undefined") {
                            throw new TypeError('No method named "' + config + '"');
                        }
                        data[config]();
                    }
                });
            };
            Dropdown._clearMenus = function _clearMenus(event) {
                if (event && (event.which === RIGHT_MOUSE_BUTTON_WHICH || event.type === "keyup" && event.which !== TAB_KEYCODE)) {
                    return;
                }
                var toggles = $$$1.makeArray($$$1(Selector.DATA_TOGGLE));
                for (var i = 0; i < toggles.length; i++) {
                    var parent = Dropdown._getParentFromElement(toggles[i]);
                    var context = $$$1(toggles[i]).data(DATA_KEY);
                    var relatedTarget = {
                        relatedTarget: toggles[i]
                    };
                    if (!context) {
                        continue;
                    }
                    var dropdownMenu = context._menu;
                    if (!$$$1(parent).hasClass(ClassName.SHOW)) {
                        continue;
                    }
                    if (event && (event.type === "click" && /input|textarea/i.test(event.target.tagName) || event.type === "keyup" && event.which === TAB_KEYCODE) && $$$1.contains(parent, event.target)) {
                        continue;
                    }
                    var hideEvent = $$$1.Event(Event.HIDE, relatedTarget);
                    $$$1(parent).trigger(hideEvent);
                    if (hideEvent.isDefaultPrevented()) {
                        continue;
                    }
                    if ("ontouchstart" in document.documentElement) {
                        $$$1(document.body).children().off("mouseover", null, $$$1.noop);
                    }
                    toggles[i].setAttribute("aria-expanded", "false");
                    $$$1(dropdownMenu).removeClass(ClassName.SHOW);
                    $$$1(parent).removeClass(ClassName.SHOW).trigger($$$1.Event(Event.HIDDEN, relatedTarget));
                }
            };
            Dropdown._getParentFromElement = function _getParentFromElement(element) {
                var parent;
                var selector = Util.getSelectorFromElement(element);
                if (selector) {
                    parent = $$$1(selector)[0];
                }
                return parent || element.parentNode;
            };
            Dropdown._dataApiKeydownHandler = function _dataApiKeydownHandler(event) {
                if (/input|textarea/i.test(event.target.tagName) ? event.which === SPACE_KEYCODE || event.which !== ESCAPE_KEYCODE && (event.which !== ARROW_DOWN_KEYCODE && event.which !== ARROW_UP_KEYCODE || $$$1(event.target).closest(Selector.MENU).length) : !REGEXP_KEYDOWN.test(event.which)) {
                    return;
                }
                event.preventDefault();
                event.stopPropagation();
                if (this.disabled || $$$1(this).hasClass(ClassName.DISABLED)) {
                    return;
                }
                var parent = Dropdown._getParentFromElement(this);
                var isActive = $$$1(parent).hasClass(ClassName.SHOW);
                if (!isActive && (event.which !== ESCAPE_KEYCODE || event.which !== SPACE_KEYCODE) || isActive && (event.which === ESCAPE_KEYCODE || event.which === SPACE_KEYCODE)) {
                    if (event.which === ESCAPE_KEYCODE) {
                        var toggle = $$$1(parent).find(Selector.DATA_TOGGLE)[0];
                        $$$1(toggle).trigger("focus");
                    }
                    $$$1(this).trigger("click");
                    return;
                }
                var items = $$$1(parent).find(Selector.VISIBLE_ITEMS).get();
                if (items.length === 0) {
                    return;
                }
                var index = items.indexOf(event.target);
                if (event.which === ARROW_UP_KEYCODE && index > 0) {
                    index--;
                }
                if (event.which === ARROW_DOWN_KEYCODE && index < items.length - 1) {
                    index++;
                }
                if (index < 0) {
                    index = 0;
                }
                items[index].focus();
            };
            _createClass(Dropdown, null, [ {
                key: "VERSION",
                get: function get() {
                    return VERSION;
                }
            }, {
                key: "Default",
                get: function get() {
                    return Default;
                }
            }, {
                key: "DefaultType",
                get: function get() {
                    return DefaultType;
                }
            } ]);
            return Dropdown;
        }();
        $$$1(document).on(Event.KEYDOWN_DATA_API, Selector.DATA_TOGGLE, Dropdown._dataApiKeydownHandler).on(Event.KEYDOWN_DATA_API, Selector.MENU, Dropdown._dataApiKeydownHandler).on(Event.CLICK_DATA_API + " " + Event.KEYUP_DATA_API, Dropdown._clearMenus).on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE, function(event) {
            event.preventDefault();
            event.stopPropagation();
            Dropdown._jQueryInterface.call($$$1(this), "toggle");
        }).on(Event.CLICK_DATA_API, Selector.FORM_CHILD, function(e) {
            e.stopPropagation();
        });
        $$$1.fn[NAME] = Dropdown._jQueryInterface;
        $$$1.fn[NAME].Constructor = Dropdown;
        $$$1.fn[NAME].noConflict = function() {
            $$$1.fn[NAME] = JQUERY_NO_CONFLICT;
            return Dropdown._jQueryInterface;
        };
        return Dropdown;
    }($, Popper);
    var Modal = function($$$1) {
        var NAME = "modal";
        var VERSION = "4.1.1";
        var DATA_KEY = "bs.modal";
        var EVENT_KEY = "." + DATA_KEY;
        var DATA_API_KEY = ".data-api";
        var JQUERY_NO_CONFLICT = $$$1.fn[NAME];
        var ESCAPE_KEYCODE = 27;
        var Default = {
            backdrop: true,
            keyboard: true,
            focus: true,
            show: true
        };
        var DefaultType = {
            backdrop: "(boolean|string)",
            keyboard: "boolean",
            focus: "boolean",
            show: "boolean"
        };
        var Event = {
            HIDE: "hide" + EVENT_KEY,
            HIDDEN: "hidden" + EVENT_KEY,
            SHOW: "show" + EVENT_KEY,
            SHOWN: "shown" + EVENT_KEY,
            FOCUSIN: "focusin" + EVENT_KEY,
            RESIZE: "resize" + EVENT_KEY,
            CLICK_DISMISS: "click.dismiss" + EVENT_KEY,
            KEYDOWN_DISMISS: "keydown.dismiss" + EVENT_KEY,
            MOUSEUP_DISMISS: "mouseup.dismiss" + EVENT_KEY,
            MOUSEDOWN_DISMISS: "mousedown.dismiss" + EVENT_KEY,
            CLICK_DATA_API: "click" + EVENT_KEY + DATA_API_KEY
        };
        var ClassName = {
            SCROLLBAR_MEASURER: "modal-scrollbar-measure",
            BACKDROP: "modal-backdrop",
            OPEN: "modal-open",
            FADE: "fade",
            SHOW: "show"
        };
        var Selector = {
            DIALOG: ".modal-dialog",
            DATA_TOGGLE: '[data-toggle="modal"]',
            DATA_DISMISS: '[data-dismiss="modal"]',
            FIXED_CONTENT: ".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",
            STICKY_CONTENT: ".sticky-top",
            NAVBAR_TOGGLER: ".navbar-toggler"
        };
        var Modal = function() {
            function Modal(element, config) {
                this._config = this._getConfig(config);
                this._element = element;
                this._dialog = $$$1(element).find(Selector.DIALOG)[0];
                this._backdrop = null;
                this._isShown = false;
                this._isBodyOverflowing = false;
                this._ignoreBackdropClick = false;
                this._scrollbarWidth = 0;
            }
            var _proto = Modal.prototype;
            _proto.toggle = function toggle(relatedTarget) {
                return this._isShown ? this.hide() : this.show(relatedTarget);
            };
            _proto.show = function show(relatedTarget) {
                var _this = this;
                if (this._isTransitioning || this._isShown) {
                    return;
                }
                if ($$$1(this._element).hasClass(ClassName.FADE)) {
                    this._isTransitioning = true;
                }
                var showEvent = $$$1.Event(Event.SHOW, {
                    relatedTarget: relatedTarget
                });
                $$$1(this._element).trigger(showEvent);
                if (this._isShown || showEvent.isDefaultPrevented()) {
                    return;
                }
                this._isShown = true;
                this._checkScrollbar();
                this._setScrollbar();
                this._adjustDialog();
                $$$1(document.body).addClass(ClassName.OPEN);
                this._setEscapeEvent();
                this._setResizeEvent();
                $$$1(this._element).on(Event.CLICK_DISMISS, Selector.DATA_DISMISS, function(event) {
                    return _this.hide(event);
                });
                $$$1(this._dialog).on(Event.MOUSEDOWN_DISMISS, function() {
                    $$$1(_this._element).one(Event.MOUSEUP_DISMISS, function(event) {
                        if ($$$1(event.target).is(_this._element)) {
                            _this._ignoreBackdropClick = true;
                        }
                    });
                });
                this._showBackdrop(function() {
                    return _this._showElement(relatedTarget);
                });
            };
            _proto.hide = function hide(event) {
                var _this2 = this;
                if (event) {
                    event.preventDefault();
                }
                if (this._isTransitioning || !this._isShown) {
                    return;
                }
                var hideEvent = $$$1.Event(Event.HIDE);
                $$$1(this._element).trigger(hideEvent);
                if (!this._isShown || hideEvent.isDefaultPrevented()) {
                    return;
                }
                this._isShown = false;
                var transition = $$$1(this._element).hasClass(ClassName.FADE);
                if (transition) {
                    this._isTransitioning = true;
                }
                this._setEscapeEvent();
                this._setResizeEvent();
                $$$1(document).off(Event.FOCUSIN);
                $$$1(this._element).removeClass(ClassName.SHOW);
                $$$1(this._element).off(Event.CLICK_DISMISS);
                $$$1(this._dialog).off(Event.MOUSEDOWN_DISMISS);
                if (transition) {
                    var transitionDuration = Util.getTransitionDurationFromElement(this._element);
                    $$$1(this._element).one(Util.TRANSITION_END, function(event) {
                        return _this2._hideModal(event);
                    }).emulateTransitionEnd(transitionDuration);
                } else {
                    this._hideModal();
                }
            };
            _proto.dispose = function dispose() {
                $$$1.removeData(this._element, DATA_KEY);
                $$$1(window, document, this._element, this._backdrop).off(EVENT_KEY);
                this._config = null;
                this._element = null;
                this._dialog = null;
                this._backdrop = null;
                this._isShown = null;
                this._isBodyOverflowing = null;
                this._ignoreBackdropClick = null;
                this._scrollbarWidth = null;
            };
            _proto.handleUpdate = function handleUpdate() {
                this._adjustDialog();
            };
            _proto._getConfig = function _getConfig(config) {
                config = _objectSpread({}, Default, config);
                Util.typeCheckConfig(NAME, config, DefaultType);
                return config;
            };
            _proto._showElement = function _showElement(relatedTarget) {
                var _this3 = this;
                var transition = $$$1(this._element).hasClass(ClassName.FADE);
                if (!this._element.parentNode || this._element.parentNode.nodeType !== Node.ELEMENT_NODE) {
                    document.body.appendChild(this._element);
                }
                this._element.style.display = "block";
                this._element.removeAttribute("aria-hidden");
                this._element.scrollTop = 0;
                if (transition) {
                    Util.reflow(this._element);
                }
                $$$1(this._element).addClass(ClassName.SHOW);
                if (this._config.focus) {
                    this._enforceFocus();
                }
                var shownEvent = $$$1.Event(Event.SHOWN, {
                    relatedTarget: relatedTarget
                });
                var transitionComplete = function transitionComplete() {
                    if (_this3._config.focus) {
                        _this3._element.focus();
                    }
                    _this3._isTransitioning = false;
                    $$$1(_this3._element).trigger(shownEvent);
                };
                if (transition) {
                    var transitionDuration = Util.getTransitionDurationFromElement(this._element);
                    $$$1(this._dialog).one(Util.TRANSITION_END, transitionComplete).emulateTransitionEnd(transitionDuration);
                } else {
                    transitionComplete();
                }
            };
            _proto._enforceFocus = function _enforceFocus() {
                var _this4 = this;
                $$$1(document).off(Event.FOCUSIN).on(Event.FOCUSIN, function(event) {
                    if (document !== event.target && _this4._element !== event.target && $$$1(_this4._element).has(event.target).length === 0) {
                        _this4._element.focus();
                    }
                });
            };
            _proto._setEscapeEvent = function _setEscapeEvent() {
                var _this5 = this;
                if (this._isShown && this._config.keyboard) {
                    $$$1(this._element).on(Event.KEYDOWN_DISMISS, function(event) {
                        if (event.which === ESCAPE_KEYCODE) {
                            event.preventDefault();
                            _this5.hide();
                        }
                    });
                } else if (!this._isShown) {
                    $$$1(this._element).off(Event.KEYDOWN_DISMISS);
                }
            };
            _proto._setResizeEvent = function _setResizeEvent() {
                var _this6 = this;
                if (this._isShown) {
                    $$$1(window).on(Event.RESIZE, function(event) {
                        return _this6.handleUpdate(event);
                    });
                } else {
                    $$$1(window).off(Event.RESIZE);
                }
            };
            _proto._hideModal = function _hideModal() {
                var _this7 = this;
                this._element.style.display = "none";
                this._element.setAttribute("aria-hidden", true);
                this._isTransitioning = false;
                this._showBackdrop(function() {
                    $$$1(document.body).removeClass(ClassName.OPEN);
                    _this7._resetAdjustments();
                    _this7._resetScrollbar();
                    $$$1(_this7._element).trigger(Event.HIDDEN);
                });
            };
            _proto._removeBackdrop = function _removeBackdrop() {
                if (this._backdrop) {
                    $$$1(this._backdrop).remove();
                    this._backdrop = null;
                }
            };
            _proto._showBackdrop = function _showBackdrop(callback) {
                var _this8 = this;
                var animate = $$$1(this._element).hasClass(ClassName.FADE) ? ClassName.FADE : "";
                if (this._isShown && this._config.backdrop) {
                    this._backdrop = document.createElement("div");
                    this._backdrop.className = ClassName.BACKDROP;
                    if (animate) {
                        $$$1(this._backdrop).addClass(animate);
                    }
                    $$$1(this._backdrop).appendTo(document.body);
                    $$$1(this._element).on(Event.CLICK_DISMISS, function(event) {
                        if (_this8._ignoreBackdropClick) {
                            _this8._ignoreBackdropClick = false;
                            return;
                        }
                        if (event.target !== event.currentTarget) {
                            return;
                        }
                        if (_this8._config.backdrop === "static") {
                            _this8._element.focus();
                        } else {
                            _this8.hide();
                        }
                    });
                    if (animate) {
                        Util.reflow(this._backdrop);
                    }
                    $$$1(this._backdrop).addClass(ClassName.SHOW);
                    if (!callback) {
                        return;
                    }
                    if (!animate) {
                        callback();
                        return;
                    }
                    var backdropTransitionDuration = Util.getTransitionDurationFromElement(this._backdrop);
                    $$$1(this._backdrop).one(Util.TRANSITION_END, callback).emulateTransitionEnd(backdropTransitionDuration);
                } else if (!this._isShown && this._backdrop) {
                    $$$1(this._backdrop).removeClass(ClassName.SHOW);
                    var callbackRemove = function callbackRemove() {
                        _this8._removeBackdrop();
                        if (callback) {
                            callback();
                        }
                    };
                    if ($$$1(this._element).hasClass(ClassName.FADE)) {
                        var _backdropTransitionDuration = Util.getTransitionDurationFromElement(this._backdrop);
                        $$$1(this._backdrop).one(Util.TRANSITION_END, callbackRemove).emulateTransitionEnd(_backdropTransitionDuration);
                    } else {
                        callbackRemove();
                    }
                } else if (callback) {
                    callback();
                }
            };
            _proto._adjustDialog = function _adjustDialog() {
                var isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;
                if (!this._isBodyOverflowing && isModalOverflowing) {
                    this._element.style.paddingLeft = this._scrollbarWidth + "px";
                }
                if (this._isBodyOverflowing && !isModalOverflowing) {
                    this._element.style.paddingRight = this._scrollbarWidth + "px";
                }
            };
            _proto._resetAdjustments = function _resetAdjustments() {
                this._element.style.paddingLeft = "";
                this._element.style.paddingRight = "";
            };
            _proto._checkScrollbar = function _checkScrollbar() {
                var rect = document.body.getBoundingClientRect();
                this._isBodyOverflowing = rect.left + rect.right < window.innerWidth;
                this._scrollbarWidth = this._getScrollbarWidth();
            };
            _proto._setScrollbar = function _setScrollbar() {
                var _this9 = this;
                if (this._isBodyOverflowing) {
                    $$$1(Selector.FIXED_CONTENT).each(function(index, element) {
                        var actualPadding = $$$1(element)[0].style.paddingRight;
                        var calculatedPadding = $$$1(element).css("padding-right");
                        $$$1(element).data("padding-right", actualPadding).css("padding-right", parseFloat(calculatedPadding) + _this9._scrollbarWidth + "px");
                    });
                    $$$1(Selector.STICKY_CONTENT).each(function(index, element) {
                        var actualMargin = $$$1(element)[0].style.marginRight;
                        var calculatedMargin = $$$1(element).css("margin-right");
                        $$$1(element).data("margin-right", actualMargin).css("margin-right", parseFloat(calculatedMargin) - _this9._scrollbarWidth + "px");
                    });
                    $$$1(Selector.NAVBAR_TOGGLER).each(function(index, element) {
                        var actualMargin = $$$1(element)[0].style.marginRight;
                        var calculatedMargin = $$$1(element).css("margin-right");
                        $$$1(element).data("margin-right", actualMargin).css("margin-right", parseFloat(calculatedMargin) + _this9._scrollbarWidth + "px");
                    });
                    var actualPadding = document.body.style.paddingRight;
                    var calculatedPadding = $$$1(document.body).css("padding-right");
                    $$$1(document.body).data("padding-right", actualPadding).css("padding-right", parseFloat(calculatedPadding) + this._scrollbarWidth + "px");
                }
            };
            _proto._resetScrollbar = function _resetScrollbar() {
                $$$1(Selector.FIXED_CONTENT).each(function(index, element) {
                    var padding = $$$1(element).data("padding-right");
                    if (typeof padding !== "undefined") {
                        $$$1(element).css("padding-right", padding).removeData("padding-right");
                    }
                });
                $$$1(Selector.STICKY_CONTENT + ", " + Selector.NAVBAR_TOGGLER).each(function(index, element) {
                    var margin = $$$1(element).data("margin-right");
                    if (typeof margin !== "undefined") {
                        $$$1(element).css("margin-right", margin).removeData("margin-right");
                    }
                });
                var padding = $$$1(document.body).data("padding-right");
                if (typeof padding !== "undefined") {
                    $$$1(document.body).css("padding-right", padding).removeData("padding-right");
                }
            };
            _proto._getScrollbarWidth = function _getScrollbarWidth() {
                var scrollDiv = document.createElement("div");
                scrollDiv.className = ClassName.SCROLLBAR_MEASURER;
                document.body.appendChild(scrollDiv);
                var scrollbarWidth = scrollDiv.getBoundingClientRect().width - scrollDiv.clientWidth;
                document.body.removeChild(scrollDiv);
                return scrollbarWidth;
            };
            Modal._jQueryInterface = function _jQueryInterface(config, relatedTarget) {
                return this.each(function() {
                    var data = $$$1(this).data(DATA_KEY);
                    var _config = _objectSpread({}, Default, $$$1(this).data(), typeof config === "object" && config ? config : {});
                    if (!data) {
                        data = new Modal(this, _config);
                        $$$1(this).data(DATA_KEY, data);
                    }
                    if (typeof config === "string") {
                        if (typeof data[config] === "undefined") {
                            throw new TypeError('No method named "' + config + '"');
                        }
                        data[config](relatedTarget);
                    } else if (_config.show) {
                        data.show(relatedTarget);
                    }
                });
            };
            _createClass(Modal, null, [ {
                key: "VERSION",
                get: function get() {
                    return VERSION;
                }
            }, {
                key: "Default",
                get: function get() {
                    return Default;
                }
            } ]);
            return Modal;
        }();
        $$$1(document).on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE, function(event) {
            var _this10 = this;
            var target;
            var selector = Util.getSelectorFromElement(this);
            if (selector) {
                target = $$$1(selector)[0];
            }
            var config = $$$1(target).data(DATA_KEY) ? "toggle" : _objectSpread({}, $$$1(target).data(), $$$1(this).data());
            if (this.tagName === "A" || this.tagName === "AREA") {
                event.preventDefault();
            }
            var $target = $$$1(target).one(Event.SHOW, function(showEvent) {
                if (showEvent.isDefaultPrevented()) {
                    return;
                }
                $target.one(Event.HIDDEN, function() {
                    if ($$$1(_this10).is(":visible")) {
                        _this10.focus();
                    }
                });
            });
            Modal._jQueryInterface.call($$$1(target), config, this);
        });
        $$$1.fn[NAME] = Modal._jQueryInterface;
        $$$1.fn[NAME].Constructor = Modal;
        $$$1.fn[NAME].noConflict = function() {
            $$$1.fn[NAME] = JQUERY_NO_CONFLICT;
            return Modal._jQueryInterface;
        };
        return Modal;
    }($);
    var Tooltip = function($$$1) {
        var NAME = "tooltip";
        var VERSION = "4.1.1";
        var DATA_KEY = "bs.tooltip";
        var EVENT_KEY = "." + DATA_KEY;
        var JQUERY_NO_CONFLICT = $$$1.fn[NAME];
        var CLASS_PREFIX = "bs-tooltip";
        var BSCLS_PREFIX_REGEX = new RegExp("(^|\\s)" + CLASS_PREFIX + "\\S+", "g");
        var DefaultType = {
            animation: "boolean",
            template: "string",
            title: "(string|element|function)",
            trigger: "string",
            delay: "(number|object)",
            html: "boolean",
            selector: "(string|boolean)",
            placement: "(string|function)",
            offset: "(number|string)",
            container: "(string|element|boolean)",
            fallbackPlacement: "(string|array)",
            boundary: "(string|element)"
        };
        var AttachmentMap = {
            AUTO: "auto",
            TOP: "top",
            RIGHT: "right",
            BOTTOM: "bottom",
            LEFT: "left"
        };
        var Default = {
            animation: true,
            template: '<div class="tooltip" role="tooltip">' + '<div class="arrow"></div>' + '<div class="tooltip-inner"></div></div>',
            trigger: "hover focus",
            title: "",
            delay: 0,
            html: false,
            selector: false,
            placement: "top",
            offset: 0,
            container: false,
            fallbackPlacement: "flip",
            boundary: "scrollParent"
        };
        var HoverState = {
            SHOW: "show",
            OUT: "out"
        };
        var Event = {
            HIDE: "hide" + EVENT_KEY,
            HIDDEN: "hidden" + EVENT_KEY,
            SHOW: "show" + EVENT_KEY,
            SHOWN: "shown" + EVENT_KEY,
            INSERTED: "inserted" + EVENT_KEY,
            CLICK: "click" + EVENT_KEY,
            FOCUSIN: "focusin" + EVENT_KEY,
            FOCUSOUT: "focusout" + EVENT_KEY,
            MOUSEENTER: "mouseenter" + EVENT_KEY,
            MOUSELEAVE: "mouseleave" + EVENT_KEY
        };
        var ClassName = {
            FADE: "fade",
            SHOW: "show"
        };
        var Selector = {
            TOOLTIP: ".tooltip",
            TOOLTIP_INNER: ".tooltip-inner",
            ARROW: ".arrow"
        };
        var Trigger = {
            HOVER: "hover",
            FOCUS: "focus",
            CLICK: "click",
            MANUAL: "manual"
        };
        var Tooltip = function() {
            function Tooltip(element, config) {
                if (typeof Popper === "undefined") {
                    throw new TypeError("Bootstrap tooltips require Popper.js (https://popper.js.org)");
                }
                this._isEnabled = true;
                this._timeout = 0;
                this._hoverState = "";
                this._activeTrigger = {};
                this._popper = null;
                this.element = element;
                this.config = this._getConfig(config);
                this.tip = null;
                this._setListeners();
            }
            var _proto = Tooltip.prototype;
            _proto.enable = function enable() {
                this._isEnabled = true;
            };
            _proto.disable = function disable() {
                this._isEnabled = false;
            };
            _proto.toggleEnabled = function toggleEnabled() {
                this._isEnabled = !this._isEnabled;
            };
            _proto.toggle = function toggle(event) {
                if (!this._isEnabled) {
                    return;
                }
                if (event) {
                    var dataKey = this.constructor.DATA_KEY;
                    var context = $$$1(event.currentTarget).data(dataKey);
                    if (!context) {
                        context = new this.constructor(event.currentTarget, this._getDelegateConfig());
                        $$$1(event.currentTarget).data(dataKey, context);
                    }
                    context._activeTrigger.click = !context._activeTrigger.click;
                    if (context._isWithActiveTrigger()) {
                        context._enter(null, context);
                    } else {
                        context._leave(null, context);
                    }
                } else {
                    if ($$$1(this.getTipElement()).hasClass(ClassName.SHOW)) {
                        this._leave(null, this);
                        return;
                    }
                    this._enter(null, this);
                }
            };
            _proto.dispose = function dispose() {
                clearTimeout(this._timeout);
                $$$1.removeData(this.element, this.constructor.DATA_KEY);
                $$$1(this.element).off(this.constructor.EVENT_KEY);
                $$$1(this.element).closest(".modal").off("hide.bs.modal");
                if (this.tip) {
                    $$$1(this.tip).remove();
                }
                this._isEnabled = null;
                this._timeout = null;
                this._hoverState = null;
                this._activeTrigger = null;
                if (this._popper !== null) {
                    this._popper.destroy();
                }
                this._popper = null;
                this.element = null;
                this.config = null;
                this.tip = null;
            };
            _proto.show = function show() {
                var _this = this;
                if ($$$1(this.element).css("display") === "none") {
                    throw new Error("Please use show on visible elements");
                }
                var showEvent = $$$1.Event(this.constructor.Event.SHOW);
                if (this.isWithContent() && this._isEnabled) {
                    $$$1(this.element).trigger(showEvent);
                    var isInTheDom = $$$1.contains(this.element.ownerDocument.documentElement, this.element);
                    if (showEvent.isDefaultPrevented() || !isInTheDom) {
                        return;
                    }
                    var tip = this.getTipElement();
                    var tipId = Util.getUID(this.constructor.NAME);
                    tip.setAttribute("id", tipId);
                    this.element.setAttribute("aria-describedby", tipId);
                    this.setContent();
                    if (this.config.animation) {
                        $$$1(tip).addClass(ClassName.FADE);
                    }
                    var placement = typeof this.config.placement === "function" ? this.config.placement.call(this, tip, this.element) : this.config.placement;
                    var attachment = this._getAttachment(placement);
                    this.addAttachmentClass(attachment);
                    var container = this.config.container === false ? document.body : $$$1(this.config.container);
                    $$$1(tip).data(this.constructor.DATA_KEY, this);
                    if (!$$$1.contains(this.element.ownerDocument.documentElement, this.tip)) {
                        $$$1(tip).appendTo(container);
                    }
                    $$$1(this.element).trigger(this.constructor.Event.INSERTED);
                    this._popper = new Popper(this.element, tip, {
                        placement: attachment,
                        modifiers: {
                            offset: {
                                offset: this.config.offset
                            },
                            flip: {
                                behavior: this.config.fallbackPlacement
                            },
                            arrow: {
                                element: Selector.ARROW
                            },
                            preventOverflow: {
                                boundariesElement: this.config.boundary
                            }
                        },
                        onCreate: function onCreate(data) {
                            if (data.originalPlacement !== data.placement) {
                                _this._handlePopperPlacementChange(data);
                            }
                        },
                        onUpdate: function onUpdate(data) {
                            _this._handlePopperPlacementChange(data);
                        }
                    });
                    $$$1(tip).addClass(ClassName.SHOW);
                    if ("ontouchstart" in document.documentElement) {
                        $$$1(document.body).children().on("mouseover", null, $$$1.noop);
                    }
                    var complete = function complete() {
                        if (_this.config.animation) {
                            _this._fixTransition();
                        }
                        var prevHoverState = _this._hoverState;
                        _this._hoverState = null;
                        $$$1(_this.element).trigger(_this.constructor.Event.SHOWN);
                        if (prevHoverState === HoverState.OUT) {
                            _this._leave(null, _this);
                        }
                    };
                    if ($$$1(this.tip).hasClass(ClassName.FADE)) {
                        var transitionDuration = Util.getTransitionDurationFromElement(this.tip);
                        $$$1(this.tip).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);
                    } else {
                        complete();
                    }
                }
            };
            _proto.hide = function hide(callback) {
                var _this2 = this;
                var tip = this.getTipElement();
                var hideEvent = $$$1.Event(this.constructor.Event.HIDE);
                var complete = function complete() {
                    if (_this2._hoverState !== HoverState.SHOW && tip.parentNode) {
                        tip.parentNode.removeChild(tip);
                    }
                    _this2._cleanTipClass();
                    _this2.element.removeAttribute("aria-describedby");
                    $$$1(_this2.element).trigger(_this2.constructor.Event.HIDDEN);
                    if (_this2._popper !== null) {
                        _this2._popper.destroy();
                    }
                    if (callback) {
                        callback();
                    }
                };
                $$$1(this.element).trigger(hideEvent);
                if (hideEvent.isDefaultPrevented()) {
                    return;
                }
                $$$1(tip).removeClass(ClassName.SHOW);
                if ("ontouchstart" in document.documentElement) {
                    $$$1(document.body).children().off("mouseover", null, $$$1.noop);
                }
                this._activeTrigger[Trigger.CLICK] = false;
                this._activeTrigger[Trigger.FOCUS] = false;
                this._activeTrigger[Trigger.HOVER] = false;
                if ($$$1(this.tip).hasClass(ClassName.FADE)) {
                    var transitionDuration = Util.getTransitionDurationFromElement(tip);
                    $$$1(tip).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);
                } else {
                    complete();
                }
                this._hoverState = "";
            };
            _proto.update = function update() {
                if (this._popper !== null) {
                    this._popper.scheduleUpdate();
                }
            };
            _proto.isWithContent = function isWithContent() {
                return Boolean(this.getTitle());
            };
            _proto.addAttachmentClass = function addAttachmentClass(attachment) {
                $$$1(this.getTipElement()).addClass(CLASS_PREFIX + "-" + attachment);
            };
            _proto.getTipElement = function getTipElement() {
                this.tip = this.tip || $$$1(this.config.template)[0];
                return this.tip;
            };
            _proto.setContent = function setContent() {
                var $tip = $$$1(this.getTipElement());
                this.setElementContent($tip.find(Selector.TOOLTIP_INNER), this.getTitle());
                $tip.removeClass(ClassName.FADE + " " + ClassName.SHOW);
            };
            _proto.setElementContent = function setElementContent($element, content) {
                var html = this.config.html;
                if (typeof content === "object" && (content.nodeType || content.jquery)) {
                    if (html) {
                        if (!$$$1(content).parent().is($element)) {
                            $element.empty().append(content);
                        }
                    } else {
                        $element.text($$$1(content).text());
                    }
                } else {
                    $element[html ? "html" : "text"](content);
                }
            };
            _proto.getTitle = function getTitle() {
                var title = this.element.getAttribute("data-original-title");
                if (!title) {
                    title = typeof this.config.title === "function" ? this.config.title.call(this.element) : this.config.title;
                }
                return title;
            };
            _proto._getAttachment = function _getAttachment(placement) {
                return AttachmentMap[placement.toUpperCase()];
            };
            _proto._setListeners = function _setListeners() {
                var _this3 = this;
                var triggers = this.config.trigger.split(" ");
                triggers.forEach(function(trigger) {
                    if (trigger === "click") {
                        $$$1(_this3.element).on(_this3.constructor.Event.CLICK, _this3.config.selector, function(event) {
                            return _this3.toggle(event);
                        });
                    } else if (trigger !== Trigger.MANUAL) {
                        var eventIn = trigger === Trigger.HOVER ? _this3.constructor.Event.MOUSEENTER : _this3.constructor.Event.FOCUSIN;
                        var eventOut = trigger === Trigger.HOVER ? _this3.constructor.Event.MOUSELEAVE : _this3.constructor.Event.FOCUSOUT;
                        $$$1(_this3.element).on(eventIn, _this3.config.selector, function(event) {
                            return _this3._enter(event);
                        }).on(eventOut, _this3.config.selector, function(event) {
                            return _this3._leave(event);
                        });
                    }
                    $$$1(_this3.element).closest(".modal").on("hide.bs.modal", function() {
                        return _this3.hide();
                    });
                });
                if (this.config.selector) {
                    this.config = _objectSpread({}, this.config, {
                        trigger: "manual",
                        selector: ""
                    });
                } else {
                    this._fixTitle();
                }
            };
            _proto._fixTitle = function _fixTitle() {
                var titleType = typeof this.element.getAttribute("data-original-title");
                if (this.element.getAttribute("title") || titleType !== "string") {
                    this.element.setAttribute("data-original-title", this.element.getAttribute("title") || "");
                    this.element.setAttribute("title", "");
                }
            };
            _proto._enter = function _enter(event, context) {
                var dataKey = this.constructor.DATA_KEY;
                context = context || $$$1(event.currentTarget).data(dataKey);
                if (!context) {
                    context = new this.constructor(event.currentTarget, this._getDelegateConfig());
                    $$$1(event.currentTarget).data(dataKey, context);
                }
                if (event) {
                    context._activeTrigger[event.type === "focusin" ? Trigger.FOCUS : Trigger.HOVER] = true;
                }
                if ($$$1(context.getTipElement()).hasClass(ClassName.SHOW) || context._hoverState === HoverState.SHOW) {
                    context._hoverState = HoverState.SHOW;
                    return;
                }
                clearTimeout(context._timeout);
                context._hoverState = HoverState.SHOW;
                if (!context.config.delay || !context.config.delay.show) {
                    context.show();
                    return;
                }
                context._timeout = setTimeout(function() {
                    if (context._hoverState === HoverState.SHOW) {
                        context.show();
                    }
                }, context.config.delay.show);
            };
            _proto._leave = function _leave(event, context) {
                var dataKey = this.constructor.DATA_KEY;
                context = context || $$$1(event.currentTarget).data(dataKey);
                if (!context) {
                    context = new this.constructor(event.currentTarget, this._getDelegateConfig());
                    $$$1(event.currentTarget).data(dataKey, context);
                }
                if (event) {
                    context._activeTrigger[event.type === "focusout" ? Trigger.FOCUS : Trigger.HOVER] = false;
                }
                if (context._isWithActiveTrigger()) {
                    return;
                }
                clearTimeout(context._timeout);
                context._hoverState = HoverState.OUT;
                if (!context.config.delay || !context.config.delay.hide) {
                    context.hide();
                    return;
                }
                context._timeout = setTimeout(function() {
                    if (context._hoverState === HoverState.OUT) {
                        context.hide();
                    }
                }, context.config.delay.hide);
            };
            _proto._isWithActiveTrigger = function _isWithActiveTrigger() {
                for (var trigger in this._activeTrigger) {
                    if (this._activeTrigger[trigger]) {
                        return true;
                    }
                }
                return false;
            };
            _proto._getConfig = function _getConfig(config) {
                config = _objectSpread({}, this.constructor.Default, $$$1(this.element).data(), typeof config === "object" && config ? config : {});
                if (typeof config.delay === "number") {
                    config.delay = {
                        show: config.delay,
                        hide: config.delay
                    };
                }
                if (typeof config.title === "number") {
                    config.title = config.title.toString();
                }
                if (typeof config.content === "number") {
                    config.content = config.content.toString();
                }
                Util.typeCheckConfig(NAME, config, this.constructor.DefaultType);
                return config;
            };
            _proto._getDelegateConfig = function _getDelegateConfig() {
                var config = {};
                if (this.config) {
                    for (var key in this.config) {
                        if (this.constructor.Default[key] !== this.config[key]) {
                            config[key] = this.config[key];
                        }
                    }
                }
                return config;
            };
            _proto._cleanTipClass = function _cleanTipClass() {
                var $tip = $$$1(this.getTipElement());
                var tabClass = $tip.attr("class").match(BSCLS_PREFIX_REGEX);
                if (tabClass !== null && tabClass.length > 0) {
                    $tip.removeClass(tabClass.join(""));
                }
            };
            _proto._handlePopperPlacementChange = function _handlePopperPlacementChange(data) {
                this._cleanTipClass();
                this.addAttachmentClass(this._getAttachment(data.placement));
            };
            _proto._fixTransition = function _fixTransition() {
                var tip = this.getTipElement();
                var initConfigAnimation = this.config.animation;
                if (tip.getAttribute("x-placement") !== null) {
                    return;
                }
                $$$1(tip).removeClass(ClassName.FADE);
                this.config.animation = false;
                this.hide();
                this.show();
                this.config.animation = initConfigAnimation;
            };
            Tooltip._jQueryInterface = function _jQueryInterface(config) {
                return this.each(function() {
                    var data = $$$1(this).data(DATA_KEY);
                    var _config = typeof config === "object" && config;
                    if (!data && /dispose|hide/.test(config)) {
                        return;
                    }
                    if (!data) {
                        data = new Tooltip(this, _config);
                        $$$1(this).data(DATA_KEY, data);
                    }
                    if (typeof config === "string") {
                        if (typeof data[config] === "undefined") {
                            throw new TypeError('No method named "' + config + '"');
                        }
                        data[config]();
                    }
                });
            };
            _createClass(Tooltip, null, [ {
                key: "VERSION",
                get: function get() {
                    return VERSION;
                }
            }, {
                key: "Default",
                get: function get() {
                    return Default;
                }
            }, {
                key: "NAME",
                get: function get() {
                    return NAME;
                }
            }, {
                key: "DATA_KEY",
                get: function get() {
                    return DATA_KEY;
                }
            }, {
                key: "Event",
                get: function get() {
                    return Event;
                }
            }, {
                key: "EVENT_KEY",
                get: function get() {
                    return EVENT_KEY;
                }
            }, {
                key: "DefaultType",
                get: function get() {
                    return DefaultType;
                }
            } ]);
            return Tooltip;
        }();
        $$$1.fn[NAME] = Tooltip._jQueryInterface;
        $$$1.fn[NAME].Constructor = Tooltip;
        $$$1.fn[NAME].noConflict = function() {
            $$$1.fn[NAME] = JQUERY_NO_CONFLICT;
            return Tooltip._jQueryInterface;
        };
        return Tooltip;
    }($, Popper);
    var Popover = function($$$1) {
        var NAME = "popover";
        var VERSION = "4.1.1";
        var DATA_KEY = "bs.popover";
        var EVENT_KEY = "." + DATA_KEY;
        var JQUERY_NO_CONFLICT = $$$1.fn[NAME];
        var CLASS_PREFIX = "bs-popover";
        var BSCLS_PREFIX_REGEX = new RegExp("(^|\\s)" + CLASS_PREFIX + "\\S+", "g");
        var Default = _objectSpread({}, Tooltip.Default, {
            placement: "right",
            trigger: "click",
            content: "",
            template: '<div class="popover" role="tooltip">' + '<div class="arrow"></div>' + '<h3 class="popover-header"></h3>' + '<div class="popover-body"></div></div>'
        });
        var DefaultType = _objectSpread({}, Tooltip.DefaultType, {
            content: "(string|element|function)"
        });
        var ClassName = {
            FADE: "fade",
            SHOW: "show"
        };
        var Selector = {
            TITLE: ".popover-header",
            CONTENT: ".popover-body"
        };
        var Event = {
            HIDE: "hide" + EVENT_KEY,
            HIDDEN: "hidden" + EVENT_KEY,
            SHOW: "show" + EVENT_KEY,
            SHOWN: "shown" + EVENT_KEY,
            INSERTED: "inserted" + EVENT_KEY,
            CLICK: "click" + EVENT_KEY,
            FOCUSIN: "focusin" + EVENT_KEY,
            FOCUSOUT: "focusout" + EVENT_KEY,
            MOUSEENTER: "mouseenter" + EVENT_KEY,
            MOUSELEAVE: "mouseleave" + EVENT_KEY
        };
        var Popover = function(_Tooltip) {
            _inheritsLoose(Popover, _Tooltip);
            function Popover() {
                return _Tooltip.apply(this, arguments) || this;
            }
            var _proto = Popover.prototype;
            _proto.isWithContent = function isWithContent() {
                return this.getTitle() || this._getContent();
            };
            _proto.addAttachmentClass = function addAttachmentClass(attachment) {
                $$$1(this.getTipElement()).addClass(CLASS_PREFIX + "-" + attachment);
            };
            _proto.getTipElement = function getTipElement() {
                this.tip = this.tip || $$$1(this.config.template)[0];
                return this.tip;
            };
            _proto.setContent = function setContent() {
                var $tip = $$$1(this.getTipElement());
                this.setElementContent($tip.find(Selector.TITLE), this.getTitle());
                var content = this._getContent();
                if (typeof content === "function") {
                    content = content.call(this.element);
                }
                this.setElementContent($tip.find(Selector.CONTENT), content);
                $tip.removeClass(ClassName.FADE + " " + ClassName.SHOW);
            };
            _proto._getContent = function _getContent() {
                return this.element.getAttribute("data-content") || this.config.content;
            };
            _proto._cleanTipClass = function _cleanTipClass() {
                var $tip = $$$1(this.getTipElement());
                var tabClass = $tip.attr("class").match(BSCLS_PREFIX_REGEX);
                if (tabClass !== null && tabClass.length > 0) {
                    $tip.removeClass(tabClass.join(""));
                }
            };
            Popover._jQueryInterface = function _jQueryInterface(config) {
                return this.each(function() {
                    var data = $$$1(this).data(DATA_KEY);
                    var _config = typeof config === "object" ? config : null;
                    if (!data && /destroy|hide/.test(config)) {
                        return;
                    }
                    if (!data) {
                        data = new Popover(this, _config);
                        $$$1(this).data(DATA_KEY, data);
                    }
                    if (typeof config === "string") {
                        if (typeof data[config] === "undefined") {
                            throw new TypeError('No method named "' + config + '"');
                        }
                        data[config]();
                    }
                });
            };
            _createClass(Popover, null, [ {
                key: "VERSION",
                get: function get() {
                    return VERSION;
                }
            }, {
                key: "Default",
                get: function get() {
                    return Default;
                }
            }, {
                key: "NAME",
                get: function get() {
                    return NAME;
                }
            }, {
                key: "DATA_KEY",
                get: function get() {
                    return DATA_KEY;
                }
            }, {
                key: "Event",
                get: function get() {
                    return Event;
                }
            }, {
                key: "EVENT_KEY",
                get: function get() {
                    return EVENT_KEY;
                }
            }, {
                key: "DefaultType",
                get: function get() {
                    return DefaultType;
                }
            } ]);
            return Popover;
        }(Tooltip);
        $$$1.fn[NAME] = Popover._jQueryInterface;
        $$$1.fn[NAME].Constructor = Popover;
        $$$1.fn[NAME].noConflict = function() {
            $$$1.fn[NAME] = JQUERY_NO_CONFLICT;
            return Popover._jQueryInterface;
        };
        return Popover;
    }($);
    var ScrollSpy = function($$$1) {
        var NAME = "scrollspy";
        var VERSION = "4.1.1";
        var DATA_KEY = "bs.scrollspy";
        var EVENT_KEY = "." + DATA_KEY;
        var DATA_API_KEY = ".data-api";
        var JQUERY_NO_CONFLICT = $$$1.fn[NAME];
        var Default = {
            offset: 10,
            method: "auto",
            target: ""
        };
        var DefaultType = {
            offset: "number",
            method: "string",
            target: "(string|element)"
        };
        var Event = {
            ACTIVATE: "activate" + EVENT_KEY,
            SCROLL: "scroll" + EVENT_KEY,
            LOAD_DATA_API: "load" + EVENT_KEY + DATA_API_KEY
        };
        var ClassName = {
            DROPDOWN_ITEM: "dropdown-item",
            DROPDOWN_MENU: "dropdown-menu",
            ACTIVE: "active"
        };
        var Selector = {
            DATA_SPY: '[data-spy="scroll"]',
            ACTIVE: ".active",
            NAV_LIST_GROUP: ".nav, .list-group",
            NAV_LINKS: ".nav-link",
            NAV_ITEMS: ".nav-item",
            LIST_ITEMS: ".list-group-item",
            DROPDOWN: ".dropdown",
            DROPDOWN_ITEMS: ".dropdown-item",
            DROPDOWN_TOGGLE: ".dropdown-toggle"
        };
        var OffsetMethod = {
            OFFSET: "offset",
            POSITION: "position"
        };
        var ScrollSpy = function() {
            function ScrollSpy(element, config) {
                var _this = this;
                this._element = element;
                this._scrollElement = element.tagName === "BODY" ? window : element;
                this._config = this._getConfig(config);
                this._selector = this._config.target + " " + Selector.NAV_LINKS + "," + (this._config.target + " " + Selector.LIST_ITEMS + ",") + (this._config.target + " " + Selector.DROPDOWN_ITEMS);
                this._offsets = [];
                this._targets = [];
                this._activeTarget = null;
                this._scrollHeight = 0;
                $$$1(this._scrollElement).on(Event.SCROLL, function(event) {
                    return _this._process(event);
                });
                this.refresh();
                this._process();
            }
            var _proto = ScrollSpy.prototype;
            _proto.refresh = function refresh() {
                var _this2 = this;
                var autoMethod = this._scrollElement === this._scrollElement.window ? OffsetMethod.OFFSET : OffsetMethod.POSITION;
                var offsetMethod = this._config.method === "auto" ? autoMethod : this._config.method;
                var offsetBase = offsetMethod === OffsetMethod.POSITION ? this._getScrollTop() : 0;
                this._offsets = [];
                this._targets = [];
                this._scrollHeight = this._getScrollHeight();
                var targets = $$$1.makeArray($$$1(this._selector));
                targets.map(function(element) {
                    var target;
                    var targetSelector = Util.getSelectorFromElement(element);
                    if (targetSelector) {
                        target = $$$1(targetSelector)[0];
                    }
                    if (target) {
                        var targetBCR = target.getBoundingClientRect();
                        if (targetBCR.width || targetBCR.height) {
                            return [ $$$1(target)[offsetMethod]().top + offsetBase, targetSelector ];
                        }
                    }
                    return null;
                }).filter(function(item) {
                    return item;
                }).sort(function(a, b) {
                    return a[0] - b[0];
                }).forEach(function(item) {
                    _this2._offsets.push(item[0]);
                    _this2._targets.push(item[1]);
                });
            };
            _proto.dispose = function dispose() {
                $$$1.removeData(this._element, DATA_KEY);
                $$$1(this._scrollElement).off(EVENT_KEY);
                this._element = null;
                this._scrollElement = null;
                this._config = null;
                this._selector = null;
                this._offsets = null;
                this._targets = null;
                this._activeTarget = null;
                this._scrollHeight = null;
            };
            _proto._getConfig = function _getConfig(config) {
                config = _objectSpread({}, Default, typeof config === "object" && config ? config : {});
                if (typeof config.target !== "string") {
                    var id = $$$1(config.target).attr("id");
                    if (!id) {
                        id = Util.getUID(NAME);
                        $$$1(config.target).attr("id", id);
                    }
                    config.target = "#" + id;
                }
                Util.typeCheckConfig(NAME, config, DefaultType);
                return config;
            };
            _proto._getScrollTop = function _getScrollTop() {
                return this._scrollElement === window ? this._scrollElement.pageYOffset : this._scrollElement.scrollTop;
            };
            _proto._getScrollHeight = function _getScrollHeight() {
                return this._scrollElement.scrollHeight || Math.max(document.body.scrollHeight, document.documentElement.scrollHeight);
            };
            _proto._getOffsetHeight = function _getOffsetHeight() {
                return this._scrollElement === window ? window.innerHeight : this._scrollElement.getBoundingClientRect().height;
            };
            _proto._process = function _process() {
                var scrollTop = this._getScrollTop() + this._config.offset;
                var scrollHeight = this._getScrollHeight();
                var maxScroll = this._config.offset + scrollHeight - this._getOffsetHeight();
                if (this._scrollHeight !== scrollHeight) {
                    this.refresh();
                }
                if (scrollTop >= maxScroll) {
                    var target = this._targets[this._targets.length - 1];
                    if (this._activeTarget !== target) {
                        this._activate(target);
                    }
                    return;
                }
                if (this._activeTarget && scrollTop < this._offsets[0] && this._offsets[0] > 0) {
                    this._activeTarget = null;
                    this._clear();
                    return;
                }
                for (var i = this._offsets.length; i--; ) {
                    var isActiveTarget = this._activeTarget !== this._targets[i] && scrollTop >= this._offsets[i] && (typeof this._offsets[i + 1] === "undefined" || scrollTop < this._offsets[i + 1]);
                    if (isActiveTarget) {
                        this._activate(this._targets[i]);
                    }
                }
            };
            _proto._activate = function _activate(target) {
                this._activeTarget = target;
                this._clear();
                var queries = this._selector.split(",");
                queries = queries.map(function(selector) {
                    return selector + '[data-target="' + target + '"],' + (selector + '[href="' + target + '"]');
                });
                var $link = $$$1(queries.join(","));
                if ($link.hasClass(ClassName.DROPDOWN_ITEM)) {
                    $link.closest(Selector.DROPDOWN).find(Selector.DROPDOWN_TOGGLE).addClass(ClassName.ACTIVE);
                    $link.addClass(ClassName.ACTIVE);
                } else {
                    $link.addClass(ClassName.ACTIVE);
                    $link.parents(Selector.NAV_LIST_GROUP).prev(Selector.NAV_LINKS + ", " + Selector.LIST_ITEMS).addClass(ClassName.ACTIVE);
                    $link.parents(Selector.NAV_LIST_GROUP).prev(Selector.NAV_ITEMS).children(Selector.NAV_LINKS).addClass(ClassName.ACTIVE);
                }
                $$$1(this._scrollElement).trigger(Event.ACTIVATE, {
                    relatedTarget: target
                });
            };
            _proto._clear = function _clear() {
                $$$1(this._selector).filter(Selector.ACTIVE).removeClass(ClassName.ACTIVE);
            };
            ScrollSpy._jQueryInterface = function _jQueryInterface(config) {
                return this.each(function() {
                    var data = $$$1(this).data(DATA_KEY);
                    var _config = typeof config === "object" && config;
                    if (!data) {
                        data = new ScrollSpy(this, _config);
                        $$$1(this).data(DATA_KEY, data);
                    }
                    if (typeof config === "string") {
                        if (typeof data[config] === "undefined") {
                            throw new TypeError('No method named "' + config + '"');
                        }
                        data[config]();
                    }
                });
            };
            _createClass(ScrollSpy, null, [ {
                key: "VERSION",
                get: function get() {
                    return VERSION;
                }
            }, {
                key: "Default",
                get: function get() {
                    return Default;
                }
            } ]);
            return ScrollSpy;
        }();
        $$$1(window).on(Event.LOAD_DATA_API, function() {
            var scrollSpys = $$$1.makeArray($$$1(Selector.DATA_SPY));
            for (var i = scrollSpys.length; i--; ) {
                var $spy = $$$1(scrollSpys[i]);
                ScrollSpy._jQueryInterface.call($spy, $spy.data());
            }
        });
        $$$1.fn[NAME] = ScrollSpy._jQueryInterface;
        $$$1.fn[NAME].Constructor = ScrollSpy;
        $$$1.fn[NAME].noConflict = function() {
            $$$1.fn[NAME] = JQUERY_NO_CONFLICT;
            return ScrollSpy._jQueryInterface;
        };
        return ScrollSpy;
    }($);
    var Tab = function($$$1) {
        var NAME = "tab";
        var VERSION = "4.1.1";
        var DATA_KEY = "bs.tab";
        var EVENT_KEY = "." + DATA_KEY;
        var DATA_API_KEY = ".data-api";
        var JQUERY_NO_CONFLICT = $$$1.fn[NAME];
        var Event = {
            HIDE: "hide" + EVENT_KEY,
            HIDDEN: "hidden" + EVENT_KEY,
            SHOW: "show" + EVENT_KEY,
            SHOWN: "shown" + EVENT_KEY,
            CLICK_DATA_API: "click" + EVENT_KEY + DATA_API_KEY
        };
        var ClassName = {
            DROPDOWN_MENU: "dropdown-menu",
            ACTIVE: "active",
            DISABLED: "disabled",
            FADE: "fade",
            SHOW: "show"
        };
        var Selector = {
            DROPDOWN: ".dropdown",
            NAV_LIST_GROUP: ".nav, .list-group",
            ACTIVE: ".active",
            ACTIVE_UL: "> li > .active",
            DATA_TOGGLE: '[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]',
            DROPDOWN_TOGGLE: ".dropdown-toggle",
            DROPDOWN_ACTIVE_CHILD: "> .dropdown-menu .active"
        };
        var Tab = function() {
            function Tab(element) {
                this._element = element;
            }
            var _proto = Tab.prototype;
            _proto.show = function show() {
                var _this = this;
                if (this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE && $$$1(this._element).hasClass(ClassName.ACTIVE) || $$$1(this._element).hasClass(ClassName.DISABLED)) {
                    return;
                }
                var target;
                var previous;
                var listElement = $$$1(this._element).closest(Selector.NAV_LIST_GROUP)[0];
                var selector = Util.getSelectorFromElement(this._element);
                if (listElement) {
                    var itemSelector = listElement.nodeName === "UL" ? Selector.ACTIVE_UL : Selector.ACTIVE;
                    previous = $$$1.makeArray($$$1(listElement).find(itemSelector));
                    previous = previous[previous.length - 1];
                }
                var hideEvent = $$$1.Event(Event.HIDE, {
                    relatedTarget: this._element
                });
                var showEvent = $$$1.Event(Event.SHOW, {
                    relatedTarget: previous
                });
                if (previous) {
                    $$$1(previous).trigger(hideEvent);
                }
                $$$1(this._element).trigger(showEvent);
                if (showEvent.isDefaultPrevented() || hideEvent.isDefaultPrevented()) {
                    return;
                }
                if (selector) {
                    target = $$$1(selector)[0];
                }
                this._activate(this._element, listElement);
                var complete = function complete() {
                    var hiddenEvent = $$$1.Event(Event.HIDDEN, {
                        relatedTarget: _this._element
                    });
                    var shownEvent = $$$1.Event(Event.SHOWN, {
                        relatedTarget: previous
                    });
                    $$$1(previous).trigger(hiddenEvent);
                    $$$1(_this._element).trigger(shownEvent);
                };
                if (target) {
                    this._activate(target, target.parentNode, complete);
                } else {
                    complete();
                }
            };
            _proto.dispose = function dispose() {
                $$$1.removeData(this._element, DATA_KEY);
                this._element = null;
            };
            _proto._activate = function _activate(element, container, callback) {
                var _this2 = this;
                var activeElements;
                if (container.nodeName === "UL") {
                    activeElements = $$$1(container).find(Selector.ACTIVE_UL);
                } else {
                    activeElements = $$$1(container).children(Selector.ACTIVE);
                }
                var active = activeElements[0];
                var isTransitioning = callback && active && $$$1(active).hasClass(ClassName.FADE);
                var complete = function complete() {
                    return _this2._transitionComplete(element, active, callback);
                };
                if (active && isTransitioning) {
                    var transitionDuration = Util.getTransitionDurationFromElement(active);
                    $$$1(active).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);
                } else {
                    complete();
                }
            };
            _proto._transitionComplete = function _transitionComplete(element, active, callback) {
                if (active) {
                    $$$1(active).removeClass(ClassName.SHOW + " " + ClassName.ACTIVE);
                    var dropdownChild = $$$1(active.parentNode).find(Selector.DROPDOWN_ACTIVE_CHILD)[0];
                    if (dropdownChild) {
                        $$$1(dropdownChild).removeClass(ClassName.ACTIVE);
                    }
                    if (active.getAttribute("role") === "tab") {
                        active.setAttribute("aria-selected", false);
                    }
                }
                $$$1(element).addClass(ClassName.ACTIVE);
                if (element.getAttribute("role") === "tab") {
                    element.setAttribute("aria-selected", true);
                }
                Util.reflow(element);
                $$$1(element).addClass(ClassName.SHOW);
                if (element.parentNode && $$$1(element.parentNode).hasClass(ClassName.DROPDOWN_MENU)) {
                    var dropdownElement = $$$1(element).closest(Selector.DROPDOWN)[0];
                    if (dropdownElement) {
                        $$$1(dropdownElement).find(Selector.DROPDOWN_TOGGLE).addClass(ClassName.ACTIVE);
                    }
                    element.setAttribute("aria-expanded", true);
                }
                if (callback) {
                    callback();
                }
            };
            Tab._jQueryInterface = function _jQueryInterface(config) {
                return this.each(function() {
                    var $this = $$$1(this);
                    var data = $this.data(DATA_KEY);
                    if (!data) {
                        data = new Tab(this);
                        $this.data(DATA_KEY, data);
                    }
                    if (typeof config === "string") {
                        if (typeof data[config] === "undefined") {
                            throw new TypeError('No method named "' + config + '"');
                        }
                        data[config]();
                    }
                });
            };
            _createClass(Tab, null, [ {
                key: "VERSION",
                get: function get() {
                    return VERSION;
                }
            } ]);
            return Tab;
        }();
        $$$1(document).on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE, function(event) {
            event.preventDefault();
            Tab._jQueryInterface.call($$$1(this), "show");
        });
        $$$1.fn[NAME] = Tab._jQueryInterface;
        $$$1.fn[NAME].Constructor = Tab;
        $$$1.fn[NAME].noConflict = function() {
            $$$1.fn[NAME] = JQUERY_NO_CONFLICT;
            return Tab._jQueryInterface;
        };
        return Tab;
    }($);
    (function($$$1) {
        if (typeof $$$1 === "undefined") {
            throw new TypeError("Bootstrap's JavaScript requires jQuery. jQuery must be included before Bootstrap's JavaScript.");
        }
        var version = $$$1.fn.jquery.split(" ")[0].split(".");
        var minMajor = 1;
        var ltMajor = 2;
        var minMinor = 9;
        var minPatch = 1;
        var maxMajor = 4;
        if (version[0] < ltMajor && version[1] < minMinor || version[0] === minMajor && version[1] === minMinor && version[2] < minPatch || version[0] >= maxMajor) {
            throw new Error("Bootstrap's JavaScript requires at least jQuery v1.9.1 but less than v4.0.0");
        }
    })($);
    exports.Util = Util;
    exports.Alert = Alert;
    exports.Button = Button;
    exports.Carousel = Carousel;
    exports.Collapse = Collapse;
    exports.Dropdown = Dropdown;
    exports.Modal = Modal;
    exports.Popover = Popover;
    exports.Scrollspy = ScrollSpy;
    exports.Tab = Tab;
    exports.Tooltip = Tooltip;
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
});

!function(t, e) {
    "object" == typeof exports && "undefined" != typeof module ? e(exports, require("jquery"), require("popper.js")) : "function" == typeof define && define.amd ? define([ "exports", "jquery", "popper.js" ], e) : e(t.bootstrap = {}, t.jQuery, t.Popper);
}(this, function(t, e, c) {
    "use strict";
    function i(t, e) {
        for (var n = 0; n < e.length; n++) {
            var i = e[n];
            i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), 
            Object.defineProperty(t, i.key, i);
        }
    }
    function o(t, e, n) {
        return e && i(t.prototype, e), n && i(t, n), t;
    }
    function h(r) {
        for (var t = 1; t < arguments.length; t++) {
            var s = null != arguments[t] ? arguments[t] : {}, e = Object.keys(s);
            "function" == typeof Object.getOwnPropertySymbols && (e = e.concat(Object.getOwnPropertySymbols(s).filter(function(t) {
                return Object.getOwnPropertyDescriptor(s, t).enumerable;
            }))), e.forEach(function(t) {
                var e, n, i;
                e = r, i = s[n = t], n in e ? Object.defineProperty(e, n, {
                    value: i,
                    enumerable: !0,
                    configurable: !0,
                    writable: !0
                }) : e[n] = i;
            });
        }
        return r;
    }
    e = e && e.hasOwnProperty("default") ? e.default : e, c = c && c.hasOwnProperty("default") ? c.default : c;
    var r, n, s, a, l, u, f, d, _, g, m, p, v, E, y, T, C, I, A, D, b, S, w, N, O, k, P, L, j, R, H, W, M, x, U, K, F, V, Q, B, Y, G, q, z, X, J, Z, $, tt, et, nt, it, rt, st, ot, at, lt, ht, ct, ut, ft, dt, _t, gt, mt, pt, vt, Et, yt, Tt, Ct, It, At, Dt, bt, St, wt, Nt, Ot, kt, Pt, Lt, jt, Rt, Ht, Wt, Mt, xt, Ut, Kt, Ft, Vt, Qt, Bt, Yt, Gt, qt, zt, Xt, Jt, Zt, $t, te, ee, ne, ie, re, se, oe, ae, le, he, ce, ue, fe, de, _e, ge, me, pe, ve, Ee, ye, Te, Ce, Ie, Ae, De, be, Se, we, Ne, Oe, ke, Pe, Le, je, Re, He, We, Me, xe, Ue, Ke, Fe, Ve, Qe, Be, Ye, Ge, qe, ze, Xe, Je, Ze, $e, tn, en, nn, rn, sn, on, an, ln, hn, cn, un, fn, dn, _n, gn, mn, pn, vn, En, yn, Tn, Cn = function(i) {
        var e = "transitionend";
        function t(t) {
            var e = this, n = !1;
            return i(this).one(l.TRANSITION_END, function() {
                n = !0;
            }), setTimeout(function() {
                n || l.triggerTransitionEnd(e);
            }, t), this;
        }
        var l = {
            TRANSITION_END: "bsTransitionEnd",
            getUID: function(t) {
                for (;t += ~~(1e6 * Math.random()), document.getElementById(t); ) ;
                return t;
            },
            getSelectorFromElement: function(t) {
                var e = t.getAttribute("data-target");
                e && "#" !== e || (e = t.getAttribute("href") || "");
                try {
                    return 0 < i(document).find(e).length ? e : null;
                } catch (t) {
                    return null;
                }
            },
            getTransitionDurationFromElement: function(t) {
                if (!t) return 0;
                var e = i(t).css("transition-duration");
                return parseFloat(e) ? (e = e.split(",")[0], 1e3 * parseFloat(e)) : 0;
            },
            reflow: function(t) {
                return t.offsetHeight;
            },
            triggerTransitionEnd: function(t) {
                i(t).trigger(e);
            },
            supportsTransitionEnd: function() {
                return Boolean(e);
            },
            isElement: function(t) {
                return (t[0] || t).nodeType;
            },
            typeCheckConfig: function(t, e, n) {
                for (var i in n) if (Object.prototype.hasOwnProperty.call(n, i)) {
                    var r = n[i], s = e[i], o = s && l.isElement(s) ? "element" : (a = s, {}.toString.call(a).match(/\s([a-z]+)/i)[1].toLowerCase());
                    if (!new RegExp(r).test(o)) throw new Error(t.toUpperCase() + ': Option "' + i + '" provided type "' + o + '" but expected type "' + r + '".');
                }
                var a;
            }
        };
        return i.fn.emulateTransitionEnd = t, i.event.special[l.TRANSITION_END] = {
            bindType: e,
            delegateType: e,
            handle: function(t) {
                if (i(t.target).is(this)) return t.handleObj.handler.apply(this, arguments);
            }
        }, l;
    }(e), In = (n = "alert", a = "." + (s = "bs.alert"), l = (r = e).fn[n], u = {
        CLOSE: "close" + a,
        CLOSED: "closed" + a,
        CLICK_DATA_API: "click" + a + ".data-api"
    }, f = "alert", d = "fade", _ = "show", g = function() {
        function i(t) {
            this._element = t;
        }
        var t = i.prototype;
        return t.close = function(t) {
            var e = this._element;
            t && (e = this._getRootElement(t)), this._triggerCloseEvent(e).isDefaultPrevented() || this._removeElement(e);
        }, t.dispose = function() {
            r.removeData(this._element, s), this._element = null;
        }, t._getRootElement = function(t) {
            var e = Cn.getSelectorFromElement(t), n = !1;
            return e && (n = r(e)[0]), n || (n = r(t).closest("." + f)[0]), n;
        }, t._triggerCloseEvent = function(t) {
            var e = r.Event(u.CLOSE);
            return r(t).trigger(e), e;
        }, t._removeElement = function(e) {
            var n = this;
            if (r(e).removeClass(_), r(e).hasClass(d)) {
                var t = Cn.getTransitionDurationFromElement(e);
                r(e).one(Cn.TRANSITION_END, function(t) {
                    return n._destroyElement(e, t);
                }).emulateTransitionEnd(t);
            } else this._destroyElement(e);
        }, t._destroyElement = function(t) {
            r(t).detach().trigger(u.CLOSED).remove();
        }, i._jQueryInterface = function(n) {
            return this.each(function() {
                var t = r(this), e = t.data(s);
                e || (e = new i(this), t.data(s, e)), "close" === n && e[n](this);
            });
        }, i._handleDismiss = function(e) {
            return function(t) {
                t && t.preventDefault(), e.close(this);
            };
        }, o(i, null, [ {
            key: "VERSION",
            get: function() {
                return "4.1.1";
            }
        } ]), i;
    }(), r(document).on(u.CLICK_DATA_API, '[data-dismiss="alert"]', g._handleDismiss(new g())), 
    r.fn[n] = g._jQueryInterface, r.fn[n].Constructor = g, r.fn[n].noConflict = function() {
        return r.fn[n] = l, g._jQueryInterface;
    }, g), An = (p = "button", E = "." + (v = "bs.button"), y = ".data-api", T = (m = e).fn[p], 
    C = "active", I = "btn", D = '[data-toggle^="button"]', b = '[data-toggle="buttons"]', 
    S = "input", w = ".active", N = ".btn", O = {
        CLICK_DATA_API: "click" + E + y,
        FOCUS_BLUR_DATA_API: (A = "focus") + E + y + " blur" + E + y
    }, k = function() {
        function n(t) {
            this._element = t;
        }
        var t = n.prototype;
        return t.toggle = function() {
            var t = !0, e = !0, n = m(this._element).closest(b)[0];
            if (n) {
                var i = m(this._element).find(S)[0];
                if (i) {
                    if ("radio" === i.type) if (i.checked && m(this._element).hasClass(C)) t = !1; else {
                        var r = m(n).find(w)[0];
                        r && m(r).removeClass(C);
                    }
                    if (t) {
                        if (i.hasAttribute("disabled") || n.hasAttribute("disabled") || i.classList.contains("disabled") || n.classList.contains("disabled")) return;
                        i.checked = !m(this._element).hasClass(C), m(i).trigger("change");
                    }
                    i.focus(), e = !1;
                }
            }
            e && this._element.setAttribute("aria-pressed", !m(this._element).hasClass(C)), 
            t && m(this._element).toggleClass(C);
        }, t.dispose = function() {
            m.removeData(this._element, v), this._element = null;
        }, n._jQueryInterface = function(e) {
            return this.each(function() {
                var t = m(this).data(v);
                t || (t = new n(this), m(this).data(v, t)), "toggle" === e && t[e]();
            });
        }, o(n, null, [ {
            key: "VERSION",
            get: function() {
                return "4.1.1";
            }
        } ]), n;
    }(), m(document).on(O.CLICK_DATA_API, D, function(t) {
        t.preventDefault();
        var e = t.target;
        m(e).hasClass(I) || (e = m(e).closest(N)), k._jQueryInterface.call(m(e), "toggle");
    }).on(O.FOCUS_BLUR_DATA_API, D, function(t) {
        var e = m(t.target).closest(N)[0];
        m(e).toggleClass(A, /^focus(in)?$/.test(t.type));
    }), m.fn[p] = k._jQueryInterface, m.fn[p].Constructor = k, m.fn[p].noConflict = function() {
        return m.fn[p] = T, k._jQueryInterface;
    }, k), Dn = (L = "carousel", R = "." + (j = "bs.carousel"), H = ".data-api", W = (P = e).fn[L], 
    M = {
        interval: 5e3,
        keyboard: !0,
        slide: !1,
        pause: "hover",
        wrap: !0
    }, x = {
        interval: "(number|boolean)",
        keyboard: "boolean",
        slide: "(boolean|string)",
        pause: "(string|boolean)",
        wrap: "boolean"
    }, U = "next", K = "prev", F = "left", V = "right", Q = {
        SLIDE: "slide" + R,
        SLID: "slid" + R,
        KEYDOWN: "keydown" + R,
        MOUSEENTER: "mouseenter" + R,
        MOUSELEAVE: "mouseleave" + R,
        TOUCHEND: "touchend" + R,
        LOAD_DATA_API: "load" + R + H,
        CLICK_DATA_API: "click" + R + H
    }, B = "carousel", Y = "active", G = "slide", q = "carousel-item-right", z = "carousel-item-left", 
    X = "carousel-item-next", J = "carousel-item-prev", Z = {
        ACTIVE: ".active",
        ACTIVE_ITEM: ".active.carousel-item",
        ITEM: ".carousel-item",
        NEXT_PREV: ".carousel-item-next, .carousel-item-prev",
        INDICATORS: ".carousel-indicators",
        DATA_SLIDE: "[data-slide], [data-slide-to]",
        DATA_RIDE: '[data-ride="carousel"]'
    }, $ = function() {
        function s(t, e) {
            this._items = null, this._interval = null, this._activeElement = null, this._isPaused = !1, 
            this._isSliding = !1, this.touchTimeout = null, this._config = this._getConfig(e), 
            this._element = P(t)[0], this._indicatorsElement = P(this._element).find(Z.INDICATORS)[0], 
            this._addEventListeners();
        }
        var t = s.prototype;
        return t.next = function() {
            this._isSliding || this._slide(U);
        }, t.nextWhenVisible = function() {
            !document.hidden && P(this._element).is(":visible") && "hidden" !== P(this._element).css("visibility") && this.next();
        }, t.prev = function() {
            this._isSliding || this._slide(K);
        }, t.pause = function(t) {
            t || (this._isPaused = !0), P(this._element).find(Z.NEXT_PREV)[0] && (Cn.triggerTransitionEnd(this._element), 
            this.cycle(!0)), clearInterval(this._interval), this._interval = null;
        }, t.cycle = function(t) {
            t || (this._isPaused = !1), this._interval && (clearInterval(this._interval), this._interval = null), 
            this._config.interval && !this._isPaused && (this._interval = setInterval((document.visibilityState ? this.nextWhenVisible : this.next).bind(this), this._config.interval));
        }, t.to = function(t) {
            var e = this;
            this._activeElement = P(this._element).find(Z.ACTIVE_ITEM)[0];
            var n = this._getItemIndex(this._activeElement);
            if (!(t > this._items.length - 1 || t < 0)) if (this._isSliding) P(this._element).one(Q.SLID, function() {
                return e.to(t);
            }); else {
                if (n === t) return this.pause(), void this.cycle();
                var i = n < t ? U : K;
                this._slide(i, this._items[t]);
            }
        }, t.dispose = function() {
            P(this._element).off(R), P.removeData(this._element, j), this._items = null, this._config = null, 
            this._element = null, this._interval = null, this._isPaused = null, this._isSliding = null, 
            this._activeElement = null, this._indicatorsElement = null;
        }, t._getConfig = function(t) {
            return t = h({}, M, t), Cn.typeCheckConfig(L, t, x), t;
        }, t._addEventListeners = function() {
            var e = this;
            this._config.keyboard && P(this._element).on(Q.KEYDOWN, function(t) {
                return e._keydown(t);
            }), "hover" === this._config.pause && (P(this._element).on(Q.MOUSEENTER, function(t) {
                return e.pause(t);
            }).on(Q.MOUSELEAVE, function(t) {
                return e.cycle(t);
            }), "ontouchstart" in document.documentElement && P(this._element).on(Q.TOUCHEND, function() {
                e.pause(), e.touchTimeout && clearTimeout(e.touchTimeout), e.touchTimeout = setTimeout(function(t) {
                    return e.cycle(t);
                }, 500 + e._config.interval);
            }));
        }, t._keydown = function(t) {
            if (!/input|textarea/i.test(t.target.tagName)) switch (t.which) {
              case 37:
                t.preventDefault(), this.prev();
                break;

              case 39:
                t.preventDefault(), this.next();
            }
        }, t._getItemIndex = function(t) {
            return this._items = P.makeArray(P(t).parent().find(Z.ITEM)), this._items.indexOf(t);
        }, t._getItemByDirection = function(t, e) {
            var n = t === U, i = t === K, r = this._getItemIndex(e), s = this._items.length - 1;
            if ((i && 0 === r || n && r === s) && !this._config.wrap) return e;
            var o = (r + (t === K ? -1 : 1)) % this._items.length;
            return -1 === o ? this._items[this._items.length - 1] : this._items[o];
        }, t._triggerSlideEvent = function(t, e) {
            var n = this._getItemIndex(t), i = this._getItemIndex(P(this._element).find(Z.ACTIVE_ITEM)[0]), r = P.Event(Q.SLIDE, {
                relatedTarget: t,
                direction: e,
                from: i,
                to: n
            });
            return P(this._element).trigger(r), r;
        }, t._setActiveIndicatorElement = function(t) {
            if (this._indicatorsElement) {
                P(this._indicatorsElement).find(Z.ACTIVE).removeClass(Y);
                var e = this._indicatorsElement.children[this._getItemIndex(t)];
                e && P(e).addClass(Y);
            }
        }, t._slide = function(t, e) {
            var n, i, r, s = this, o = P(this._element).find(Z.ACTIVE_ITEM)[0], a = this._getItemIndex(o), l = e || o && this._getItemByDirection(t, o), h = this._getItemIndex(l), c = Boolean(this._interval);
            if (t === U ? (n = z, i = X, r = F) : (n = q, i = J, r = V), l && P(l).hasClass(Y)) this._isSliding = !1; else if (!this._triggerSlideEvent(l, r).isDefaultPrevented() && o && l) {
                this._isSliding = !0, c && this.pause(), this._setActiveIndicatorElement(l);
                var u = P.Event(Q.SLID, {
                    relatedTarget: l,
                    direction: r,
                    from: a,
                    to: h
                });
                if (P(this._element).hasClass(G)) {
                    P(l).addClass(i), Cn.reflow(l), P(o).addClass(n), P(l).addClass(n);
                    var f = Cn.getTransitionDurationFromElement(o);
                    P(o).one(Cn.TRANSITION_END, function() {
                        P(l).removeClass(n + " " + i).addClass(Y), P(o).removeClass(Y + " " + i + " " + n), 
                        s._isSliding = !1, setTimeout(function() {
                            return P(s._element).trigger(u);
                        }, 0);
                    }).emulateTransitionEnd(f);
                } else P(o).removeClass(Y), P(l).addClass(Y), this._isSliding = !1, P(this._element).trigger(u);
                c && this.cycle();
            }
        }, s._jQueryInterface = function(i) {
            return this.each(function() {
                var t = P(this).data(j), e = h({}, M, P(this).data());
                "object" == typeof i && (e = h({}, e, i));
                var n = "string" == typeof i ? i : e.slide;
                if (t || (t = new s(this, e), P(this).data(j, t)), "number" == typeof i) t.to(i); else if ("string" == typeof n) {
                    if ("undefined" == typeof t[n]) throw new TypeError('No method named "' + n + '"');
                    t[n]();
                } else e.interval && (t.pause(), t.cycle());
            });
        }, s._dataApiClickHandler = function(t) {
            var e = Cn.getSelectorFromElement(this);
            if (e) {
                var n = P(e)[0];
                if (n && P(n).hasClass(B)) {
                    var i = h({}, P(n).data(), P(this).data()), r = this.getAttribute("data-slide-to");
                    r && (i.interval = !1), s._jQueryInterface.call(P(n), i), r && P(n).data(j).to(r), 
                    t.preventDefault();
                }
            }
        }, o(s, null, [ {
            key: "VERSION",
            get: function() {
                return "4.1.1";
            }
        }, {
            key: "Default",
            get: function() {
                return M;
            }
        } ]), s;
    }(), P(document).on(Q.CLICK_DATA_API, Z.DATA_SLIDE, $._dataApiClickHandler), P(window).on(Q.LOAD_DATA_API, function() {
        P(Z.DATA_RIDE).each(function() {
            var t = P(this);
            $._jQueryInterface.call(t, t.data());
        });
    }), P.fn[L] = $._jQueryInterface, P.fn[L].Constructor = $, P.fn[L].noConflict = function() {
        return P.fn[L] = W, $._jQueryInterface;
    }, $), bn = (et = "collapse", it = "." + (nt = "bs.collapse"), rt = (tt = e).fn[et], 
    st = {
        toggle: !0,
        parent: ""
    }, ot = {
        toggle: "boolean",
        parent: "(string|element)"
    }, at = {
        SHOW: "show" + it,
        SHOWN: "shown" + it,
        HIDE: "hide" + it,
        HIDDEN: "hidden" + it,
        CLICK_DATA_API: "click" + it + ".data-api"
    }, lt = "show", ht = "collapse", ct = "collapsing", ut = "collapsed", ft = "width", 
    dt = "height", _t = {
        ACTIVES: ".show, .collapsing",
        DATA_TOGGLE: '[data-toggle="collapse"]'
    }, gt = function() {
        function a(t, e) {
            this._isTransitioning = !1, this._element = t, this._config = this._getConfig(e), 
            this._triggerArray = tt.makeArray(tt('[data-toggle="collapse"][href="#' + t.id + '"],[data-toggle="collapse"][data-target="#' + t.id + '"]'));
            for (var n = tt(_t.DATA_TOGGLE), i = 0; i < n.length; i++) {
                var r = n[i], s = Cn.getSelectorFromElement(r);
                null !== s && 0 < tt(s).filter(t).length && (this._selector = s, this._triggerArray.push(r));
            }
            this._parent = this._config.parent ? this._getParent() : null, this._config.parent || this._addAriaAndCollapsedClass(this._element, this._triggerArray), 
            this._config.toggle && this.toggle();
        }
        var t = a.prototype;
        return t.toggle = function() {
            tt(this._element).hasClass(lt) ? this.hide() : this.show();
        }, t.show = function() {
            var t, e, n = this;
            if (!this._isTransitioning && !tt(this._element).hasClass(lt) && (this._parent && 0 === (t = tt.makeArray(tt(this._parent).find(_t.ACTIVES).filter('[data-parent="' + this._config.parent + '"]'))).length && (t = null), 
            !(t && (e = tt(t).not(this._selector).data(nt)) && e._isTransitioning))) {
                var i = tt.Event(at.SHOW);
                if (tt(this._element).trigger(i), !i.isDefaultPrevented()) {
                    t && (a._jQueryInterface.call(tt(t).not(this._selector), "hide"), e || tt(t).data(nt, null));
                    var r = this._getDimension();
                    tt(this._element).removeClass(ht).addClass(ct), (this._element.style[r] = 0) < this._triggerArray.length && tt(this._triggerArray).removeClass(ut).attr("aria-expanded", !0), 
                    this.setTransitioning(!0);
                    var s = "scroll" + (r[0].toUpperCase() + r.slice(1)), o = Cn.getTransitionDurationFromElement(this._element);
                    tt(this._element).one(Cn.TRANSITION_END, function() {
                        tt(n._element).removeClass(ct).addClass(ht).addClass(lt), n._element.style[r] = "", 
                        n.setTransitioning(!1), tt(n._element).trigger(at.SHOWN);
                    }).emulateTransitionEnd(o), this._element.style[r] = this._element[s] + "px";
                }
            }
        }, t.hide = function() {
            var t = this;
            if (!this._isTransitioning && tt(this._element).hasClass(lt)) {
                var e = tt.Event(at.HIDE);
                if (tt(this._element).trigger(e), !e.isDefaultPrevented()) {
                    var n = this._getDimension();
                    if (this._element.style[n] = this._element.getBoundingClientRect()[n] + "px", Cn.reflow(this._element), 
                    tt(this._element).addClass(ct).removeClass(ht).removeClass(lt), 0 < this._triggerArray.length) for (var i = 0; i < this._triggerArray.length; i++) {
                        var r = this._triggerArray[i], s = Cn.getSelectorFromElement(r);
                        if (null !== s) tt(s).hasClass(lt) || tt(r).addClass(ut).attr("aria-expanded", !1);
                    }
                    this.setTransitioning(!0);
                    this._element.style[n] = "";
                    var o = Cn.getTransitionDurationFromElement(this._element);
                    tt(this._element).one(Cn.TRANSITION_END, function() {
                        t.setTransitioning(!1), tt(t._element).removeClass(ct).addClass(ht).trigger(at.HIDDEN);
                    }).emulateTransitionEnd(o);
                }
            }
        }, t.setTransitioning = function(t) {
            this._isTransitioning = t;
        }, t.dispose = function() {
            tt.removeData(this._element, nt), this._config = null, this._parent = null, this._element = null, 
            this._triggerArray = null, this._isTransitioning = null;
        }, t._getConfig = function(t) {
            return (t = h({}, st, t)).toggle = Boolean(t.toggle), Cn.typeCheckConfig(et, t, ot), 
            t;
        }, t._getDimension = function() {
            return tt(this._element).hasClass(ft) ? ft : dt;
        }, t._getParent = function() {
            var n = this, t = null;
            Cn.isElement(this._config.parent) ? (t = this._config.parent, "undefined" != typeof this._config.parent.jquery && (t = this._config.parent[0])) : t = tt(this._config.parent)[0];
            var e = '[data-toggle="collapse"][data-parent="' + this._config.parent + '"]';
            return tt(t).find(e).each(function(t, e) {
                n._addAriaAndCollapsedClass(a._getTargetFromElement(e), [ e ]);
            }), t;
        }, t._addAriaAndCollapsedClass = function(t, e) {
            if (t) {
                var n = tt(t).hasClass(lt);
                0 < e.length && tt(e).toggleClass(ut, !n).attr("aria-expanded", n);
            }
        }, a._getTargetFromElement = function(t) {
            var e = Cn.getSelectorFromElement(t);
            return e ? tt(e)[0] : null;
        }, a._jQueryInterface = function(i) {
            return this.each(function() {
                var t = tt(this), e = t.data(nt), n = h({}, st, t.data(), "object" == typeof i && i ? i : {});
                if (!e && n.toggle && /show|hide/.test(i) && (n.toggle = !1), e || (e = new a(this, n), 
                t.data(nt, e)), "string" == typeof i) {
                    if ("undefined" == typeof e[i]) throw new TypeError('No method named "' + i + '"');
                    e[i]();
                }
            });
        }, o(a, null, [ {
            key: "VERSION",
            get: function() {
                return "4.1.1";
            }
        }, {
            key: "Default",
            get: function() {
                return st;
            }
        } ]), a;
    }(), tt(document).on(at.CLICK_DATA_API, _t.DATA_TOGGLE, function(t) {
        "A" === t.currentTarget.tagName && t.preventDefault();
        var n = tt(this), e = Cn.getSelectorFromElement(this);
        tt(e).each(function() {
            var t = tt(this), e = t.data(nt) ? "toggle" : n.data();
            gt._jQueryInterface.call(t, e);
        });
    }), tt.fn[et] = gt._jQueryInterface, tt.fn[et].Constructor = gt, tt.fn[et].noConflict = function() {
        return tt.fn[et] = rt, gt._jQueryInterface;
    }, gt), Sn = (pt = "dropdown", Et = "." + (vt = "bs.dropdown"), yt = ".data-api", 
    Tt = (mt = e).fn[pt], Ct = new RegExp("38|40|27"), It = {
        HIDE: "hide" + Et,
        HIDDEN: "hidden" + Et,
        SHOW: "show" + Et,
        SHOWN: "shown" + Et,
        CLICK: "click" + Et,
        CLICK_DATA_API: "click" + Et + yt,
        KEYDOWN_DATA_API: "keydown" + Et + yt,
        KEYUP_DATA_API: "keyup" + Et + yt
    }, At = "disabled", Dt = "show", bt = "dropup", St = "dropright", wt = "dropleft", 
    Nt = "dropdown-menu-right", Ot = "position-static", kt = '[data-toggle="dropdown"]', 
    Pt = ".dropdown form", Lt = ".dropdown-menu", jt = ".navbar-nav", Rt = ".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)", 
    Ht = "top-start", Wt = "top-end", Mt = "bottom-start", xt = "bottom-end", Ut = "right-start", 
    Kt = "left-start", Ft = {
        offset: 0,
        flip: !0,
        boundary: "scrollParent",
        reference: "toggle",
        display: "dynamic"
    }, Vt = {
        offset: "(number|string|function)",
        flip: "boolean",
        boundary: "(string|element)",
        reference: "(string|element)",
        display: "string"
    }, Qt = function() {
        function l(t, e) {
            this._element = t, this._popper = null, this._config = this._getConfig(e), this._menu = this._getMenuElement(), 
            this._inNavbar = this._detectNavbar(), this._addEventListeners();
        }
        var t = l.prototype;
        return t.toggle = function() {
            if (!this._element.disabled && !mt(this._element).hasClass(At)) {
                var t = l._getParentFromElement(this._element), e = mt(this._menu).hasClass(Dt);
                if (l._clearMenus(), !e) {
                    var n = {
                        relatedTarget: this._element
                    }, i = mt.Event(It.SHOW, n);
                    if (mt(t).trigger(i), !i.isDefaultPrevented()) {
                        if (!this._inNavbar) {
                            if ("undefined" == typeof c) throw new TypeError("Bootstrap dropdown require Popper.js (https://popper.js.org)");
                            var r = this._element;
                            "parent" === this._config.reference ? r = t : Cn.isElement(this._config.reference) && (r = this._config.reference, 
                            "undefined" != typeof this._config.reference.jquery && (r = this._config.reference[0])), 
                            "scrollParent" !== this._config.boundary && mt(t).addClass(Ot), this._popper = new c(r, this._menu, this._getPopperConfig());
                        }
                        "ontouchstart" in document.documentElement && 0 === mt(t).closest(jt).length && mt(document.body).children().on("mouseover", null, mt.noop), 
                        this._element.focus(), this._element.setAttribute("aria-expanded", !0), mt(this._menu).toggleClass(Dt), 
                        mt(t).toggleClass(Dt).trigger(mt.Event(It.SHOWN, n));
                    }
                }
            }
        }, t.dispose = function() {
            mt.removeData(this._element, vt), mt(this._element).off(Et), this._element = null, 
            (this._menu = null) !== this._popper && (this._popper.destroy(), this._popper = null);
        }, t.update = function() {
            this._inNavbar = this._detectNavbar(), null !== this._popper && this._popper.scheduleUpdate();
        }, t._addEventListeners = function() {
            var e = this;
            mt(this._element).on(It.CLICK, function(t) {
                t.preventDefault(), t.stopPropagation(), e.toggle();
            });
        }, t._getConfig = function(t) {
            return t = h({}, this.constructor.Default, mt(this._element).data(), t), Cn.typeCheckConfig(pt, t, this.constructor.DefaultType), 
            t;
        }, t._getMenuElement = function() {
            if (!this._menu) {
                var t = l._getParentFromElement(this._element);
                this._menu = mt(t).find(Lt)[0];
            }
            return this._menu;
        }, t._getPlacement = function() {
            var t = mt(this._element).parent(), e = Mt;
            return t.hasClass(bt) ? (e = Ht, mt(this._menu).hasClass(Nt) && (e = Wt)) : t.hasClass(St) ? e = Ut : t.hasClass(wt) ? e = Kt : mt(this._menu).hasClass(Nt) && (e = xt), 
            e;
        }, t._detectNavbar = function() {
            return 0 < mt(this._element).closest(".navbar").length;
        }, t._getPopperConfig = function() {
            var e = this, t = {};
            "function" == typeof this._config.offset ? t.fn = function(t) {
                return t.offsets = h({}, t.offsets, e._config.offset(t.offsets) || {}), t;
            } : t.offset = this._config.offset;
            var n = {
                placement: this._getPlacement(),
                modifiers: {
                    offset: t,
                    flip: {
                        enabled: this._config.flip
                    },
                    preventOverflow: {
                        boundariesElement: this._config.boundary
                    }
                }
            };
            return "static" === this._config.display && (n.modifiers.applyStyle = {
                enabled: !1
            }), n;
        }, l._jQueryInterface = function(e) {
            return this.each(function() {
                var t = mt(this).data(vt);
                if (t || (t = new l(this, "object" == typeof e ? e : null), mt(this).data(vt, t)), 
                "string" == typeof e) {
                    if ("undefined" == typeof t[e]) throw new TypeError('No method named "' + e + '"');
                    t[e]();
                }
            });
        }, l._clearMenus = function(t) {
            if (!t || 3 !== t.which && ("keyup" !== t.type || 9 === t.which)) for (var e = mt.makeArray(mt(kt)), n = 0; n < e.length; n++) {
                var i = l._getParentFromElement(e[n]), r = mt(e[n]).data(vt), s = {
                    relatedTarget: e[n]
                };
                if (r) {
                    var o = r._menu;
                    if (mt(i).hasClass(Dt) && !(t && ("click" === t.type && /input|textarea/i.test(t.target.tagName) || "keyup" === t.type && 9 === t.which) && mt.contains(i, t.target))) {
                        var a = mt.Event(It.HIDE, s);
                        mt(i).trigger(a), a.isDefaultPrevented() || ("ontouchstart" in document.documentElement && mt(document.body).children().off("mouseover", null, mt.noop), 
                        e[n].setAttribute("aria-expanded", "false"), mt(o).removeClass(Dt), mt(i).removeClass(Dt).trigger(mt.Event(It.HIDDEN, s)));
                    }
                }
            }
        }, l._getParentFromElement = function(t) {
            var e, n = Cn.getSelectorFromElement(t);
            return n && (e = mt(n)[0]), e || t.parentNode;
        }, l._dataApiKeydownHandler = function(t) {
            if ((/input|textarea/i.test(t.target.tagName) ? !(32 === t.which || 27 !== t.which && (40 !== t.which && 38 !== t.which || mt(t.target).closest(Lt).length)) : Ct.test(t.which)) && (t.preventDefault(), 
            t.stopPropagation(), !this.disabled && !mt(this).hasClass(At))) {
                var e = l._getParentFromElement(this), n = mt(e).hasClass(Dt);
                if ((n || 27 === t.which && 32 === t.which) && (!n || 27 !== t.which && 32 !== t.which)) {
                    var i = mt(e).find(Rt).get();
                    if (0 !== i.length) {
                        var r = i.indexOf(t.target);
                        38 === t.which && 0 < r && r--, 40 === t.which && r < i.length - 1 && r++, r < 0 && (r = 0), 
                        i[r].focus();
                    }
                } else {
                    if (27 === t.which) {
                        var s = mt(e).find(kt)[0];
                        mt(s).trigger("focus");
                    }
                    mt(this).trigger("click");
                }
            }
        }, o(l, null, [ {
            key: "VERSION",
            get: function() {
                return "4.1.1";
            }
        }, {
            key: "Default",
            get: function() {
                return Ft;
            }
        }, {
            key: "DefaultType",
            get: function() {
                return Vt;
            }
        } ]), l;
    }(), mt(document).on(It.KEYDOWN_DATA_API, kt, Qt._dataApiKeydownHandler).on(It.KEYDOWN_DATA_API, Lt, Qt._dataApiKeydownHandler).on(It.CLICK_DATA_API + " " + It.KEYUP_DATA_API, Qt._clearMenus).on(It.CLICK_DATA_API, kt, function(t) {
        t.preventDefault(), t.stopPropagation(), Qt._jQueryInterface.call(mt(this), "toggle");
    }).on(It.CLICK_DATA_API, Pt, function(t) {
        t.stopPropagation();
    }), mt.fn[pt] = Qt._jQueryInterface, mt.fn[pt].Constructor = Qt, mt.fn[pt].noConflict = function() {
        return mt.fn[pt] = Tt, Qt._jQueryInterface;
    }, Qt), wn = (Yt = "modal", qt = "." + (Gt = "bs.modal"), zt = (Bt = e).fn[Yt], 
    Xt = {
        backdrop: !0,
        keyboard: !0,
        focus: !0,
        show: !0
    }, Jt = {
        backdrop: "(boolean|string)",
        keyboard: "boolean",
        focus: "boolean",
        show: "boolean"
    }, Zt = {
        HIDE: "hide" + qt,
        HIDDEN: "hidden" + qt,
        SHOW: "show" + qt,
        SHOWN: "shown" + qt,
        FOCUSIN: "focusin" + qt,
        RESIZE: "resize" + qt,
        CLICK_DISMISS: "click.dismiss" + qt,
        KEYDOWN_DISMISS: "keydown.dismiss" + qt,
        MOUSEUP_DISMISS: "mouseup.dismiss" + qt,
        MOUSEDOWN_DISMISS: "mousedown.dismiss" + qt,
        CLICK_DATA_API: "click" + qt + ".data-api"
    }, $t = "modal-scrollbar-measure", te = "modal-backdrop", ee = "modal-open", ne = "fade", 
    ie = "show", re = {
        DIALOG: ".modal-dialog",
        DATA_TOGGLE: '[data-toggle="modal"]',
        DATA_DISMISS: '[data-dismiss="modal"]',
        FIXED_CONTENT: ".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",
        STICKY_CONTENT: ".sticky-top",
        NAVBAR_TOGGLER: ".navbar-toggler"
    }, se = function() {
        function r(t, e) {
            this._config = this._getConfig(e), this._element = t, this._dialog = Bt(t).find(re.DIALOG)[0], 
            this._backdrop = null, this._isShown = !1, this._isBodyOverflowing = !1, this._ignoreBackdropClick = !1, 
            this._scrollbarWidth = 0;
        }
        var t = r.prototype;
        return t.toggle = function(t) {
            return this._isShown ? this.hide() : this.show(t);
        }, t.show = function(t) {
            var e = this;
            if (!this._isTransitioning && !this._isShown) {
                Bt(this._element).hasClass(ne) && (this._isTransitioning = !0);
                var n = Bt.Event(Zt.SHOW, {
                    relatedTarget: t
                });
                Bt(this._element).trigger(n), this._isShown || n.isDefaultPrevented() || (this._isShown = !0, 
                this._checkScrollbar(), this._setScrollbar(), this._adjustDialog(), Bt(document.body).addClass(ee), 
                this._setEscapeEvent(), this._setResizeEvent(), Bt(this._element).on(Zt.CLICK_DISMISS, re.DATA_DISMISS, function(t) {
                    return e.hide(t);
                }), Bt(this._dialog).on(Zt.MOUSEDOWN_DISMISS, function() {
                    Bt(e._element).one(Zt.MOUSEUP_DISMISS, function(t) {
                        Bt(t.target).is(e._element) && (e._ignoreBackdropClick = !0);
                    });
                }), this._showBackdrop(function() {
                    return e._showElement(t);
                }));
            }
        }, t.hide = function(t) {
            var e = this;
            if (t && t.preventDefault(), !this._isTransitioning && this._isShown) {
                var n = Bt.Event(Zt.HIDE);
                if (Bt(this._element).trigger(n), this._isShown && !n.isDefaultPrevented()) {
                    this._isShown = !1;
                    var i = Bt(this._element).hasClass(ne);
                    if (i && (this._isTransitioning = !0), this._setEscapeEvent(), this._setResizeEvent(), 
                    Bt(document).off(Zt.FOCUSIN), Bt(this._element).removeClass(ie), Bt(this._element).off(Zt.CLICK_DISMISS), 
                    Bt(this._dialog).off(Zt.MOUSEDOWN_DISMISS), i) {
                        var r = Cn.getTransitionDurationFromElement(this._element);
                        Bt(this._element).one(Cn.TRANSITION_END, function(t) {
                            return e._hideModal(t);
                        }).emulateTransitionEnd(r);
                    } else this._hideModal();
                }
            }
        }, t.dispose = function() {
            Bt.removeData(this._element, Gt), Bt(window, document, this._element, this._backdrop).off(qt), 
            this._config = null, this._element = null, this._dialog = null, this._backdrop = null, 
            this._isShown = null, this._isBodyOverflowing = null, this._ignoreBackdropClick = null, 
            this._scrollbarWidth = null;
        }, t.handleUpdate = function() {
            this._adjustDialog();
        }, t._getConfig = function(t) {
            return t = h({}, Xt, t), Cn.typeCheckConfig(Yt, t, Jt), t;
        }, t._showElement = function(t) {
            var e = this, n = Bt(this._element).hasClass(ne);
            this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE || document.body.appendChild(this._element), 
            this._element.style.display = "block", this._element.removeAttribute("aria-hidden"), 
            this._element.scrollTop = 0, n && Cn.reflow(this._element), Bt(this._element).addClass(ie), 
            this._config.focus && this._enforceFocus();
            var i = Bt.Event(Zt.SHOWN, {
                relatedTarget: t
            }), r = function() {
                e._config.focus && e._element.focus(), e._isTransitioning = !1, Bt(e._element).trigger(i);
            };
            if (n) {
                var s = Cn.getTransitionDurationFromElement(this._element);
                Bt(this._dialog).one(Cn.TRANSITION_END, r).emulateTransitionEnd(s);
            } else r();
        }, t._enforceFocus = function() {
            var e = this;
            Bt(document).off(Zt.FOCUSIN).on(Zt.FOCUSIN, function(t) {
                document !== t.target && e._element !== t.target && 0 === Bt(e._element).has(t.target).length && e._element.focus();
            });
        }, t._setEscapeEvent = function() {
            var e = this;
            this._isShown && this._config.keyboard ? Bt(this._element).on(Zt.KEYDOWN_DISMISS, function(t) {
                27 === t.which && (t.preventDefault(), e.hide());
            }) : this._isShown || Bt(this._element).off(Zt.KEYDOWN_DISMISS);
        }, t._setResizeEvent = function() {
            var e = this;
            this._isShown ? Bt(window).on(Zt.RESIZE, function(t) {
                return e.handleUpdate(t);
            }) : Bt(window).off(Zt.RESIZE);
        }, t._hideModal = function() {
            var t = this;
            this._element.style.display = "none", this._element.setAttribute("aria-hidden", !0), 
            this._isTransitioning = !1, this._showBackdrop(function() {
                Bt(document.body).removeClass(ee), t._resetAdjustments(), t._resetScrollbar(), Bt(t._element).trigger(Zt.HIDDEN);
            });
        }, t._removeBackdrop = function() {
            this._backdrop && (Bt(this._backdrop).remove(), this._backdrop = null);
        }, t._showBackdrop = function(t) {
            var e = this, n = Bt(this._element).hasClass(ne) ? ne : "";
            if (this._isShown && this._config.backdrop) {
                if (this._backdrop = document.createElement("div"), this._backdrop.className = te, 
                n && Bt(this._backdrop).addClass(n), Bt(this._backdrop).appendTo(document.body), 
                Bt(this._element).on(Zt.CLICK_DISMISS, function(t) {
                    e._ignoreBackdropClick ? e._ignoreBackdropClick = !1 : t.target === t.currentTarget && ("static" === e._config.backdrop ? e._element.focus() : e.hide());
                }), n && Cn.reflow(this._backdrop), Bt(this._backdrop).addClass(ie), !t) return;
                if (!n) return void t();
                var i = Cn.getTransitionDurationFromElement(this._backdrop);
                Bt(this._backdrop).one(Cn.TRANSITION_END, t).emulateTransitionEnd(i);
            } else if (!this._isShown && this._backdrop) {
                Bt(this._backdrop).removeClass(ie);
                var r = function() {
                    e._removeBackdrop(), t && t();
                };
                if (Bt(this._element).hasClass(ne)) {
                    var s = Cn.getTransitionDurationFromElement(this._backdrop);
                    Bt(this._backdrop).one(Cn.TRANSITION_END, r).emulateTransitionEnd(s);
                } else r();
            } else t && t();
        }, t._adjustDialog = function() {
            var t = this._element.scrollHeight > document.documentElement.clientHeight;
            !this._isBodyOverflowing && t && (this._element.style.paddingLeft = this._scrollbarWidth + "px"), 
            this._isBodyOverflowing && !t && (this._element.style.paddingRight = this._scrollbarWidth + "px");
        }, t._resetAdjustments = function() {
            this._element.style.paddingLeft = "", this._element.style.paddingRight = "";
        }, t._checkScrollbar = function() {
            var t = document.body.getBoundingClientRect();
            this._isBodyOverflowing = t.left + t.right < window.innerWidth, this._scrollbarWidth = this._getScrollbarWidth();
        }, t._setScrollbar = function() {
            var r = this;
            if (this._isBodyOverflowing) {
                Bt(re.FIXED_CONTENT).each(function(t, e) {
                    var n = Bt(e)[0].style.paddingRight, i = Bt(e).css("padding-right");
                    Bt(e).data("padding-right", n).css("padding-right", parseFloat(i) + r._scrollbarWidth + "px");
                }), Bt(re.STICKY_CONTENT).each(function(t, e) {
                    var n = Bt(e)[0].style.marginRight, i = Bt(e).css("margin-right");
                    Bt(e).data("margin-right", n).css("margin-right", parseFloat(i) - r._scrollbarWidth + "px");
                }), Bt(re.NAVBAR_TOGGLER).each(function(t, e) {
                    var n = Bt(e)[0].style.marginRight, i = Bt(e).css("margin-right");
                    Bt(e).data("margin-right", n).css("margin-right", parseFloat(i) + r._scrollbarWidth + "px");
                });
                var t = document.body.style.paddingRight, e = Bt(document.body).css("padding-right");
                Bt(document.body).data("padding-right", t).css("padding-right", parseFloat(e) + this._scrollbarWidth + "px");
            }
        }, t._resetScrollbar = function() {
            Bt(re.FIXED_CONTENT).each(function(t, e) {
                var n = Bt(e).data("padding-right");
                "undefined" != typeof n && Bt(e).css("padding-right", n).removeData("padding-right");
            }), Bt(re.STICKY_CONTENT + ", " + re.NAVBAR_TOGGLER).each(function(t, e) {
                var n = Bt(e).data("margin-right");
                "undefined" != typeof n && Bt(e).css("margin-right", n).removeData("margin-right");
            });
            var t = Bt(document.body).data("padding-right");
            "undefined" != typeof t && Bt(document.body).css("padding-right", t).removeData("padding-right");
        }, t._getScrollbarWidth = function() {
            var t = document.createElement("div");
            t.className = $t, document.body.appendChild(t);
            var e = t.getBoundingClientRect().width - t.clientWidth;
            return document.body.removeChild(t), e;
        }, r._jQueryInterface = function(n, i) {
            return this.each(function() {
                var t = Bt(this).data(Gt), e = h({}, Xt, Bt(this).data(), "object" == typeof n && n ? n : {});
                if (t || (t = new r(this, e), Bt(this).data(Gt, t)), "string" == typeof n) {
                    if ("undefined" == typeof t[n]) throw new TypeError('No method named "' + n + '"');
                    t[n](i);
                } else e.show && t.show(i);
            });
        }, o(r, null, [ {
            key: "VERSION",
            get: function() {
                return "4.1.1";
            }
        }, {
            key: "Default",
            get: function() {
                return Xt;
            }
        } ]), r;
    }(), Bt(document).on(Zt.CLICK_DATA_API, re.DATA_TOGGLE, function(t) {
        var e, n = this, i = Cn.getSelectorFromElement(this);
        i && (e = Bt(i)[0]);
        var r = Bt(e).data(Gt) ? "toggle" : h({}, Bt(e).data(), Bt(this).data());
        "A" !== this.tagName && "AREA" !== this.tagName || t.preventDefault();
        var s = Bt(e).one(Zt.SHOW, function(t) {
            t.isDefaultPrevented() || s.one(Zt.HIDDEN, function() {
                Bt(n).is(":visible") && n.focus();
            });
        });
        se._jQueryInterface.call(Bt(e), r, this);
    }), Bt.fn[Yt] = se._jQueryInterface, Bt.fn[Yt].Constructor = se, Bt.fn[Yt].noConflict = function() {
        return Bt.fn[Yt] = zt, se._jQueryInterface;
    }, se), Nn = (ae = "tooltip", he = "." + (le = "bs.tooltip"), ce = (oe = e).fn[ae], 
    ue = "bs-tooltip", fe = new RegExp("(^|\\s)" + ue + "\\S+", "g"), ge = {
        animation: !0,
        template: '<div class="tooltip" role="tooltip"><div class="arrow"></div><div class="tooltip-inner"></div></div>',
        trigger: "hover focus",
        title: "",
        delay: 0,
        html: !(_e = {
            AUTO: "auto",
            TOP: "top",
            RIGHT: "right",
            BOTTOM: "bottom",
            LEFT: "left"
        }),
        selector: !(de = {
            animation: "boolean",
            template: "string",
            title: "(string|element|function)",
            trigger: "string",
            delay: "(number|object)",
            html: "boolean",
            selector: "(string|boolean)",
            placement: "(string|function)",
            offset: "(number|string)",
            container: "(string|element|boolean)",
            fallbackPlacement: "(string|array)",
            boundary: "(string|element)"
        }),
        placement: "top",
        offset: 0,
        container: !1,
        fallbackPlacement: "flip",
        boundary: "scrollParent"
    }, pe = "out", ve = {
        HIDE: "hide" + he,
        HIDDEN: "hidden" + he,
        SHOW: (me = "show") + he,
        SHOWN: "shown" + he,
        INSERTED: "inserted" + he,
        CLICK: "click" + he,
        FOCUSIN: "focusin" + he,
        FOCUSOUT: "focusout" + he,
        MOUSEENTER: "mouseenter" + he,
        MOUSELEAVE: "mouseleave" + he
    }, Ee = "fade", ye = "show", Te = ".tooltip-inner", Ce = ".arrow", Ie = "hover", 
    Ae = "focus", De = "click", be = "manual", Se = function() {
        function i(t, e) {
            if ("undefined" == typeof c) throw new TypeError("Bootstrap tooltips require Popper.js (https://popper.js.org)");
            this._isEnabled = !0, this._timeout = 0, this._hoverState = "", this._activeTrigger = {}, 
            this._popper = null, this.element = t, this.config = this._getConfig(e), this.tip = null, 
            this._setListeners();
        }
        var t = i.prototype;
        return t.enable = function() {
            this._isEnabled = !0;
        }, t.disable = function() {
            this._isEnabled = !1;
        }, t.toggleEnabled = function() {
            this._isEnabled = !this._isEnabled;
        }, t.toggle = function(t) {
            if (this._isEnabled) if (t) {
                var e = this.constructor.DATA_KEY, n = oe(t.currentTarget).data(e);
                n || (n = new this.constructor(t.currentTarget, this._getDelegateConfig()), oe(t.currentTarget).data(e, n)), 
                n._activeTrigger.click = !n._activeTrigger.click, n._isWithActiveTrigger() ? n._enter(null, n) : n._leave(null, n);
            } else {
                if (oe(this.getTipElement()).hasClass(ye)) return void this._leave(null, this);
                this._enter(null, this);
            }
        }, t.dispose = function() {
            clearTimeout(this._timeout), oe.removeData(this.element, this.constructor.DATA_KEY), 
            oe(this.element).off(this.constructor.EVENT_KEY), oe(this.element).closest(".modal").off("hide.bs.modal"), 
            this.tip && oe(this.tip).remove(), this._isEnabled = null, this._timeout = null, 
            this._hoverState = null, (this._activeTrigger = null) !== this._popper && this._popper.destroy(), 
            this._popper = null, this.element = null, this.config = null, this.tip = null;
        }, t.show = function() {
            var e = this;
            if ("none" === oe(this.element).css("display")) throw new Error("Please use show on visible elements");
            var t = oe.Event(this.constructor.Event.SHOW);
            if (this.isWithContent() && this._isEnabled) {
                oe(this.element).trigger(t);
                var n = oe.contains(this.element.ownerDocument.documentElement, this.element);
                if (t.isDefaultPrevented() || !n) return;
                var i = this.getTipElement(), r = Cn.getUID(this.constructor.NAME);
                i.setAttribute("id", r), this.element.setAttribute("aria-describedby", r), this.setContent(), 
                this.config.animation && oe(i).addClass(Ee);
                var s = "function" == typeof this.config.placement ? this.config.placement.call(this, i, this.element) : this.config.placement, o = this._getAttachment(s);
                this.addAttachmentClass(o);
                var a = !1 === this.config.container ? document.body : oe(this.config.container);
                oe(i).data(this.constructor.DATA_KEY, this), oe.contains(this.element.ownerDocument.documentElement, this.tip) || oe(i).appendTo(a), 
                oe(this.element).trigger(this.constructor.Event.INSERTED), this._popper = new c(this.element, i, {
                    placement: o,
                    modifiers: {
                        offset: {
                            offset: this.config.offset
                        },
                        flip: {
                            behavior: this.config.fallbackPlacement
                        },
                        arrow: {
                            element: Ce
                        },
                        preventOverflow: {
                            boundariesElement: this.config.boundary
                        }
                    },
                    onCreate: function(t) {
                        t.originalPlacement !== t.placement && e._handlePopperPlacementChange(t);
                    },
                    onUpdate: function(t) {
                        e._handlePopperPlacementChange(t);
                    }
                }), oe(i).addClass(ye), "ontouchstart" in document.documentElement && oe(document.body).children().on("mouseover", null, oe.noop);
                var l = function() {
                    e.config.animation && e._fixTransition();
                    var t = e._hoverState;
                    e._hoverState = null, oe(e.element).trigger(e.constructor.Event.SHOWN), t === pe && e._leave(null, e);
                };
                if (oe(this.tip).hasClass(Ee)) {
                    var h = Cn.getTransitionDurationFromElement(this.tip);
                    oe(this.tip).one(Cn.TRANSITION_END, l).emulateTransitionEnd(h);
                } else l();
            }
        }, t.hide = function(t) {
            var e = this, n = this.getTipElement(), i = oe.Event(this.constructor.Event.HIDE), r = function() {
                e._hoverState !== me && n.parentNode && n.parentNode.removeChild(n), e._cleanTipClass(), 
                e.element.removeAttribute("aria-describedby"), oe(e.element).trigger(e.constructor.Event.HIDDEN), 
                null !== e._popper && e._popper.destroy(), t && t();
            };
            if (oe(this.element).trigger(i), !i.isDefaultPrevented()) {
                if (oe(n).removeClass(ye), "ontouchstart" in document.documentElement && oe(document.body).children().off("mouseover", null, oe.noop), 
                this._activeTrigger[De] = !1, this._activeTrigger[Ae] = !1, this._activeTrigger[Ie] = !1, 
                oe(this.tip).hasClass(Ee)) {
                    var s = Cn.getTransitionDurationFromElement(n);
                    oe(n).one(Cn.TRANSITION_END, r).emulateTransitionEnd(s);
                } else r();
                this._hoverState = "";
            }
        }, t.update = function() {
            null !== this._popper && this._popper.scheduleUpdate();
        }, t.isWithContent = function() {
            return Boolean(this.getTitle());
        }, t.addAttachmentClass = function(t) {
            oe(this.getTipElement()).addClass(ue + "-" + t);
        }, t.getTipElement = function() {
            return this.tip = this.tip || oe(this.config.template)[0], this.tip;
        }, t.setContent = function() {
            var t = oe(this.getTipElement());
            this.setElementContent(t.find(Te), this.getTitle()), t.removeClass(Ee + " " + ye);
        }, t.setElementContent = function(t, e) {
            var n = this.config.html;
            "object" == typeof e && (e.nodeType || e.jquery) ? n ? oe(e).parent().is(t) || t.empty().append(e) : t.text(oe(e).text()) : t[n ? "html" : "text"](e);
        }, t.getTitle = function() {
            var t = this.element.getAttribute("data-original-title");
            return t || (t = "function" == typeof this.config.title ? this.config.title.call(this.element) : this.config.title), 
            t;
        }, t._getAttachment = function(t) {
            return _e[t.toUpperCase()];
        }, t._setListeners = function() {
            var i = this;
            this.config.trigger.split(" ").forEach(function(t) {
                if ("click" === t) oe(i.element).on(i.constructor.Event.CLICK, i.config.selector, function(t) {
                    return i.toggle(t);
                }); else if (t !== be) {
                    var e = t === Ie ? i.constructor.Event.MOUSEENTER : i.constructor.Event.FOCUSIN, n = t === Ie ? i.constructor.Event.MOUSELEAVE : i.constructor.Event.FOCUSOUT;
                    oe(i.element).on(e, i.config.selector, function(t) {
                        return i._enter(t);
                    }).on(n, i.config.selector, function(t) {
                        return i._leave(t);
                    });
                }
                oe(i.element).closest(".modal").on("hide.bs.modal", function() {
                    return i.hide();
                });
            }), this.config.selector ? this.config = h({}, this.config, {
                trigger: "manual",
                selector: ""
            }) : this._fixTitle();
        }, t._fixTitle = function() {
            var t = typeof this.element.getAttribute("data-original-title");
            (this.element.getAttribute("title") || "string" !== t) && (this.element.setAttribute("data-original-title", this.element.getAttribute("title") || ""), 
            this.element.setAttribute("title", ""));
        }, t._enter = function(t, e) {
            var n = this.constructor.DATA_KEY;
            (e = e || oe(t.currentTarget).data(n)) || (e = new this.constructor(t.currentTarget, this._getDelegateConfig()), 
            oe(t.currentTarget).data(n, e)), t && (e._activeTrigger["focusin" === t.type ? Ae : Ie] = !0), 
            oe(e.getTipElement()).hasClass(ye) || e._hoverState === me ? e._hoverState = me : (clearTimeout(e._timeout), 
            e._hoverState = me, e.config.delay && e.config.delay.show ? e._timeout = setTimeout(function() {
                e._hoverState === me && e.show();
            }, e.config.delay.show) : e.show());
        }, t._leave = function(t, e) {
            var n = this.constructor.DATA_KEY;
            (e = e || oe(t.currentTarget).data(n)) || (e = new this.constructor(t.currentTarget, this._getDelegateConfig()), 
            oe(t.currentTarget).data(n, e)), t && (e._activeTrigger["focusout" === t.type ? Ae : Ie] = !1), 
            e._isWithActiveTrigger() || (clearTimeout(e._timeout), e._hoverState = pe, e.config.delay && e.config.delay.hide ? e._timeout = setTimeout(function() {
                e._hoverState === pe && e.hide();
            }, e.config.delay.hide) : e.hide());
        }, t._isWithActiveTrigger = function() {
            for (var t in this._activeTrigger) if (this._activeTrigger[t]) return !0;
            return !1;
        }, t._getConfig = function(t) {
            return "number" == typeof (t = h({}, this.constructor.Default, oe(this.element).data(), "object" == typeof t && t ? t : {})).delay && (t.delay = {
                show: t.delay,
                hide: t.delay
            }), "number" == typeof t.title && (t.title = t.title.toString()), "number" == typeof t.content && (t.content = t.content.toString()), 
            Cn.typeCheckConfig(ae, t, this.constructor.DefaultType), t;
        }, t._getDelegateConfig = function() {
            var t = {};
            if (this.config) for (var e in this.config) this.constructor.Default[e] !== this.config[e] && (t[e] = this.config[e]);
            return t;
        }, t._cleanTipClass = function() {
            var t = oe(this.getTipElement()), e = t.attr("class").match(fe);
            null !== e && 0 < e.length && t.removeClass(e.join(""));
        }, t._handlePopperPlacementChange = function(t) {
            this._cleanTipClass(), this.addAttachmentClass(this._getAttachment(t.placement));
        }, t._fixTransition = function() {
            var t = this.getTipElement(), e = this.config.animation;
            null === t.getAttribute("x-placement") && (oe(t).removeClass(Ee), this.config.animation = !1, 
            this.hide(), this.show(), this.config.animation = e);
        }, i._jQueryInterface = function(n) {
            return this.each(function() {
                var t = oe(this).data(le), e = "object" == typeof n && n;
                if ((t || !/dispose|hide/.test(n)) && (t || (t = new i(this, e), oe(this).data(le, t)), 
                "string" == typeof n)) {
                    if ("undefined" == typeof t[n]) throw new TypeError('No method named "' + n + '"');
                    t[n]();
                }
            });
        }, o(i, null, [ {
            key: "VERSION",
            get: function() {
                return "4.1.1";
            }
        }, {
            key: "Default",
            get: function() {
                return ge;
            }
        }, {
            key: "NAME",
            get: function() {
                return ae;
            }
        }, {
            key: "DATA_KEY",
            get: function() {
                return le;
            }
        }, {
            key: "Event",
            get: function() {
                return ve;
            }
        }, {
            key: "EVENT_KEY",
            get: function() {
                return he;
            }
        }, {
            key: "DefaultType",
            get: function() {
                return de;
            }
        } ]), i;
    }(), oe.fn[ae] = Se._jQueryInterface, oe.fn[ae].Constructor = Se, oe.fn[ae].noConflict = function() {
        return oe.fn[ae] = ce, Se._jQueryInterface;
    }, Se), On = (Ne = "popover", ke = "." + (Oe = "bs.popover"), Pe = (we = e).fn[Ne], 
    Le = "bs-popover", je = new RegExp("(^|\\s)" + Le + "\\S+", "g"), Re = h({}, Nn.Default, {
        placement: "right",
        trigger: "click",
        content: "",
        template: '<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'
    }), He = h({}, Nn.DefaultType, {
        content: "(string|element|function)"
    }), We = "fade", xe = ".popover-header", Ue = ".popover-body", Ke = {
        HIDE: "hide" + ke,
        HIDDEN: "hidden" + ke,
        SHOW: (Me = "show") + ke,
        SHOWN: "shown" + ke,
        INSERTED: "inserted" + ke,
        CLICK: "click" + ke,
        FOCUSIN: "focusin" + ke,
        FOCUSOUT: "focusout" + ke,
        MOUSEENTER: "mouseenter" + ke,
        MOUSELEAVE: "mouseleave" + ke
    }, Fe = function(t) {
        var e, n;
        function i() {
            return t.apply(this, arguments) || this;
        }
        n = t, (e = i).prototype = Object.create(n.prototype), (e.prototype.constructor = e).__proto__ = n;
        var r = i.prototype;
        return r.isWithContent = function() {
            return this.getTitle() || this._getContent();
        }, r.addAttachmentClass = function(t) {
            we(this.getTipElement()).addClass(Le + "-" + t);
        }, r.getTipElement = function() {
            return this.tip = this.tip || we(this.config.template)[0], this.tip;
        }, r.setContent = function() {
            var t = we(this.getTipElement());
            this.setElementContent(t.find(xe), this.getTitle());
            var e = this._getContent();
            "function" == typeof e && (e = e.call(this.element)), this.setElementContent(t.find(Ue), e), 
            t.removeClass(We + " " + Me);
        }, r._getContent = function() {
            return this.element.getAttribute("data-content") || this.config.content;
        }, r._cleanTipClass = function() {
            var t = we(this.getTipElement()), e = t.attr("class").match(je);
            null !== e && 0 < e.length && t.removeClass(e.join(""));
        }, i._jQueryInterface = function(n) {
            return this.each(function() {
                var t = we(this).data(Oe), e = "object" == typeof n ? n : null;
                if ((t || !/destroy|hide/.test(n)) && (t || (t = new i(this, e), we(this).data(Oe, t)), 
                "string" == typeof n)) {
                    if ("undefined" == typeof t[n]) throw new TypeError('No method named "' + n + '"');
                    t[n]();
                }
            });
        }, o(i, null, [ {
            key: "VERSION",
            get: function() {
                return "4.1.1";
            }
        }, {
            key: "Default",
            get: function() {
                return Re;
            }
        }, {
            key: "NAME",
            get: function() {
                return Ne;
            }
        }, {
            key: "DATA_KEY",
            get: function() {
                return Oe;
            }
        }, {
            key: "Event",
            get: function() {
                return Ke;
            }
        }, {
            key: "EVENT_KEY",
            get: function() {
                return ke;
            }
        }, {
            key: "DefaultType",
            get: function() {
                return He;
            }
        } ]), i;
    }(Nn), we.fn[Ne] = Fe._jQueryInterface, we.fn[Ne].Constructor = Fe, we.fn[Ne].noConflict = function() {
        return we.fn[Ne] = Pe, Fe._jQueryInterface;
    }, Fe), kn = (Qe = "scrollspy", Ye = "." + (Be = "bs.scrollspy"), Ge = (Ve = e).fn[Qe], 
    qe = {
        offset: 10,
        method: "auto",
        target: ""
    }, ze = {
        offset: "number",
        method: "string",
        target: "(string|element)"
    }, Xe = {
        ACTIVATE: "activate" + Ye,
        SCROLL: "scroll" + Ye,
        LOAD_DATA_API: "load" + Ye + ".data-api"
    }, Je = "dropdown-item", Ze = "active", $e = {
        DATA_SPY: '[data-spy="scroll"]',
        ACTIVE: ".active",
        NAV_LIST_GROUP: ".nav, .list-group",
        NAV_LINKS: ".nav-link",
        NAV_ITEMS: ".nav-item",
        LIST_ITEMS: ".list-group-item",
        DROPDOWN: ".dropdown",
        DROPDOWN_ITEMS: ".dropdown-item",
        DROPDOWN_TOGGLE: ".dropdown-toggle"
    }, tn = "offset", en = "position", nn = function() {
        function n(t, e) {
            var n = this;
            this._element = t, this._scrollElement = "BODY" === t.tagName ? window : t, this._config = this._getConfig(e), 
            this._selector = this._config.target + " " + $e.NAV_LINKS + "," + this._config.target + " " + $e.LIST_ITEMS + "," + this._config.target + " " + $e.DROPDOWN_ITEMS, 
            this._offsets = [], this._targets = [], this._activeTarget = null, this._scrollHeight = 0, 
            Ve(this._scrollElement).on(Xe.SCROLL, function(t) {
                return n._process(t);
            }), this.refresh(), this._process();
        }
        var t = n.prototype;
        return t.refresh = function() {
            var e = this, t = this._scrollElement === this._scrollElement.window ? tn : en, r = "auto" === this._config.method ? t : this._config.method, s = r === en ? this._getScrollTop() : 0;
            this._offsets = [], this._targets = [], this._scrollHeight = this._getScrollHeight(), 
            Ve.makeArray(Ve(this._selector)).map(function(t) {
                var e, n = Cn.getSelectorFromElement(t);
                if (n && (e = Ve(n)[0]), e) {
                    var i = e.getBoundingClientRect();
                    if (i.width || i.height) return [ Ve(e)[r]().top + s, n ];
                }
                return null;
            }).filter(function(t) {
                return t;
            }).sort(function(t, e) {
                return t[0] - e[0];
            }).forEach(function(t) {
                e._offsets.push(t[0]), e._targets.push(t[1]);
            });
        }, t.dispose = function() {
            Ve.removeData(this._element, Be), Ve(this._scrollElement).off(Ye), this._element = null, 
            this._scrollElement = null, this._config = null, this._selector = null, this._offsets = null, 
            this._targets = null, this._activeTarget = null, this._scrollHeight = null;
        }, t._getConfig = function(t) {
            if ("string" != typeof (t = h({}, qe, "object" == typeof t && t ? t : {})).target) {
                var e = Ve(t.target).attr("id");
                e || (e = Cn.getUID(Qe), Ve(t.target).attr("id", e)), t.target = "#" + e;
            }
            return Cn.typeCheckConfig(Qe, t, ze), t;
        }, t._getScrollTop = function() {
            return this._scrollElement === window ? this._scrollElement.pageYOffset : this._scrollElement.scrollTop;
        }, t._getScrollHeight = function() {
            return this._scrollElement.scrollHeight || Math.max(document.body.scrollHeight, document.documentElement.scrollHeight);
        }, t._getOffsetHeight = function() {
            return this._scrollElement === window ? window.innerHeight : this._scrollElement.getBoundingClientRect().height;
        }, t._process = function() {
            var t = this._getScrollTop() + this._config.offset, e = this._getScrollHeight(), n = this._config.offset + e - this._getOffsetHeight();
            if (this._scrollHeight !== e && this.refresh(), n <= t) {
                var i = this._targets[this._targets.length - 1];
                this._activeTarget !== i && this._activate(i);
            } else {
                if (this._activeTarget && t < this._offsets[0] && 0 < this._offsets[0]) return this._activeTarget = null, 
                void this._clear();
                for (var r = this._offsets.length; r--; ) {
                    this._activeTarget !== this._targets[r] && t >= this._offsets[r] && ("undefined" == typeof this._offsets[r + 1] || t < this._offsets[r + 1]) && this._activate(this._targets[r]);
                }
            }
        }, t._activate = function(e) {
            this._activeTarget = e, this._clear();
            var t = this._selector.split(",");
            t = t.map(function(t) {
                return t + '[data-target="' + e + '"],' + t + '[href="' + e + '"]';
            });
            var n = Ve(t.join(","));
            n.hasClass(Je) ? (n.closest($e.DROPDOWN).find($e.DROPDOWN_TOGGLE).addClass(Ze), 
            n.addClass(Ze)) : (n.addClass(Ze), n.parents($e.NAV_LIST_GROUP).prev($e.NAV_LINKS + ", " + $e.LIST_ITEMS).addClass(Ze), 
            n.parents($e.NAV_LIST_GROUP).prev($e.NAV_ITEMS).children($e.NAV_LINKS).addClass(Ze)), 
            Ve(this._scrollElement).trigger(Xe.ACTIVATE, {
                relatedTarget: e
            });
        }, t._clear = function() {
            Ve(this._selector).filter($e.ACTIVE).removeClass(Ze);
        }, n._jQueryInterface = function(e) {
            return this.each(function() {
                var t = Ve(this).data(Be);
                if (t || (t = new n(this, "object" == typeof e && e), Ve(this).data(Be, t)), "string" == typeof e) {
                    if ("undefined" == typeof t[e]) throw new TypeError('No method named "' + e + '"');
                    t[e]();
                }
            });
        }, o(n, null, [ {
            key: "VERSION",
            get: function() {
                return "4.1.1";
            }
        }, {
            key: "Default",
            get: function() {
                return qe;
            }
        } ]), n;
    }(), Ve(window).on(Xe.LOAD_DATA_API, function() {
        for (var t = Ve.makeArray(Ve($e.DATA_SPY)), e = t.length; e--; ) {
            var n = Ve(t[e]);
            nn._jQueryInterface.call(n, n.data());
        }
    }), Ve.fn[Qe] = nn._jQueryInterface, Ve.fn[Qe].Constructor = nn, Ve.fn[Qe].noConflict = function() {
        return Ve.fn[Qe] = Ge, nn._jQueryInterface;
    }, nn), Pn = (on = "." + (sn = "bs.tab"), an = (rn = e).fn.tab, ln = {
        HIDE: "hide" + on,
        HIDDEN: "hidden" + on,
        SHOW: "show" + on,
        SHOWN: "shown" + on,
        CLICK_DATA_API: "click" + on + ".data-api"
    }, hn = "dropdown-menu", cn = "active", un = "disabled", fn = "fade", dn = "show", 
    _n = ".dropdown", gn = ".nav, .list-group", mn = ".active", pn = "> li > .active", 
    vn = '[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]', En = ".dropdown-toggle", 
    yn = "> .dropdown-menu .active", Tn = function() {
        function i(t) {
            this._element = t;
        }
        var t = i.prototype;
        return t.show = function() {
            var n = this;
            if (!(this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE && rn(this._element).hasClass(cn) || rn(this._element).hasClass(un))) {
                var t, i, e = rn(this._element).closest(gn)[0], r = Cn.getSelectorFromElement(this._element);
                if (e) {
                    var s = "UL" === e.nodeName ? pn : mn;
                    i = (i = rn.makeArray(rn(e).find(s)))[i.length - 1];
                }
                var o = rn.Event(ln.HIDE, {
                    relatedTarget: this._element
                }), a = rn.Event(ln.SHOW, {
                    relatedTarget: i
                });
                if (i && rn(i).trigger(o), rn(this._element).trigger(a), !a.isDefaultPrevented() && !o.isDefaultPrevented()) {
                    r && (t = rn(r)[0]), this._activate(this._element, e);
                    var l = function() {
                        var t = rn.Event(ln.HIDDEN, {
                            relatedTarget: n._element
                        }), e = rn.Event(ln.SHOWN, {
                            relatedTarget: i
                        });
                        rn(i).trigger(t), rn(n._element).trigger(e);
                    };
                    t ? this._activate(t, t.parentNode, l) : l();
                }
            }
        }, t.dispose = function() {
            rn.removeData(this._element, sn), this._element = null;
        }, t._activate = function(t, e, n) {
            var i = this, r = ("UL" === e.nodeName ? rn(e).find(pn) : rn(e).children(mn))[0], s = n && r && rn(r).hasClass(fn), o = function() {
                return i._transitionComplete(t, r, n);
            };
            if (r && s) {
                var a = Cn.getTransitionDurationFromElement(r);
                rn(r).one(Cn.TRANSITION_END, o).emulateTransitionEnd(a);
            } else o();
        }, t._transitionComplete = function(t, e, n) {
            if (e) {
                rn(e).removeClass(dn + " " + cn);
                var i = rn(e.parentNode).find(yn)[0];
                i && rn(i).removeClass(cn), "tab" === e.getAttribute("role") && e.setAttribute("aria-selected", !1);
            }
            if (rn(t).addClass(cn), "tab" === t.getAttribute("role") && t.setAttribute("aria-selected", !0), 
            Cn.reflow(t), rn(t).addClass(dn), t.parentNode && rn(t.parentNode).hasClass(hn)) {
                var r = rn(t).closest(_n)[0];
                r && rn(r).find(En).addClass(cn), t.setAttribute("aria-expanded", !0);
            }
            n && n();
        }, i._jQueryInterface = function(n) {
            return this.each(function() {
                var t = rn(this), e = t.data(sn);
                if (e || (e = new i(this), t.data(sn, e)), "string" == typeof n) {
                    if ("undefined" == typeof e[n]) throw new TypeError('No method named "' + n + '"');
                    e[n]();
                }
            });
        }, o(i, null, [ {
            key: "VERSION",
            get: function() {
                return "4.1.1";
            }
        } ]), i;
    }(), rn(document).on(ln.CLICK_DATA_API, vn, function(t) {
        t.preventDefault(), Tn._jQueryInterface.call(rn(this), "show");
    }), rn.fn.tab = Tn._jQueryInterface, rn.fn.tab.Constructor = Tn, rn.fn.tab.noConflict = function() {
        return rn.fn.tab = an, Tn._jQueryInterface;
    }, Tn);
    !function(t) {
        if ("undefined" == typeof t) throw new TypeError("Bootstrap's JavaScript requires jQuery. jQuery must be included before Bootstrap's JavaScript.");
        var e = t.fn.jquery.split(" ")[0].split(".");
        if (e[0] < 2 && e[1] < 9 || 1 === e[0] && 9 === e[1] && e[2] < 1 || 4 <= e[0]) throw new Error("Bootstrap's JavaScript requires at least jQuery v1.9.1 but less than v4.0.0");
    }(e), t.Util = Cn, t.Alert = In, t.Button = An, t.Carousel = Dn, t.Collapse = bn, 
    t.Dropdown = Sn, t.Modal = wn, t.Popover = On, t.Scrollspy = kn, t.Tab = Pn, t.Tooltip = Nn, 
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
});